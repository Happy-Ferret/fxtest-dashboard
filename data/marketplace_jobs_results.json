{"last_updated": "2014-09-19 17:00:02.158165", "results": [{"group": "Android", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_viewing_reviews_clicking_back_goes_to_app_page/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_after_viewing_reviews_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_with_empty_field_returns_results/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_searching_with_empty_field_returns_results"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "expected test failure: Issue 500 Login tests currently don't work on Saucelabs"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [], "passed": [], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_that_verifies_categories_menu/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_verifies_categories_menu"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "expected test failure: Issue 500 Login tests currently don't work on Saucelabs"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_writing_a_review_clicking_back_goes_to_app_page/", "failed": [], "passed": [], "test_name": "test_that_after_writing_a_review_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_returns_results/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_searching_returns_results"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_details_page_for_an_app/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_details_page_for_an_app"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "expected test failure: Issue 500 Login tests currently don't work on Saucelabs"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_login_and_logout/", "failed": [], "passed": [], "test_name": "test_user_can_login_and_logout"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "expected test failure: Issue 500 Login tests currently don't work on Saucelabs"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_go_back_from_settings_page/", "failed": [], "passed": [], "test_name": "test_user_can_go_back_from_settings_page"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_searching_with_no_matching_results/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_searching_with_no_matching_results"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_reviews_section/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_reviews_section"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_switch_between_new_and_popular_tab/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_switch_between_new_and_popular_tab"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "condition: True: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.mobile.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: condition: True"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}, {"group": "Firefox OS", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_add_review/TestMarketplaceAddReview/test_add_review/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_add_review"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_search_and_install_app.py\", line 27, in test_search_and_install_app\n    self.app_name = marketplace.popular_apps[0].name\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 87, in popular_apps\n    self.show_popular_apps()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 128, in show_popular_apps\n    self.marionette.find_element(*self._popular_apps_tab_locator).tap()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette.py\", line 1183, in find_element\n    response = self._send_message('findElement', 'value', **kwargs)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette.py\", line 612, in _send_message\n    self._handle_error(response)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette.py\", line 633, in _handle_error\n    raise NoSuchElementException(message=message, status=status, stacktrace=stacktrace)\nNoSuchElementException: NoSuchElementException: Unable to locate element: #gallery .tabs a:nth-child(1)\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_and_install_app/TestSearchMarketplaceAndInstallApp/test_search_and_install_app/", "failed": [], "passed": [], "test_name": "test_search_and_install_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_login/TestMarketplaceFeedback/test_marketplace_feedback_user/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_user"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_anonymous/TestMarketplaceFeedback/test_marketplace_feedback_anonymous/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_anonymous"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_login/TestMarketplaceLogin/test_login_marketplace/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_login_marketplace"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_without_connectivity/TestMarketplaceWithoutConnectivity/test_marketplace_without_connectivity/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_without_connectivity"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_purchase_app.py\", line 35, in test_purchase_app\n    payment.create_pin(PIN)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/payment/app.py\", line 41, in create_pin\n    self.wait_for_element_displayed(*self._create_pin_form_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 69, in wait_for_element_displayed\n    raise TimeoutException('Element %s not present before timeout' % locator)\nTimeoutException: TimeoutException: Element form[action=\"/mozpay/pin/create\"] not present before timeout\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_purchase_app/TestMarketplacePurchaseApp/test_purchase_app/", "failed": [], "passed": [], "test_name": "test_purchase_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_for_paid_app/TestSearchMarketplacePaidApp/test_search_paid_app/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_search_paid_app"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_create_confirm_pin.py\", line 34, in test_create_confirm_pin\n    payment.create_pin(PIN)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/payment/app.py\", line 41, in create_pin\n    self.wait_for_element_displayed(*self._create_pin_form_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 69, in wait_for_element_displayed\n    raise TimeoutException('Element %s not present before timeout' % locator)\nTimeoutException: TimeoutException: Element form[action=\"/mozpay/pin/create\"] not present before timeout\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_create_confirm_pin/TestMarketplaceCreateConfirmPin/test_create_confirm_pin/", "failed": [], "passed": [], "test_name": "test_create_confirm_pin"}]}, {"group": "Desktop", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_application_page_contains_proper_objects/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_application_page_contains_proper_objects"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_the_search_tag_is_present_in_the_search_results/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_the_search_tag_is_present_in_the_search_results"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_date/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_apps_are_sorted_by_date'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x1081cc690>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x1081cca10>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x1081cc650>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1081c4050>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_that_checks_apps_are_sorted_by_date"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x1081c4510>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x1081c4f50>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x1081c41d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10815d9d0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_that_checks_editing_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "We currently don't have the option for changing the language in Fireplace: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/tests/desktop/consumer_pages/test_users_account.py:76: Skipped: We currently don't have the option for changing the language in Fireplace"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_that_checks_changing_language/", "failed": [], "passed": [], "test_name": "test_that_checks_changing_language"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_clicking_on_content_rating/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_clicking_on_content_rating"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_deletion_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_deletion_of_a_review"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_editing_user_profile/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_editing_user_profile"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_hosted_app_submission'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x10925d3d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x10925d850>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x10925ded0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10925dc90>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_hosted_app_submission"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_in_consumer_pages/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_in_consumer_pages"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_anonymous_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_anonymous_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_api_submit/TestAPI/test_assert_that_a_app_can_be_added_and_deleted_via_the_api/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_assert_that_a_app_can_be_added_and_deleted_via_the_api'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x1081606d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x108160490>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x108160d90>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10815dc50>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_assert_that_a_app_can_be_added_and_deleted_via_the_api"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_header_has_expected_items/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_header_has_expected_items"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x10922b450>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x10922b550>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x10922be90>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1092140d0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "Purchase app option is currently not available for desktop environment: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Purchase app option is currently not available for desktop environment"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_purchase_app/TestPurchaseApp/test_that_purchases_an_app_without_pre_auth_and_requests_a_refund/", "failed": [], "passed": [], "test_name": "test_that_purchases_an_app_without_pre_auth_and_requests_a_refund"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_opening_every_category_page_from_categories_menu/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_opening_every_category_page_from_categories_menu"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_support_information_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_support_information_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x108160050>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x108160750>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x1081600d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1081e8210>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_that_checks_editing_support_information_for_a_free_app"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_editing_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_editing_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_deletes_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_deletes_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x1081e52d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x1081e5110>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x1081e5390>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10814cfd0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_that_deletes_app"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x1081b1490>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x1081afc90>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x1081afed0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1081b1410>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_that_checks_required_field_validations_on_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 977084 - Problems with screenshot previews on the Edit Listing page"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_can_be_added/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_a_screenshot_can_be_added"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_checks_search_with_foreign_characters/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_checks_search_with_foreign_characters"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_create_new_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_create_new_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_device_types_for_hosted_apps/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_device_types_for_hosted_apps'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x1081b3590>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x1081e5290>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x1081e5b50>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1081e6410>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_that_checks_required_field_validations_on_device_types_for_hosted_apps"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_searching_with_empty_field_using_submit_returns_results/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_searching_with_empty_field_using_submit_returns_results"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Rating]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Rating]"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_signed_in_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_signed_in_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_an_icon_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_an_icon_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109218050>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109218750>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x1092182d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1092181d0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_that_an_icon_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x104367248>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x102ea5c68>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        # delete the review before getting started\n>       self.mk_api.delete_app_review(self.review_id)\n\ntests/desktop/consumer_pages/test_reviews.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x104305098>\nreview_id = u'607729'\n\n    def delete_app_review(self, review_id):\n        from urlparse import urlunparse\n        client = self._client\n        endpoint = '/apps/rating/%s/' % review_id\n        _url = urlunparse((client.protocol, '%s:%s' % (client.domain,\n                                                       client.port),\n                           '%s/api/v1%s' % (client.prefix, endpoint),\n                           '', '', ''))\n>       return self._client.conn.fetch('DELETE', _url)\n\nmocks/marketplace_api.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x104305290>\nmethod = 'DELETE'\nurl = u'https://marketplace.allizom.org:443/api/v1/apps/rating/607729/'\ndata = None, expected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 404 Client Error: NOT FOUND\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_packaged_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_packaged_app_submission'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x10925b4d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x10925b2d0>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x10925b9d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1092183d0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_packaged_app_submission"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_nav_menu_tabs/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_nav_menu_tabs"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_categories_menu/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_categories_menu"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Relevancy]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Relevancy]"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_name/", "failed": [{"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_apps_are_sorted_by_name'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x1081afd50>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x1081af090>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x1081af690>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x108162090>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub"], "test_name": "test_that_checks_apps_are_sorted_by_name"}, {"skipped": {"jobs": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 1053754 - [dev] traceback on setting up payments account for an app"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_paid_app_submission/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_hosted_paid_app_submission"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Search suggestions not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Search suggestions not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}]}