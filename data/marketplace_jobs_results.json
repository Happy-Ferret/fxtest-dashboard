{"last_updated": "2014-05-07 13:30:02.271959", "results": [{"group": "Android", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_viewing_reviews_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10e603128>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10e603440>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e60fdd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e60fdd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10e42ea10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10a29c368>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a29c710>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a296f90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a296f90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10a075a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x103980050>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103980950>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103651b90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103651b90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x1034d0a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_after_viewing_reviews_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_searching_with_no_matching_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x110cee5a8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110cee830>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110cd7990>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110cd7990>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x110b17a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x1100d0c68>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1100d08c0>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110092850>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110092850>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10ff12a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x1058eaab8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1058ea2d8>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1058e1210>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1058e1210>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x105751a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_searching_with_no_matching_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10e5150e0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10e501098>\n\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e838fd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e838fd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10e316a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x110c47ab8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110c47b48>\n\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110c44890>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110c44890>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x110abda10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_go_back_from_settings_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10a82fa28>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a82fc68>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a83fe10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a83fe10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10a651a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x103498bd8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103498830>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1034a5090>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1034a5090>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10326fa10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x1029da680>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1029da878>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1029a2850>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1029a2850>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x102824a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_user_can_go_back_from_settings_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_that_verifies_categories_section/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x1105a4710>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1105a4dd0>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110572e90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110572e90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x11040aa10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x10a7f46c8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a8314d0>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a820410>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a820410>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10a63fa10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x10ae18320>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ae18050>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ae26690>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ae26690>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10aca5a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_verifies_categories_section"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_returns_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10e026518>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10e0265f0>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e01bd10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e01bd10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10de8ba10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x104c57d88>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x104c57fc8>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x104c40390>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x104c40390>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x104a22a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x110779b48>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x11078c560>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110789dd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110789dd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x1105a9a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_searching_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_details_page_for_an_app/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x1095162d8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x109516b90>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109503850>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109503850>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10932fa10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10dd4f128>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10dd4f638>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10dcfac10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10dcfac10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10db13a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x1041ad200>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1041ad560>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x104179d10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x104179d10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x103ff7a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_details_page_for_an_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_login_and_logout/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10bc2aa70>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10bc2ae60>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10bbefd10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10bbefd10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10ba2fa10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10ceaf758>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ceaf9e0>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10cebb650>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10cebb650>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10ccc3a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10f2a2830>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10f2a2b48>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10f574990>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10f574990>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10f0d4a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_user_can_login_and_logout"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_writing_a_review_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10f201e18>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10f201560>\n\n    def test_that_after_writing_a_review_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\"Logged out, click \"Write a Review\" on an app page, sign in, submit a review,\n            click Back, test that the current page is the app page.\n            \"\"\"\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10f1fb350>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10f1fb350>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10f025a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x1066e9200>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1066f8c20>\n\n    def test_that_after_writing_a_review_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\"Logged out, click \"Write a Review\" on an app page, sign in, submit a review,\n            click Back, test that the current page is the app page.\n            \"\"\"\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1066b24d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1066b24d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x106549a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_after_writing_a_review_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_with_empty_field_returns_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10c997950>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10c997ef0>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10c998190>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10c998190>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10c7f9a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x107ffe290>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x107f2c7a0>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107fd49d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107fd49d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x107e2ca10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x1088f8d88>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1088f8758>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1088f71d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1088f71d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x1086f4a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_searching_with_empty_field_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_switch_between_new_and_popular_tab/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x1098ea758>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1098fc368>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1098f3150>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1098f3150>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10970fa10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x1024098c0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x102409998>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1023d0950>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1023d0950>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x1021eca10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x107af3878>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x107af3680>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107ad1190>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107ad1190>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x107933a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_switch_between_new_and_popular_tab"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_reviews_section/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10279a050>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10279a1b8>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x102790990>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x102790990>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x1025c0a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x103c66518>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103c66a28>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103c58e90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103c58e90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x103a7ca10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10ec8e1b8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ec89878>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10eed6250>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10eed6250>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10ea9fa10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_reviews_section"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "condition: True: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.mobile.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: condition: True"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}, {"group": "Firefox OS", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_add_review/TestMarketplaceAddReview/test_add_review/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_add_review"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_and_install_app/TestSearchMarketplaceAndInstallApp/test_search_and_install_app/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_search_and_install_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_login/TestMarketplaceFeedback/test_marketplace_feedback_user/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_user"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_anonymous/TestMarketplaceFeedback/test_marketplace_feedback_anonymous/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_anonymous"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_login/TestMarketplaceLogin/test_login_marketplace/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_login_marketplace"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_without_connectivity/TestMarketplaceWithoutConnectivity/test_marketplace_without_connectivity/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_without_connectivity"}, {"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_purchase_app/TestMarketplacePurchaseApp/test_purchase_app/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "error", "detail": "test error: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette_test.py\", line 163, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_purchase_app.py\", line 28, in test_purchase_app\n    marketplace.login(user)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 57, in login\n    settings.wait_for_sign_out_button()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 38, in wait_for_sign_out_button\n    self.wait_for_element_displayed(*self._sign_out_button_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest-0.23-py2.7.egg/gaiatest/apps/base.py\", line 42, in wait_for_element_displayed\n    lambda m: m.find_element(by, locator).is_displayed())\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/wait.py\", line 143, in until\n    cause=last_exc)\nTimeoutException: TimeoutException: Timed out after 180.1 seconds\n"}], "passed": [], "test_name": "test_purchase_app"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_search_for_paid_app.py\", line 35, in test_search_paid_app\n    (APP_NAME, saved_price))\nAssertionError: The app: Test Zippy With Me does not appear to be a paid app. Its price is \"$0.99\"."}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_for_paid_app/TestSearchMarketplacePaidApp/test_search_paid_app/", "failed": [], "passed": [], "test_name": "test_search_paid_app"}, {"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_create_confirm_pin/TestMarketplaceCreateConfirmPin/test_create_confirm_pin/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "error", "detail": "test error: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette_test.py\", line 163, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_create_confirm_pin.py\", line 27, in test_create_confirm_pin\n    marketplace.login(user)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 52, in login\n    settings = self.tap_settings()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 126, in tap_settings\n    self.wait_for_element_displayed(*self._settings_button_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest-0.23-py2.7.egg/gaiatest/apps/base.py\", line 42, in wait_for_element_displayed\n    lambda m: m.find_element(by, locator).is_displayed())\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/wait.py\", line 143, in until\n    cause=last_exc)\nTimeoutException: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/wait.py\", line 122, in until\n    rv = condition(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest-0.23-py2.7.egg/gaiatest/apps/base.py\", line 42, in <lambda>\n    lambda m: m.find_element(by, locator).is_displayed())\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette.py\", line 1204, in find_element\n    response = self._send_message('findElement', 'value', **kwargs)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/decorators.py\", line 35, in _\n    return func(*args, **kwargs)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette.py\", line 624, in _send_message\n    self._handle_error(response)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette.py\", line 655, in _handle_error\n    raise NoSuchElementException(message=message, status=status, stacktrace=stacktrace)\nTimeoutException: Timed out after 180.2 seconds, caused by <class 'marionette.errors.NoSuchElementException'>\n"}], "passed": [], "test_name": "test_create_confirm_pin"}]}, {"group": "Desktop", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_application_page_contains_proper_objects/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_application_page_contains_proper_objects'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10537c710>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10537c710>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10537c850>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIALkmp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10537c610>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10537c850>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIALkmp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10537c610>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10537c850>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIALkmp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10537ca50>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 8138469, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_application_page_contains_proper_objects"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_the_search_tag_is_present_in_the_search_results/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_the_search_tag_is_present_in_the_search_results'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x105a2a8d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x105a2a8d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x105a2a890>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAIkmp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x105a2a050>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x105a2a890>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAIkmp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x105a2a050>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x105a2a890>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAIkmp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x105a2ae50>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 19781754, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_the_search_tag_is_present_in_the_search_results"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_date/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_apps_are_sorted_by_date'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b661710>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b661710>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10ba3f690>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10ba3f950>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10ba3f690>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10ba3f950>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10ba3f690>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10ba3f150>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABIGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_date"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_open_view_all_link_while_popular_tab_selected/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_open_view_all_link_while_popular_tab_selected'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10e5794d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10e5794d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10e579f10>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAKImp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10e579b10>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10e579f10>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAKImp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10e579b10>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10e579f10>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAKImp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10e579950>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 26748987, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_open_view_all_link_while_popular_tab_selected"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_clicking_on_featured_app_loads_details_page/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_clicking_on_featured_app_loads_details_page'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x110f856d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x110f856d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x110f857d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAGEjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x110f85bd0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x110f857d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAGEjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x110f85bd0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x110f857d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAGEjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x110f85d50>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 1444590, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_clicking_on_featured_app_loads_details_page"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_editing_basic_info_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b747d10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b747d10>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b7abc10>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b7abc10>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b630110>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAA0Gf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "We currently don't have the option for changing the language in Fireplace: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/tests/desktop/consumer_pages/test_users_account.py:76: Skipped: We currently don't have the option for changing the language in Fireplace"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_that_checks_changing_language/", "failed": [], "passed": [], "test_name": "test_that_checks_changing_language"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 969242 - Combine Android Phone and Android Tablet on submission page"}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_hosted_app_submission'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8ec090>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8ec090>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ec450>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8ec3d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ec450>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8ec3d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ec450>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b8ec290>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABMGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": [], "test_name": "test_hosted_app_submission"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_editing_user_profile/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_users_account.TestAccounts instance at 0x10c93e368>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10c8c8878>\n\n    @pytest.mark.credentials\n    def test_editing_user_profile(self, mozwebqa):\n    \n        user = PersonaTestUser().create_user()\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n        home_page.login(user)\n    \n>       profile_page = home_page.header.click_edit_account_settings()\n\ntests/desktop/consumer_pages/test_users_account.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.base.HeaderRegion object at 0x10cc27710>\n\n    def click_edit_account_settings(self):\n        self.hover_over_settings_menu()\n>       self.selenium.find_element(*self._edit_user_settings_locator).click()\n\npages/desktop/consumer_pages/base.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement object at 0x10c9217d0>\n\n    def click(self):\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webelement.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement object at 0x10c9217d0>\ncommand = 'clickElement'\nparams = {'id': u'8', 'sessionId': u'05448deddd914b4696cd6486b6ca624c'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n            Args:\n              command: The name of the command to _execute as a string.\n              params: A dictionary of named parameters to send with the command.\n    \n            Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webelement.py:370: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10bccacd0>\ndriver_command = 'clickElement'\nparams = {'id': u'8', 'sessionId': u'05448deddd914b4696cd6486b6ca624c'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10c8dd050>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 28814882, u'sessionId': u'05448deddd914b4696cd6486b6ca624c', u'state': u'element not visible', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       ElementNotVisibleException: Message: u\"Element is not currently visible and so may not be interacted with\\nCommand duration or timeout: 10.10 seconds\\nBuild info: version: '2.39.0', revision: 'ff23eac', time: '2013-12-16 16:11:15'\\nSystem info: host: 'WIN-R1JBAO1CNPS', ip: '172.20.40.110', os.name: 'Windows Server 2008 R2', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_35'\\nSession ID: 5319de9b-2f54-466a-934a-63e1fa24662f\\nDriver info: org.openqa.selenium.firefox.FirefoxDriver\\nCapabilities [{platform=XP, acceptSslCerts=true, javascriptEnabled=true, browserName=firefox, rotatable=false, locationContextEnabled=true, version=26.0, cssSelectorsEnabled=true, databaseEnabled=true, handlesAlerts=true, browserConnectionEnabled=true, nativeEvents=true, webStorageEnabled=true, applicationCacheEnabled=true, takesScreenshot=true}]\" ; Stacktrace: \nE           at sun.reflect.NativeConstructorAccessorImpl.newInstance0 (None:-2)\nE           at sun.reflect.NativeConstructorAccessorImpl.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (None:-1)\nE           at java.lang.reflect.Constructor.newInstance (None:-1)\nE           at org.openqa.selenium.remote.ErrorHandler.createThrowable (ErrorHandler.java:193)\nE           at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed (ErrorHandler.java:145)\nE           at org.openqa.selenium.remote.RemoteWebDriver.execute (RemoteWebDriver.java:554)\nE           at org.openqa.selenium.remote.RemoteWebElement.execute (RemoteWebElement.java:268)\nE           at org.openqa.selenium.remote.RemoteWebElement.click (RemoteWebElement.java:79)\nE           at sun.reflect.NativeMethodAccessorImpl.invoke0 (None:-2)\nE           at sun.reflect.NativeMethodAccessorImpl.invoke (None:-1)\nE           at sun.reflect.DelegatingMethodAccessorImpl.invoke (None:-1)\nE           at java.lang.reflect.Method.invoke (None:-1)\nE           at org.openqa.selenium.support.events.EventFiringWebDriver$EventFiringWebElement$1.invoke (EventFiringWebDriver.java:331)\nE           at $Proxy3.click (None:-1)\nE           at org.openqa.selenium.support.events.EventFiringWebDriver$EventFiringWebElement.click (EventFiringWebDriver.java:344)\nE           at sun.reflect.NativeMethodAccessorImpl.invoke0 (None:-2)\nE           at sun.reflect.NativeMethodAccessorImpl.invoke (None:-1)\nE           at sun.reflect.DelegatingMethodAccessorImpl.invoke (None:-1)\nE           at java.lang.reflect.Method.invoke (None:-1)\nE           at org.openqa.selenium.remote.server.KnownElements$1.invoke (KnownElements.java:63)\nE           at $Proxy4.click (None:-1)\nE           at org.openqa.selenium.remote.server.handler.ClickElement.call (ClickElement.java:29)\nE           at org.openqa.selenium.remote.server.handler.ClickElement.call (ClickElement.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (None:-1)\nE           at java.util.concurrent.FutureTask.run (None:-1)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (None:-1)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (None:-1)\nE           at java.lang.Thread.run (None:-1)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: ElementNotVisibleException"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_editing_user_profile"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_in_consumer_pages/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_user_can_sign_in_and_sign_out_in_consumer_pages'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x110fbccd0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x110fbccd0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x110fbcad0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAKkop0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x110fbc0d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x110fbcad0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAKkop0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x110fbc0d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x110fbcad0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAKkop0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x110fbc890>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 14971915, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}, {"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_users_account.TestAccounts instance at 0x10c25e638>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10c276320>\n\n    @pytest.mark.credentials\n    @pytest.mark.nondestructive\n    def test_user_can_sign_in_and_sign_out_in_consumer_pages(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n        home_page.login(user=\"default\")\n    \n        Assert.true(home_page.is_the_current_page)\n    \n        # Verify that user is loggedin\n>       Assert.true(home_page.header.is_user_logged_in)\n\ntests/desktop/consumer_pages/test_users_account.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10c0ba9a8>, first = False, msg = None\n\n    @classmethod\n    def true(self, first, msg=None):\n        \"\"\"\n            Asserts that what is given is equal to True\n    \n            :Args:\n             - First object to be tested\n             - Message that will be printed if it fails\n            \"\"\"\n    \n>       assert bool(first) is True, msg\nE       assert bool(False) is True\n\n.env/lib/python2.7/site-packages/unittestzero.py:77: AssertionError"}], "passed": ["marketplace.dev.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_in_consumer_pages"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_anonymous_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_anonymous_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_api_submit/TestAPI/test_assert_that_a_app_can_be_added_and_deleted_via_the_api/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.developer_hub.test_api_submit.TestAPI instance at 0x10c613e18>\nmozwebqa_devhub_logged_in = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10c606638>\n\n    @pytest.mark.credentials\n    def test_assert_that_a_app_can_be_added_and_deleted_via_the_api(self, mozwebqa_devhub_logged_in):\n        mock_app = MockApplication()  # generate mock app\n    \n        # init API client\n        mk_api = MarketplaceAPI.get_client(mozwebqa_devhub_logged_in.base_url,\n                                           mozwebqa_devhub_logged_in.credentials)\n    \n>       mk_api.submit_app(mock_app)  # submit app\n\ntests/desktop/developer_hub/test_api_submit.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10c5c10e0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n        self._validate_manifest(app)\n    \n        #create app\n        self._create_app(app)\n    \n        # update the app with the mock app data\n        self.update_app_data(app)\n    \n        # Add screenshot to app\n>       self.add_screenshot(app)\n\nmocks/marketplace_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10c5c10e0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def add_screenshot(self, app):\n>       response = self._client.create_screenshot(app_id=app.id, filename=app[\"screenshot_link\"], position=1)\n\nmocks/marketplace_api.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10c5c1560>, app_id = 496717\nfilename = '/Users/Shared/Jenkins/Home/jobs/marketplace.stage.developer_hub.saucelabs/workspace/resources/img.jpg'\nposition = 1\n\n    def create_screenshot(self, app_id, filename, position=1):\n        \"\"\"Add a screenshot to the web app identified by by ``app_id``.\n            Screenshots are ordered by ``position``.\n    \n            :returns: HttpResponse:\n                * status_code (int) 201 is successful\n                * content (dict) containing screenshot data\n            \"\"\"\n        # prepare file for upload\n        with open(filename, 'rb') as s_file:\n            s_content = s_file.read()\n        s_encoded = b64encode(s_content)\n        url = self.url('create_screenshot') % app_id\n    \n        mtype, encoding = mimetypes.guess_type(filename)\n        if mtype is None:\n            mtype = 'image/jpeg'\n    \n        data = {'position': position,\n                'file': {'type': mtype,\n                         'data': s_encoded}}\n>       return self.conn.fetch('POST', url, data)\n\n.env/lib/python2.7/site-packages/marketplace/client.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10c5c1cb0>\nmethod = 'POST'\nurl = 'https://marketplace.allizom.org:443/api/v1/apps/app/496717/preview/'\ndata = {'file': {'data': '/9j/4AAQSkZJRgABAQEASABIAAD//gAMQXBwbGVNYXJrCv/bAIQAAwICAgICAwICAgMDAwMEBgQEBAQEBwUGBQYJCAkJCAgICAk...0vdvsmVBpl5ELg3VjOSH8hX25VZdwJyfpn86vni7Wfn8j1Xm2ErexWGrxSa53G/vOnZpWX+K29rWP/Z', 'type': 'image/jpeg'}, 'position': 1}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}, {"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_assert_that_a_app_can_be_added_and_deleted_via_the_api'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b747d10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b747d10>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b7abc10>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b7abc10>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b6360d0>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAAwGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.developer_hub.saucelabs"], "test_name": "test_assert_that_a_app_can_be_added_and_deleted_via_the_api"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_header_has_expected_items/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_header_has_expected_items'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10e790e10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10e790e10>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10e4624d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAKojp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10e790ed0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10e4624d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAKojp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10e790ed0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10e4624d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAKojp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10e462550>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 3562091, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_header_has_expected_items"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_that_manifest_url_cannot_be_edited_via_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_that_manifest_url_cannot_be_edited_via_basic_info_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b542550>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b542550>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b542510>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b542b90>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b542510>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b542b90>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b542510>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b549c10>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAA4Gf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_that_manifest_url_cannot_be_edited_via_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "Purchase app option is currently not available for desktop environment: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Purchase app option is currently not available for desktop environment"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_purchase_app/TestPurchaseApp/test_that_purchases_an_app_without_pre_auth_and_requests_a_refund/", "failed": [], "passed": [], "test_name": "test_that_purchases_an_app_without_pre_auth_and_requests_a_refund"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_deletion_of_a_review/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x1069cc0e0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1069ccc20>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_deletion_of_a_review(self, mozwebqa):\n        \"\"\"\n            https://moztrap.mozilla.org/manage/case/648/\n            \"\"\"\n    \n>       self._reviews_setup(mozwebqa)\n\ntests/desktop/consumer_pages/test_reviews.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x1069cc0e0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1069ccc20>\n\n    def _reviews_setup(self, mozwebqa):\n        # init API client\n        self.mk_api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                                mozwebqa.credentials)\n    \n        # Submit a review using marketplace API\n        mock_review = MockReview()\n        home_page = Home(mozwebqa)\n        self.app_name, self.review_id = self.mk_api.submit_app_review_for_either(\n            home_page.app_under_test,\n            mock_review.body,\n>           mock_review.rating)\n\ntests/desktop/consumer_pages/test_reviews.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1069cc3f8>\napps = ['Wikipedia', 'Calculator']\nreview = 'automatic app review by Selenium tests 1399494207', rating = 3\n\n    def submit_app_review_for_either(self, apps, review, rating):\n        from requests.exceptions import HTTPError\n        from datetime import datetime\n    \n        # Get app details\n        apps_details = {}\n        for app in apps:\n            apps_details.update({\n>               app: self.get_app(app),\n            })\n\nmocks/marketplace_api.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1069cc3f8>\napp = 'Wikipedia'\n\n    def get_app(self, app):\n>       response = self._client.conn.fetch('GET', self._client.url('app') % app)\n\nmocks/marketplace_api.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x1069cc6c8>\nmethod = 'GET'\nurl = 'https://marketplace.allizom.org:443/api/v1/apps/app/Wikipedia/'\ndata = None, expected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_that_checks_the_deletion_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_opening_every_category_page_from_categories_section/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_opening_every_category_page_from_categories_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1058dc290>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1058dc290>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1059ac690>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAHkjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1059ac7d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1059ac690>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAHkjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1059ac7d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1059ac690>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAHkjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x105cff9d0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 350120, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_opening_every_category_page_from_categories_section"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_support_information_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_editing_support_information_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5a5790>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5a5790>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5c2ed0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b4ef2d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5c2ed0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b4ef2d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5c2ed0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b5c2f50>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAA0Gf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_support_information_for_a_free_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_editing_of_a_review/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x10ed831b8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ed83050>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_editing_of_a_review(self, mozwebqa):\n    \n>       self._reviews_setup(mozwebqa)\n\ntests/desktop/consumer_pages/test_reviews.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x10ed831b8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ed83050>\n\n    def _reviews_setup(self, mozwebqa):\n        # init API client\n        self.mk_api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                                mozwebqa.credentials)\n    \n        # Submit a review using marketplace API\n        mock_review = MockReview()\n        home_page = Home(mozwebqa)\n        self.app_name, self.review_id = self.mk_api.submit_app_review_for_either(\n            home_page.app_under_test,\n            mock_review.body,\n>           mock_review.rating)\n\ntests/desktop/consumer_pages/test_reviews.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10ed83290>\napps = ['Wikipedia', 'Calculator']\nreview = 'automatic app review by Selenium tests 1399494186', rating = 5\n\n    def submit_app_review_for_either(self, apps, review, rating):\n        from requests.exceptions import HTTPError\n        from datetime import datetime\n    \n        # Get app details\n        apps_details = {}\n        for app in apps:\n            apps_details.update({\n>               app: self.get_app(app),\n            })\n\nmocks/marketplace_api.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10ed83290>\napp = 'Wikipedia'\n\n    def get_app(self, app):\n>       response = self._client.conn.fetch('GET', self._client.url('app') % app)\n\nmocks/marketplace_api.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10ed833f8>\nmethod = 'GET'\nurl = 'https://marketplace.allizom.org:443/api/v1/apps/app/Wikipedia/'\ndata = None, expected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_that_checks_the_editing_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_deletes_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_deletes_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5d1f50>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5d1f50>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5d1cd0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b5d1dd0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5d1cd0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b5d1dd0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5d1cd0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b5d1c90>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAAwGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_deletes_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_open_view_all_link_while_new_tab_selected/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_open_view_all_link_while_new_tab_selected'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1053772d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1053772d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1053f8150>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIANImp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1053f8950>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1053f8150>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIANImp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1053f8950>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1053f8150>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIANImp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1054592d0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 9238921, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_open_view_all_link_while_new_tab_selected"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_required_field_validations_on_basic_info_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b60b7d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b60b7d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b60b990>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b60bd50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b60b990>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b60bd50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b60b990>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b53d250>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAA4Gf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "xfail-marked test passes unexpectedly: None"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_can_be_added/", "failed": [], "passed": [], "test_name": "test_that_a_screenshot_can_be_added"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_checks_search_with_foreign_characters/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_search_with_foreign_characters'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x105598250>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x105598250>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1052e0090>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAMIop0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1052e0e50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1052e0090>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAMIop0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1052e0e50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1052e0090>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAMIop0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x105306090>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 11040434, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_checks_search_with_foreign_characters"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_create_new_user/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_users_account.TestAccounts instance at 0x10b0f7e18>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10b0f7908>\n\n    @pytest.mark.credentials\n    def test_create_new_user(self, mozwebqa):\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        home_page.login()\n>       Assert.false(home_page.header.is_sign_in_visible)\n\ntests/desktop/consumer_pages/test_users_account.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10af1b9a8>, first = True, msg = None\n\n    @classmethod\n    def false(self, first, msg=None):\n        \"\"\"\n            Asserts that what is given is equal to False\n    \n            :Args:\n             - First object to be tested\n             - Message that will be printed if it fails\n            \"\"\"\n    \n>       assert bool(first) is False, msg\nE       assert True is False\nE        +  where True = bool(True)\n\n.env/lib/python2.7/site-packages/unittestzero.py:89: AssertionError"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_create_new_user"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 969242 - Combine Android Phone and Android Tablet on submission page"}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_device_types_for_hosted_apps/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_required_field_validations_on_device_types_for_hosted_apps'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b531650>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b531650>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b52d6d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b52d090>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b52d6d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b52d090>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b52d6d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b52dcd0>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAA8Gf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": [], "test_name": "test_that_checks_required_field_validations_on_device_types_for_hosted_apps"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_searching_with_empty_field_using_submit_returns_results/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_searching_with_empty_field_using_submit_returns_results'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x110fba550>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x110fba550>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x110fbaa90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAHAmp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x110fbac10>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x110fbaa90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAHAmp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x110fbac10>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x110fbaa90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAHAmp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x110fbacd0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 11030075, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_searching_with_empty_field_using_submit_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_categories_section/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_categories_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1055a0e10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1055a0e10>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10526e4d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAMMjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1055a0ed0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10526e4d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAMMjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1055a0ed0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10526e4d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAMMjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10526e550>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 22113741, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_categories_section"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Rating]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Rating]"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_signed_in_user/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_details_page.TestDetailsPage instance at 0x103f563f8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103de03f8>\n\n    @pytest.mark.credentials\n    def test_that_reports_abuse_as_signed_in_user(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        Assert.true(home_page.is_the_current_page)\n        home_page.login(user=\"default\")\n>       Assert.true(home_page.header.is_user_logged_in)\n\ntests/desktop/consumer_pages/test_details_page.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x103c3b9a8>, first = False, msg = None\n\n    @classmethod\n    def true(self, first, msg=None):\n        \"\"\"\n            Asserts that what is given is equal to True\n    \n            :Args:\n             - First object to be tested\n             - Message that will be printed if it fails\n            \"\"\"\n    \n>       assert bool(first) is True, msg\nE       assert bool(False) is True\n\n.env/lib/python2.7/site-packages/unittestzero.py:77: AssertionError"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_that_reports_abuse_as_signed_in_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_an_icon_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_an_icon_cannot_be_added_via_an_invalid_file_format'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8afed0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8afed0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8af0d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8afb50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8af0d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8afb50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8af0d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b8affd0>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABAGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_an_icon_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x103e37c20>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103e377a0>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n>       self._reviews_setup(mozwebqa)\n\ntests/desktop/consumer_pages/test_reviews.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x103e37c20>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103e377a0>\n\n    def _reviews_setup(self, mozwebqa):\n        # init API client\n        self.mk_api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                                mozwebqa.credentials)\n    \n        # Submit a review using marketplace API\n        mock_review = MockReview()\n        home_page = Home(mozwebqa)\n        self.app_name, self.review_id = self.mk_api.submit_app_review_for_either(\n            home_page.app_under_test,\n            mock_review.body,\n>           mock_review.rating)\n\ntests/desktop/consumer_pages/test_reviews.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x103e37758>\napps = ['Wikipedia', 'Calculator']\nreview = 'automatic app review by Selenium tests 1399494206', rating = 1\n\n    def submit_app_review_for_either(self, apps, review, rating):\n        from requests.exceptions import HTTPError\n        from datetime import datetime\n    \n        # Get app details\n        apps_details = {}\n        for app in apps:\n            apps_details.update({\n>               app: self.get_app(app),\n            })\n\nmocks/marketplace_api.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x103e37758>\napp = 'Wikipedia'\n\n    def get_app(self, app):\n>       response = self._client.conn.fetch('GET', self._client.url('app') % app)\n\nmocks/marketplace_api.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x103e37440>\nmethod = 'GET'\nurl = 'https://marketplace.allizom.org:443/api/v1/apps/app/Wikipedia/'\ndata = None, expected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 969242 - Combine Android Phone and Android Tablet on submission page"}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_packaged_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_packaged_app_submission'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8ffdd0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8ffdd0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ffb50>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8ff8d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ffb50>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8ff8d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ffb50>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b8ff650>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABIGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": [], "test_name": "test_packaged_app_submission"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 969284 - [dev] \"Oops ...\" page displayed when trying to save payment options for a hosted paid app"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_paid_app_submission/", "failed": [], "passed": [], "test_name": "test_hosted_paid_app_submission"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_featured_application_section/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_featured_application_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10546fe50>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10546fe50>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10546fb90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIANojp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10546f910>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10546fb90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIANojp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10546f910>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10546fb90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIANojp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10546ffd0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 4223196, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_featured_application_section"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_name/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_apps_are_sorted_by_name'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b548450>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b548450>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8bbc10>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b5481d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8bbc10>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b5481d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8bbc10>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b8bbbd0>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABEGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_name"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b662290>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b662290>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b51d610>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b662f90>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b51d610>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b662f90>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b51d610>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b51d050>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABAGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_gallery_section_tabs/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_gallery_section_tabs'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x102790e50>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x102790e50>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x102790b90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAJEjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x102790910>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x102790b90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAJEjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x102790910>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x102790b90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAJEjp0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x102790fd0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 30626012, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_gallery_section_tabs"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Search suggestions not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Search suggestions not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Relevancy]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Relevancy]"}]}]}