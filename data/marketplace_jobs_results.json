{"last_updated": "2014-06-29 07:00:02.726410", "results": [{"group": "Android", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_viewing_reviews_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x1092a5ea8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1092a5e60>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1092853d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1092853d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x104f08cf8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x104f08c68>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x104eea090>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x104eea090>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x102733200>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x102733ef0>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1026ddb90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1026ddb90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_after_viewing_reviews_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_with_empty_field_returns_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10ac40830>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ac089e0>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ac33110>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ac33110>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x1078e4ea8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1078c2fc8>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107889790>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107889790>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10d91cbd8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10d91cd88>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10d937c50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10d937c50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_searching_with_empty_field_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x110e46b48>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110b15dd0>\n\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110b04950>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110b04950>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10eb6c950>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ee55e18>\n\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10eb21850>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10eb21850>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_go_back_from_settings_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10bbb9bd8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10bbb91b8>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10bb67ad0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10bb67ad0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x1079273f8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x107958e18>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107969b10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107969b10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10a611488>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a611128>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a5e2a50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a5e2a50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_user_can_go_back_from_settings_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_that_verifies_categories_section/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x109fa7680>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x109fae5f0>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109f6aa50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109f6aa50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x10b461758>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10b461c68>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b44cf50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b44cf50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x1053f0d40>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1053f02d8>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1053b14d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1053b14d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_verifies_categories_section"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_returns_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10cb0fbd8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10c9986c8>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10c984050>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10c984050>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10cf0ac20>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10cf0ae18>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10cefd610>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10cefd610>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10dc4d320>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10dc7ca70>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10dca7e50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10dca7e50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_searching_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_details_page_for_an_app/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x101d86b48>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x101d86cb0>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x101d805d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x101d805d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x101f861b8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x101fb2cf8>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x101f9e210>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x101f9e210>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x109f8dbd8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x109f8d3f8>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109fb1b90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109fb1b90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_details_page_for_an_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_login_and_logout/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10ffaa710>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ff9bcf8>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ff6bad0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ff6bad0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x1061a84d0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1061a8878>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x106293850>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x106293850>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x102713488>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x102713128>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1026e4a50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1026e4a50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_user_can_login_and_logout"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_writing_a_review_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10a69cc20>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a69ccf8>\n\n    def test_that_after_writing_a_review_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\"Logged out, click \"Write a Review\" on an app page, sign in, submit a review,\n            click Back, test that the current page is the app page.\n            \"\"\"\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a66a610>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a66a610>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x105a68d40>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x105a93c68>\n\n    def test_that_after_writing_a_review_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\"Logged out, click \"Write a Review\" on an app page, sign in, submit a review,\n            click Back, test that the current page is the app page.\n            \"\"\"\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x105a39490>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x105a39490>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_after_writing_a_review_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_searching_with_no_matching_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10e9cb878>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10e9cb488>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e9a9dd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e9a9dd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x1094dad88>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1094dab90>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1094bf990>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1094bf990>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x109c46a28>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x109c46dd0>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109c35710>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109c35710>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_searching_with_no_matching_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_switch_between_new_and_popular_tab/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x102ff9cf8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x102ff9518>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x102ffe510>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x102ffe510>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x110c56758>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110c56c68>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110c41f50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110c41f50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x10cb5fe18>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10cb26440>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10cb20910>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10cb20910>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_switch_between_new_and_popular_tab"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_reviews_section/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x101355290>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x101355488>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x101318f50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x101318f50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10b55b560>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10b55b680>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b532a50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b532a50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x102033320>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1020332d8>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x101fe1a50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x101fe1a50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_reviews_section"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "condition: True: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.mobile.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: condition: True"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}, {"group": "Firefox OS", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_add_review/TestMarketplaceAddReview/test_add_review/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_add_review"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_and_install_app/TestSearchMarketplaceAndInstallApp/test_search_and_install_app/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_search_and_install_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_login/TestMarketplaceFeedback/test_marketplace_feedback_user/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_user"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_anonymous/TestMarketplaceFeedback/test_marketplace_feedback_anonymous/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_anonymous"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_login/TestMarketplaceLogin/test_login_marketplace/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_login_marketplace"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_without_connectivity/TestMarketplaceWithoutConnectivity/test_marketplace_without_connectivity/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_without_connectivity"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_purchase_app.py\", line 35, in test_purchase_app\n    payment.create_pin(PIN)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/payment/app.py\", line 41, in create_pin\n    self.wait_for_element_displayed(*self._create_pin_form_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 69, in wait_for_element_displayed\n    raise TimeoutException('Element %s not present before timeout' % locator)\nTimeoutException: TimeoutException: Element form[action=\"/mozpay/pin/create\"] not present before timeout\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_purchase_app/TestMarketplacePurchaseApp/test_purchase_app/", "failed": [], "passed": [], "test_name": "test_purchase_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_for_paid_app/TestSearchMarketplacePaidApp/test_search_paid_app/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_search_paid_app"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_create_confirm_pin.py\", line 34, in test_create_confirm_pin\n    payment.create_pin(PIN)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/payment/app.py\", line 41, in create_pin\n    self.wait_for_element_displayed(*self._create_pin_form_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 69, in wait_for_element_displayed\n    raise TimeoutException('Element %s not present before timeout' % locator)\nTimeoutException: TimeoutException: Element form[action=\"/mozpay/pin/create\"] not present before timeout\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_create_confirm_pin/TestMarketplaceCreateConfirmPin/test_create_confirm_pin/", "failed": [], "passed": [], "test_name": "test_create_confirm_pin"}]}, {"group": "Desktop", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_application_page_contains_proper_objects/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_application_page_contains_proper_objects'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1033e1750>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1033e1750>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033e1fd0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFMT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1033e1c10>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033e1fd0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFMT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1033e1c10>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033e1fd0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFMT3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1033e1310>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 33149840, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_application_page_contains_proper_objects"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_the_search_tag_is_present_in_the_search_results/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_the_search_tag_is_present_in_the_search_results'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1035ed910>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1035ed910>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1035ed350>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFQT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1035ed4d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1035ed350>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFQT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1035ed4d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1035ed350>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFQT3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1035edb90>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 26283398, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_the_search_tag_is_present_in_the_search_results"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_date/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_apps_are_sorted_by_date'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b6fdc10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b6fdc10>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b6fdf90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABQG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b6fdd10>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b6fdf90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABQG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b6fdd10>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b6fdf90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABQG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b6fdd90>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 6955741, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_date"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_open_view_all_link_while_popular_tab_selected/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_open_view_all_link_while_popular_tab_selected'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1036aa0d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1036aa0d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1036aa150>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFIT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1036aa310>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1036aa150>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFIT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1036aa310>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1036aa150>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFIT3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1036aa250>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 8221154, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_open_view_all_link_while_popular_tab_selected"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_clicking_on_featured_app_loads_details_page/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_clicking_on_featured_app_loads_details_page'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103292a90>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103292a90>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033e1910>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFET3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1033e1790>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033e1910>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFET3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1033e1790>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033e1910>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFET3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1033e1050>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 15130689, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_clicking_on_featured_app_loads_details_page"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_editing_basic_info_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b40be90>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b40be90>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b232c90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b232f90>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b232c90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b232f90>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b232c90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b232d90>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 26461443, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "We currently don't have the option for changing the language in Fireplace: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/tests/desktop/consumer_pages/test_users_account.py:76: Skipped: We currently don't have the option for changing the language in Fireplace"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_that_checks_changing_language/", "failed": [], "passed": [], "test_name": "test_that_checks_changing_language"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_hosted_app_submission'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5651d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5651d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b565290>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABUG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b565090>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b565290>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABUG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b565090>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b565290>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABUG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b565190>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 3511946, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_hosted_app_submission"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_editing_user_profile/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_editing_user_profile"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_in_consumer_pages/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_user_can_sign_in_and_sign_out_in_consumer_pages'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103371810>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103371810>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103371c50>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFYT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103371610>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103371c50>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFYT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103371610>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103371c50>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFYT3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1033719d0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 22844042, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}, {"jobs": ["marketplace.prod.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_users_account.TestAccounts instance at 0x1095cda70>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1095cd3f8>\n\n    @pytest.mark.credentials\n    @pytest.mark.nondestructive\n    def test_user_can_sign_in_and_sign_out_in_consumer_pages(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x1097c9b90>\nuser = 'default'\n\n    def login(self, user=None):\n>       credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user, PersonaTestUser().create_user())\n\npages/desktop/consumer_pages/base.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <persona_test_user.PersonaTestUser instance at 0x109885368>\n\n    def create_user(self):\n        url = \"http://personatestuser.org/email/\"\n        response = urllib2.urlopen(url).read()\n        decode = json.loads(response)\n    \n>       return MockUser(email=decode['email'], password=decode['pass'], name=decode['email'].split('@')[0])\nE       KeyError: 'email'\n\npersona_test_user.py:20: KeyError"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_in_consumer_pages"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_anonymous_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_anonymous_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_api_submit/TestAPI/test_assert_that_a_app_can_be_added_and_deleted_via_the_api/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_assert_that_a_app_can_be_added_and_deleted_via_the_api'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b421350>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b421350>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b421fd0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8G3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b421f50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b421fd0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8G3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b421f50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b421fd0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8G3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b421050>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 18542393, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_assert_that_a_app_can_be_added_and_deleted_via_the_api"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_header_has_expected_items/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_header_has_expected_items'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1036a3090>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1036a3090>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103371b50>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAE8T3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103371c50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103371b50>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAE8T3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103371c50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103371b50>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAE8T3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103371490>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 4875106, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_header_has_expected_items"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b3543d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b3543d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b354c50>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b354dd0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b354c50>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b354dd0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b354c50>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b3545d0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 8542122, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "Purchase app option is currently not available for desktop environment: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Purchase app option is currently not available for desktop environment"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_purchase_app/TestPurchaseApp/test_that_purchases_an_app_without_pre_auth_and_requests_a_refund/", "failed": [], "passed": [], "test_name": "test_that_purchases_an_app_without_pre_auth_and_requests_a_refund"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_deletion_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_deletion_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_opening_every_category_page_from_categories_section/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_opening_every_category_page_from_categories_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1036ae290>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1036ae290>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033de890>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFET3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1033defd0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033de890>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFET3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1033defd0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033de890>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFET3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1033dee90>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 4991931, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_opening_every_category_page_from_categories_section"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_support_information_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_editing_support_information_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b1bcb10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b1bcb10>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b1bc890>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b1bc850>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b1bc890>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b1bc850>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b1bc890>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b1bc950>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 15117332, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_support_information_for_a_free_app"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_editing_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_editing_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_deletes_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_deletes_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b261f50>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b261f50>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b261fd0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8G3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b261d90>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b261fd0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8G3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b261d90>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b261fd0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8G3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b261e90>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 7483318, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_deletes_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_open_view_all_link_while_new_tab_selected/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_open_view_all_link_while_new_tab_selected'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103401a50>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103401a50>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103401dd0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFMT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103401c90>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103401dd0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFMT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103401c90>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103401dd0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFMT3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103401f10>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 24394608, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_open_view_all_link_while_new_tab_selected"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_required_field_validations_on_basic_info_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b1c4d50>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b1c4d50>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b1c4ad0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b1c4990>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b1c4ad0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b1c4990>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b1c4ad0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b1c48d0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 24412781, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "xfail-marked test passes unexpectedly: None"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_can_be_added/", "failed": [], "passed": [], "test_name": "test_that_a_screenshot_can_be_added"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_checks_search_with_foreign_characters/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_search_with_foreign_characters'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1036aa390>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1036aa390>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1036aa150>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFUT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1036aa610>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1036aa150>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFUT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1036aa610>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1036aa150>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFUT3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1036aa350>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 29701859, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_checks_search_with_foreign_characters"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_create_new_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_create_new_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_device_types_for_hosted_apps/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_required_field_validations_on_device_types_for_hosted_apps'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b234110>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b234110>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b234c90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b234c50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b234c90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b234c50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b234c90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b234b10>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 16833166, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_device_types_for_hosted_apps"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_searching_with_empty_field_using_submit_returns_results/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_searching_with_empty_field_using_submit_returns_results'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1035ee350>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1035ee350>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1035eee50>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFQT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1035ee290>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1035eee50>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFQT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1035ee290>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1035eee50>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFQT3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1035ee150>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 2870928, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_searching_with_empty_field_using_submit_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_categories_section/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_categories_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1034702d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1034702d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103470a10>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFAT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103470d50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103470a10>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFAT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103470d50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103470a10>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFAT3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1034709d0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 13210360, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_categories_section"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Rating]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Rating]"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_signed_in_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_signed_in_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_an_icon_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_an_icon_cannot_be_added_via_an_invalid_file_format'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b1b5cd0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b1b5cd0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b28f890>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b28f990>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b28f890>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b28f990>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b28f890>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b28f7d0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 23735459, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_an_icon_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_packaged_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_packaged_app_submission'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b332f10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b332f10>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b6fd9d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABQG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b332f50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b6fd9d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABQG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b332f50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b6fd9d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABQG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b6fd510>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 10307131, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_packaged_app_submission"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_paid_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_hosted_paid_app_submission'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5674d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5674d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b567b90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABUG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b567c10>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b567b90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABUG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b567c10>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b567b90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABUG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b567a90>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 32953709, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_hosted_paid_app_submission"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_featured_application_section/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_featured_application_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103489390>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103489390>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1034890d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFAT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103489cd0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1034890d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFAT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103489cd0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1034890d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFAT3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1033dbd50>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 23556850, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_featured_application_section"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_name/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_apps_are_sorted_by_name'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b700e90>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b700e90>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b700e50>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b700890>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b700e50>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMG3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b700890>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b700e50>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMG3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b700350>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 31517437, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_name"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_gallery_section_tabs/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_gallery_section_tabs'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1033ff210>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1033ff210>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033ff650>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFIT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1033ffc90>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033ff650>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFIT3URmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1033ffc90>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1033ff650>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFIT3URmDreMJwMAAD4LAAAHAAAAdXNlci5...AAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1033ffad0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 531323, u'sessionId': None, u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'unable to create new native thread' ; Stacktrace:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_gallery_section_tabs"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Search suggestions not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Search suggestions not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Relevancy]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Relevancy]"}]}]}