{"last_updated": "2014-09-26 17:00:01.944386", "results": [{"group": "Android", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_viewing_reviews_clicking_back_goes_to_app_page/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_after_viewing_reviews_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_with_empty_field_returns_results/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_searching_with_empty_field_returns_results"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "expected test failure: Issue 500 Login tests currently don't work on Saucelabs"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [], "passed": [], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "expected test failure: Issue 500 Login tests currently don't work on Saucelabs"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_go_back_from_settings_page/", "failed": [], "passed": [], "test_name": "test_user_can_go_back_from_settings_page"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "expected test failure: Issue 500 Login tests currently don't work on Saucelabs"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_writing_a_review_clicking_back_goes_to_app_page/", "failed": [], "passed": [], "test_name": "test_that_after_writing_a_review_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_returns_results/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_searching_returns_results"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_details_page_for_an_app/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_details_page_for_an_app"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "expected test failure: Issue 500 Login tests currently don't work on Saucelabs"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_login_and_logout/", "failed": [], "passed": [], "test_name": "test_user_can_login_and_logout"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_that_verifies_categories_menu/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_verifies_categories_menu"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_searching_with_no_matching_results/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_searching_with_no_matching_results"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_switch_between_new_and_popular_tab/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_switch_between_new_and_popular_tab"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_reviews_section/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_reviews_section"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "condition: True: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.mobile.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: condition: True"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}, {"group": "Firefox OS", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_add_review/TestMarketplaceAddReview/test_add_review/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "error", "detail": "test error: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 163, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_add_review.py\", line 23, in test_add_review\n    marketplace.login(user)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 63, in login\n    persona = settings.tap_sign_in()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 33, in tap_sign_in\n    return Persona(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/persona/app.py\", line 33, in __init__\n    self.wait_for_element_present(*self._persona_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element iframe.screen[data-url*='persona.org/sign_in#NATIVE'] not found before timeout\n"}], "passed": [], "test_name": "test_add_review"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_search_and_install_app.py\", line 27, in test_search_and_install_app\n    self.app_name = marketplace.popular_apps[0].name\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 87, in popular_apps\n    self.show_popular_apps()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 128, in show_popular_apps\n    self.marionette.find_element(*self._popular_apps_tab_locator).tap()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette.py\", line 1183, in find_element\n    response = self._send_message('findElement', 'value', **kwargs)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette.py\", line 612, in _send_message\n    self._handle_error(response)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette.py\", line 633, in _handle_error\n    raise NoSuchElementException(message=message, status=status, stacktrace=stacktrace)\nNoSuchElementException: NoSuchElementException: Unable to locate element: #gallery .tabs a:nth-child(1)\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_and_install_app/TestSearchMarketplaceAndInstallApp/test_search_and_install_app/", "failed": [], "passed": [], "test_name": "test_search_and_install_app"}, {"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_login/TestMarketplaceFeedback/test_marketplace_feedback_user/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "error", "detail": "test error: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 163, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_feedback_login.py\", line 21, in test_marketplace_feedback_user\n    marketplace.login(user)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 63, in login\n    persona = settings.tap_sign_in()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 33, in tap_sign_in\n    return Persona(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/persona/app.py\", line 33, in __init__\n    self.wait_for_element_present(*self._persona_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element iframe.screen[data-url*='persona.org/sign_in#NATIVE'] not found before timeout\n"}], "passed": [], "test_name": "test_marketplace_feedback_user"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_anonymous/TestMarketplaceFeedback/test_marketplace_feedback_anonymous/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_anonymous"}, {"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_login/TestMarketplaceLogin/test_login_marketplace/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "error", "detail": "test error: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 163, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_login.py\", line 26, in test_login_marketplace\n    persona = settings.tap_sign_in()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 33, in tap_sign_in\n    return Persona(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/persona/app.py\", line 33, in __init__\n    self.wait_for_element_present(*self._persona_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element iframe.screen[data-url*='persona.org/sign_in#NATIVE'] not found before timeout\n"}], "passed": [], "test_name": "test_login_marketplace"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_without_connectivity/TestMarketplaceWithoutConnectivity/test_marketplace_without_connectivity/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_without_connectivity"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_purchase_app.py\", line 28, in test_purchase_app\n    marketplace.login(user)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 63, in login\n    persona = settings.tap_sign_in()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 33, in tap_sign_in\n    return Persona(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/persona/app.py\", line 33, in __init__\n    self.wait_for_element_present(*self._persona_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element iframe.screen[data-url*='persona.org/sign_in#NATIVE'] not found before timeout\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_purchase_app/TestMarketplacePurchaseApp/test_purchase_app/", "failed": [], "passed": [], "test_name": "test_purchase_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_for_paid_app/TestSearchMarketplacePaidApp/test_search_paid_app/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_search_paid_app"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_create_confirm_pin.py\", line 27, in test_create_confirm_pin\n    marketplace.login(user)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 63, in login\n    persona = settings.tap_sign_in()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 33, in tap_sign_in\n    return Persona(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/persona/app.py\", line 33, in __init__\n    self.wait_for_element_present(*self._persona_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element iframe.screen[data-url*='persona.org/sign_in#NATIVE'] not found before timeout\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_create_confirm_pin/TestMarketplaceCreateConfirmPin/test_create_confirm_pin/", "failed": [], "passed": [], "test_name": "test_create_confirm_pin"}]}, {"group": "Desktop", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_application_page_contains_proper_objects/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_application_page_contains_proper_objects"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_the_search_tag_is_present_in_the_search_results/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_the_search_tag_is_present_in_the_search_results"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_date/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_apps_are_sorted_by_date'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f46110>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f46590>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x109f46410>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f144d0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_apps_are_sorted_by_date'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106b384d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106b38190>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106b227d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106b274d0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_date"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f27cd0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f27310>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x109f27d90>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f27050>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106ae40d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106ae4210>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106ae4910>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106afc410>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs"], "result": "skipped", "detail": "We currently don't have the option for changing the language in Fireplace: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/tests/desktop/consumer_pages/test_users_account.py:76: Skipped: We currently don't have the option for changing the language in Fireplace"}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_that_checks_changing_language/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_changing_language'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10a22a690>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10a22a690>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        executor = 'http://%s:%s@ondemand.saucelabs.com:80/wd/hub' % (\n            self.credentials['username'],\n            self.credentials['api-key'])\n        self.selenium = webdriver.Remote(command_executor=executor,\n>                                        desired_capabilities=capabilities)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10a270310>\ncommand_executor = 'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@ondemand.saucelabs.com:80/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'build': 'jenkins-marketplace.stage.saucelabs-1696', 'name': 'tests.desktop.consumer_pages.test_users_account.TestAccounts.test_that_checks_changing_language', 'platform': 'Windows 7', ...}\nbrowser_profile = None, proxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10a270310>\ndesired_capabilities = {'browserName': 'firefox', 'build': 'jenkins-marketplace.stage.saucelabs-1696', 'name': 'tests.desktop.consumer_pages.test_users_account.TestAccounts.test_that_checks_changing_language', 'platform': 'Windows 7', ...}\nbrowser_profile = None\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10a270310>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'build': 'jenkins-marketplace.stage.saucelabs-1696', 'name': 'tests...ktop.consumer_pages.test_users_account.TestAccounts.test_that_checks_changing_language', 'platform': 'Windows 7', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n>       response = self.command_executor.execute(driver_command, params)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x10a2706d0>\ncommand = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'build': 'jenkins-marketplace.stage.saucelabs-1696', 'name': 'tests...ktop.consumer_pages.test_users_account.TestAccounts.test_that_checks_changing_language', 'platform': 'Windows 7', ...}}\n\n    def execute(self, command, params):\n        \"\"\"\n            Send a command to the remote server.\n    \n            Any path subtitutions required for the URL mapped to the command should be\n            included in the command parameters.\n    \n            :Args:\n             - command - A string specifying the command to execute.\n             - params - A dictionary of named parameters to send with the command as\n               its JSON payload.\n            \"\"\"\n        command_info = self._commands[command]\n        assert command_info is not None, 'Unrecognised command %s' % command\n        data = utils.dump_json(params)\n        path = string.Template(command_info[1]).substitute(params)\n        url = '%s%s' % (self._url, path)\n>       return self._request(command_info[0], url, body=data)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x10a2706d0>\nmethod = 'POST'\nurl = 'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@162.222.75.179:80/wd/hub/session'\nbody = '{\"desiredCapabilities\": {\"name\": \"tests.desktop.consumer_pages.test_users_account.TestAccounts.test_that_checks_chang...\"restricted-public-info\": true, \"version\": \"31\", \"build\": \"jenkins-marketplace.stage.saucelabs-1696\", \"public\": true}}'\n\n    def _request(self, method, url, body=None):\n        \"\"\"\n            Send an HTTP request to the remote server.\n    \n            :Args:\n             - method - A string for the HTTP method to send the request with.\n             - url - A string for the URL to send the request to.\n             - body - A string for request body. Ignored unless method is POST or PUT.\n    \n            :Returns:\n              A dictionary with the server's parsed JSON response.\n            \"\"\"\n        LOGGER.debug('%s %s %s' % (method, url, body))\n    \n        parsed_url = parse.urlparse(url)\n    \n        if self.keep_alive:\n            headers = {\"Connection\": 'keep-alive', method: parsed_url.path,\n                       \"User-Agent\": \"Python http auth\",\n                       \"Content-type\": \"application/json;charset=\\\"UTF-8\\\"\",\n                       \"Accept\": \"application/json\"}\n            if parsed_url.username:\n                auth = base64.standard_b64encode('%s:%s' %\n                       (parsed_url.username, parsed_url.password)).replace('\\n', '')\n                headers[\"Authorization\"] = \"Basic %s\" % auth\n            if body and method != 'POST' and method != 'PUT':\n                body = None\n            try:\n                self._conn.request(method, parsed_url.path, body, headers)\n                resp = self._conn.getresponse()\n            except httplib.HTTPException:\n                self._conn.close()\n                raise\n    \n            statuscode = resp.status\n        else:\n            password_manager = None\n            if parsed_url.username:\n                netloc = parsed_url.hostname\n                if parsed_url.port:\n                    netloc += \":%s\" % parsed_url.port\n                cleaned_url = parse.urlunparse((parsed_url.scheme,\n                                                   netloc,\n                                                   parsed_url.path,\n                                                   parsed_url.params,\n                                                   parsed_url.query,\n                                                   parsed_url.fragment))\n                password_manager = url_request.HTTPPasswordMgrWithDefaultRealm()\n                password_manager.add_password(None,\n                                              \"%s://%s\" % (parsed_url.scheme, netloc),\n                                              parsed_url.username,\n                                              parsed_url.password)\n                request = Request(cleaned_url, data=body.encode('utf-8'), method=method)\n            else:\n                request = Request(url, data=body.encode('utf-8'), method=method)\n    \n            request.add_header('Accept', 'application/json')\n            request.add_header('Content-Type', 'application/json;charset=UTF-8')\n    \n            if password_manager:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler(),\n                                                  url_request.HTTPBasicAuthHandler(password_manager))\n            else:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler())\n>           resp = opener.open(request)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10a393bd8>\nfullurl = <selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>\ndata = None, timeout = <object object at 0x1091831e0>\n\n    def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n        # accept a URL or a Request object\n        if isinstance(fullurl, basestring):\n            req = Request(fullurl, data)\n        else:\n            req = fullurl\n            if data is not None:\n                req.add_data(data)\n    \n        req.timeout = timeout\n        protocol = req.get_type()\n    \n        # pre-process request\n        meth_name = protocol+\"_request\"\n        for processor in self.process_request.get(protocol, []):\n            meth = getattr(processor, meth_name)\n            req = meth(req)\n    \n        response = self._open(req, data)\n    \n        # post-process response\n        meth_name = protocol+\"_response\"\n        for processor in self.process_response.get(protocol, []):\n            meth = getattr(processor, meth_name)\n>           response = meth(req, response)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPErrorProcessor instance at 0x10b5bd3f8>\nrequest = <selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>\nresponse = <addinfourl at 4485537664 whose fp = <socket._fileobject object at 0x10b44b950>>\n\n    def http_response(self, request, response):\n        code, msg, hdrs = response.code, response.msg, response.info()\n    \n        # According to RFC 2616, \"2xx\" code indicates that the client's\n        # request was successfully received, understood, and accepted.\n        if not (200 <= code < 300):\n            response = self.parent.error(\n>               'http', request, response, code, msg, hdrs)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:523: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10a393bd8>, proto = 401\nargs = ({301: [<urllib2.HTTPRedirectHandler instance at 0x10a393950>], 302: [<urllib2.HTTPRedirectHandler instance at 0x10a39...t instance at 0x10b619d40>, <addinfourl at 4485537664 whose fp = <socket._fileobject object at 0x10b44b950>>, 401, ...)\ndict = {301: [<urllib2.HTTPRedirectHandler instance at 0x10a393950>], 302: [<urllib2.HTTPRedirectHandler instance at 0x10a393...llib2.HTTPRedirectHandler instance at 0x10a393950>], 307: [<urllib2.HTTPRedirectHandler instance at 0x10a393950>], ...}\nmeth_name = 'http_error_401', http_err = 1\n\n    def error(self, proto, *args):\n        if proto in ('http', 'https'):\n            # XXX http[s] protocols are special-cased\n            dict = self.handle_error['http'] # https is not different than http\n            proto = args[2]  # YUCK!\n            meth_name = 'http_error_%s' % proto\n            http_err = 1\n            orig_args = args\n        else:\n            dict = self.handle_error\n            meth_name = proto + '_error'\n            http_err = 0\n        args = (dict, proto, meth_name) + args\n>       result = self._call_chain(*args)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10a393bd8>\nchain = {301: [<urllib2.HTTPRedirectHandler instance at 0x10a393950>], 302: [<urllib2.HTTPRedirectHandler instance at 0x10a393...llib2.HTTPRedirectHandler instance at 0x10a393950>], 307: [<urllib2.HTTPRedirectHandler instance at 0x10a393950>], ...}\nkind = 401, meth_name = 'http_error_401'\nargs = (<selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>, <addinfourl at 4485537664 whose fp = <socket._fileobject object at 0x10b44b950>>, 401, 'Unauthorized', <httplib.HTTPMessage instance at 0x10b5bdfc8>)\nhandlers = [<urllib2.HTTPBasicAuthHandler instance at 0x10a393518>]\nhandler = <urllib2.HTTPBasicAuthHandler instance at 0x10a393518>\nfunc = <bound method HTTPBasicAuthHandler.http_error_401 of <urllib2.HTTPBasicAuthHandler instance at 0x10a393518>>\n\n    def _call_chain(self, chain, kind, meth_name, *args):\n        # Handlers raise an exception if no one else should try to handle\n        # the request, or return None if they can't but another handler\n        # could.  Otherwise, they return the response.\n        handlers = chain.get(kind, ())\n        for handler in handlers:\n            func = getattr(handler, meth_name)\n    \n>           result = func(*args)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:382: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPBasicAuthHandler instance at 0x10a393518>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>\nfp = <addinfourl at 4485537664 whose fp = <socket._fileobject object at 0x10b44b950>>\ncode = 401, msg = 'Unauthorized'\nheaders = <httplib.HTTPMessage instance at 0x10b5bdfc8>\n\n    def http_error_401(self, req, fp, code, msg, headers):\n        url = req.get_full_url()\n        response = self.http_error_auth_reqed('www-authenticate',\n>                                             url, req, headers)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPBasicAuthHandler instance at 0x10a393518>\nauthreq = 'Basic realm=\"Sauce OnDemand\"'\nhost = 'http://162.222.75.179:80/wd/hub/session'\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>\nheaders = <httplib.HTTPMessage instance at 0x10b5bdfc8>\n\n    def http_error_auth_reqed(self, authreq, host, req, headers):\n        # host may be an authority (without userinfo) or a URL with an\n        # authority\n        # XXX could be multiple headers\n        authreq = headers.get(authreq, None)\n    \n        if self.retried > 5:\n            # retry sending the username:password 5 times before failing.\n            raise HTTPError(req.get_full_url(), 401, \"basic auth failed\",\n                            headers, None)\n        else:\n            self.retried += 1\n    \n        if authreq:\n            mo = AbstractBasicAuthHandler.rx.search(authreq)\n            if mo:\n                scheme, quote, realm = mo.groups()\n                if quote not in ['\"', \"'\"]:\n                    warnings.warn(\"Basic Auth Realm was unquoted\",\n                                  UserWarning, 2)\n                if scheme.lower() == 'basic':\n>                   response = self.retry_http_basic_auth(host, req, realm)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:872: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPBasicAuthHandler instance at 0x10a393518>\nhost = 'http://162.222.75.179:80/wd/hub/session'\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>\nrealm = 'Sauce OnDemand'\n\n    def retry_http_basic_auth(self, host, req, realm):\n        user, pw = self.passwd.find_user_password(realm, host)\n        if pw is not None:\n            raw = \"%s:%s\" % (user, pw)\n            auth = 'Basic %s' % base64.b64encode(raw).strip()\n            if req.headers.get(self.auth_header, None) == auth:\n                return None\n            req.add_unredirected_header(self.auth_header, auth)\n>           return self.parent.open(req, timeout=req.timeout)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:885: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10a393bd8>\nfullurl = <selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>\ndata = None, timeout = <object object at 0x1091831e0>\n\n    def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n        # accept a URL or a Request object\n        if isinstance(fullurl, basestring):\n            req = Request(fullurl, data)\n        else:\n            req = fullurl\n            if data is not None:\n                req.add_data(data)\n    \n        req.timeout = timeout\n        protocol = req.get_type()\n    \n        # pre-process request\n        meth_name = protocol+\"_request\"\n        for processor in self.process_request.get(protocol, []):\n            meth = getattr(processor, meth_name)\n            req = meth(req)\n    \n>       response = self._open(req, data)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10a393bd8>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>\ndata = None\n\n    def _open(self, req, data=None):\n        result = self._call_chain(self.handle_open, 'default',\n                                  'default_open', req)\n        if result:\n            return result\n    \n        protocol = req.get_type()\n        result = self._call_chain(self.handle_open, protocol, protocol +\n>                                 '_open', req)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:422: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10a393bd8>\nchain = {'file': [<urllib2.FileHandler instance at 0x10a39ad40>], 'ftp': [<urllib2.FTPHandler instance at 0x10a39acf8>], 'http': [<urllib2.HTTPHandler instance at 0x10a393cf8>], 'https': [<urllib2.HTTPSHandler instance at 0x10b5bd8c0>], ...}\nkind = 'http', meth_name = 'http_open'\nargs = (<selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>,)\nhandlers = [<urllib2.HTTPHandler instance at 0x10a393cf8>]\nhandler = <urllib2.HTTPHandler instance at 0x10a393cf8>\nfunc = <bound method HTTPHandler.http_open of <urllib2.HTTPHandler instance at 0x10a393cf8>>\n\n    def _call_chain(self, chain, kind, meth_name, *args):\n        # Handlers raise an exception if no one else should try to handle\n        # the request, or return None if they can't but another handler\n        # could.  Otherwise, they return the response.\n        handlers = chain.get(kind, ())\n        for handler in handlers:\n            func = getattr(handler, meth_name)\n    \n>           result = func(*args)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:382: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPHandler instance at 0x10a393cf8>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>\n\n    def http_open(self, req):\n>       return self.do_open(httplib.HTTPConnection, req)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:1214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPHandler instance at 0x10a393cf8>\nhttp_class = <class httplib.HTTPConnection at 0x109bf6668>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10b619d40>\n\n    def do_open(self, http_class, req):\n        \"\"\"Return an addinfourl object for the request, using http_class.\n    \n            http_class must implement the HTTPConnection API from httplib.\n            The addinfourl return value is a file-like object.  It also\n            has methods and attributes including:\n                - info(): return a mimetools.Message object for the headers\n                - geturl(): return the original request URL\n                - code: HTTP status code\n            \"\"\"\n        host = req.get_host()\n        if not host:\n            raise URLError('no host given')\n    \n        h = http_class(host, timeout=req.timeout) # will parse host:port\n        h.set_debuglevel(self._debuglevel)\n    \n        headers = dict(req.unredirected_hdrs)\n        headers.update(dict((k, v) for k, v in req.headers.items()\n                            if k not in headers))\n    \n        # We want to make an HTTP/1.1 request, but the addinfourl\n        # class isn't prepared to deal with a persistent connection.\n        # It will try to read all remaining data from the socket,\n        # which will block while the server waits for the next request.\n        # So make sure the connection gets closed after the (only)\n        # request.\n        headers[\"Connection\"] = \"close\"\n        headers = dict(\n            (name.title(), val) for name, val in headers.items())\n    \n        if req._tunnel_host:\n            tunnel_headers = {}\n            proxy_auth_hdr = \"Proxy-Authorization\"\n            if proxy_auth_hdr in headers:\n                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]\n                # Proxy-Authorization should not be sent to origin\n                # server.\n                del headers[proxy_auth_hdr]\n            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)\n    \n        try:\n            h.request(req.get_method(), req.get_selector(), req.data, headers)\n        except socket.error, err: # XXX what error?\n            h.close()\n            raise URLError(err)\n        else:\n            try:\n>               r = h.getresponse(buffering=True)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:1187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPConnection instance at 0x10b5bde60>, buffering = True\n\n    def getresponse(self, buffering=False):\n        \"Get the response from the server.\"\n    \n        # if a prior response has been completed, then forget about it.\n        if self.__response and self.__response.isclosed():\n            self.__response = None\n    \n        #\n        # if a prior response exists, then it must be completed (otherwise, we\n        # cannot read this response's header to determine the connection-close\n        # behavior)\n        #\n        # note: if a prior response existed, but was connection-close, then the\n        # socket and response were made independent of this HTTPConnection\n        # object since a new request requires that we open a whole new\n        # connection\n        #\n        # this means the prior response had one of two states:\n        #   1) will_close: this connection was reset and the prior socket and\n        #                  response operate independently\n        #   2) persistent: the response was retained and we await its\n        #                  isclosed() status to become true.\n        #\n        if self.__state != _CS_REQ_SENT or self.__response:\n            raise ResponseNotReady()\n    \n        args = (self.sock,)\n        kwds = {\"strict\":self.strict, \"method\":self._method}\n        if self.debuglevel > 0:\n            args += (self.debuglevel,)\n        if buffering:\n            #only add this keyword if non-default, for compatibility with\n            #other response_classes.\n            kwds[\"buffering\"] = True;\n        response = self.response_class(*args, **kwds)\n    \n>       response.begin()\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:1045: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPResponse instance at 0x10b5bddd0>\n\n    def begin(self):\n        if self.msg is not None:\n            # we've already started reading the response\n            return\n    \n        # read until we get a non-100 response\n        while True:\n            version, status, reason = self._read_status()\n            if status != CONTINUE:\n                break\n            # skip the header from the 100 response\n            while True:\n                skip = self.fp.readline(_MAXLINE + 1)\n                if len(skip) > _MAXLINE:\n                    raise LineTooLong(\"header line\")\n                skip = skip.strip()\n                if not skip:\n                    break\n                if self.debuglevel > 0:\n                    print \"header:\", skip\n    \n        self.status = status\n        self.reason = reason.strip()\n        if version == 'HTTP/1.0':\n            self.version = 10\n        elif version.startswith('HTTP/1.'):\n            self.version = 11   # use HTTP/1.1 code for HTTP/1.x where x>=1\n        elif version == 'HTTP/0.9':\n            self.version = 9\n        else:\n            raise UnknownProtocol(version)\n    \n        if self.version == 9:\n            self.length = None\n            self.chunked = 0\n            self.will_close = 1\n            self.msg = HTTPMessage(StringIO())\n            return\n    \n>       self.msg = HTTPMessage(self.fp, 0)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:441: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPMessage instance at 0x10b5bdcf8>\nfp = <socket._fileobject object at 0x10b44bed0>, seekable = 0\n\n    def __init__(self, fp, seekable = 1):\n>       rfc822.Message.__init__(self, fp, seekable)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/mimetools.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPMessage instance at 0x10b5bdcf8>\nfp = <socket._fileobject object at 0x10b44bed0>, seekable = 0\n\n    def __init__(self, fp, seekable = 1):\n        \"\"\"Initialize the class instance and read the headers.\"\"\"\n        if seekable == 1:\n            # Exercise tell() to make sure it works\n            # (and then assume seek() works, too)\n            try:\n                fp.tell()\n            except (AttributeError, IOError):\n                seekable = 0\n        self.fp = fp\n        self.seekable = seekable\n        self.startofheaders = None\n        self.startofbody = None\n        #\n        if self.seekable:\n            try:\n                self.startofheaders = self.fp.tell()\n            except IOError:\n                self.seekable = 0\n        #\n>       self.readheaders()\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/rfc822.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPMessage instance at 0x10b5bdcf8>\n\n    def readheaders(self):\n        \"\"\"Read header lines.\n    \n            Read header lines up to the entirely blank line that terminates them.\n            The (normally blank) line that ends the headers is skipped, but not\n            included in the returned list.  If a non-header line ends the headers,\n            (which is an error), an attempt is made to backspace over it; it is\n            never included in the returned list.\n    \n            The variable self.status is set to the empty string if all went well,\n            otherwise it is an error message.  The variable self.headers is a\n            completely uninterpreted list of lines contained in the header (so\n            printing them will reproduce the header exactly as it appears in the\n            file).\n    \n            If multiple header fields with the same name occur, they are combined\n            according to the rules in RFC 2616 sec 4.2:\n    \n            Appending each subsequent field-value to the first, each separated\n            by a comma. The order in which header fields with the same field-name\n            are received is significant to the interpretation of the combined\n            field value.\n            \"\"\"\n        # XXX The implementation overrides the readheaders() method of\n        # rfc822.Message.  The base class design isn't amenable to\n        # customized behavior here so the method here is a copy of the\n        # base class code with a few small changes.\n    \n        self.dict = {}\n        self.unixfrom = ''\n        self.headers = hlist = []\n        self.status = ''\n        headerseen = \"\"\n        firstline = 1\n        startofline = unread = tell = None\n        if hasattr(self.fp, 'unread'):\n            unread = self.fp.unread\n        elif self.seekable:\n            tell = self.fp.tell\n        while True:\n            if tell:\n                try:\n                    startofline = tell()\n                except IOError:\n                    startofline = tell = None\n                    self.seekable = 0\n>           line = self.fp.readline(_MAXLINE + 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket._fileobject object at 0x10b44bed0>, size = 65537\n\n    def readline(self, size=-1):\n        buf = self._rbuf\n        buf.seek(0, 2)  # seek end\n        if buf.tell() > 0:\n            # check if we already have it in our buffer\n            buf.seek(0)\n            bline = buf.readline(size)\n            if bline.endswith('\\n') or len(bline) == size:\n                self._rbuf = StringIO()\n                self._rbuf.write(buf.read())\n                return bline\n            del bline\n        if size < 0:\n            # Read until \\n or EOF, whichever comes first\n            if self._rbufsize <= 1:\n                # Speed up unbuffered case\n                buf.seek(0)\n                buffers = [buf.read()]\n                self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n                data = None\n                recv = self._sock.recv\n                while True:\n                    try:\n                        while data != \"\\n\":\n                            data = recv(1)\n                            if not data:\n                                break\n                            buffers.append(data)\n                    except error, e:\n                        # The try..except to catch EINTR was moved outside the\n                        # recv loop to avoid the per byte overhead.\n                        if e.args[0] == EINTR:\n                            continue\n                        raise\n                    break\n                return \"\".join(buffers)\n    \n            buf.seek(0, 2)  # seek end\n            self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n            while True:\n                try:\n                    data = self._sock.recv(self._rbufsize)\n                except error, e:\n                    if e.args[0] == EINTR:\n                        continue\n                    raise\n                if not data:\n                    break\n                nl = data.find('\\n')\n                if nl >= 0:\n                    nl += 1\n                    buf.write(data[:nl])\n                    self._rbuf.write(data[nl:])\n                    del data\n                    break\n                buf.write(data)\n            return buf.getvalue()\n        else:\n            # Read until size bytes or \\n or EOF seen, whichever comes first\n            buf.seek(0, 2)  # seek end\n            buf_len = buf.tell()\n            if buf_len >= size:\n                buf.seek(0)\n                rv = buf.read(size)\n                self._rbuf = StringIO()\n                self._rbuf.write(buf.read())\n                return rv\n            self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n            while True:\n                try:\n>                   data = self._sock.recv(self._rbufsize)\nE                   Failed: Timeout >300s\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/socket.py:476: Failed"}], "passed": [], "test_name": "test_that_checks_changing_language"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_clicking_on_content_rating/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_clicking_on_content_rating"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_opening_every_category_page_from_categories_menu/", "failed": [{"jobs": ["marketplace.dev.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_consumers_page.TestConsumerPage instance at 0x109f02dd0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x109f2b170>\n\n    @pytest.mark.nondestructive\n    def test_opening_every_category_page_from_categories_menu(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        for i in range(home_page.category_count):\n            home_page.hover_over_categories_menu()\n            category_name = home_page.categories.items[i].name\n            category_page = home_page.categories.items[i].click_category()\n>           Assert.equal(category_name.title(), category_page.category_title)\n\ntests/desktop/consumer_pages/test_consumers_page.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>, first = u'Games', second = u'', msg = None\n\n    @classmethod\n    def equal(self, first, second, msg=None):\n        \"\"\"\n            Asserts that 2 elements are the same\n    \n            :Args:\n             - First object to be tested\n             - Second object to be tested\n             - Message that will be printed if it fails\n            \"\"\"\n>       assert first == second, msg\nE       AssertionError: None\n\n.env/lib/python2.7/site-packages/unittestzero.py:55: AssertionError"}, {"jobs": ["marketplace.stage.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_opening_every_category_page_from_categories_menu'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x1031ac350>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x1031ac350>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        executor = 'http://%s:%s@ondemand.saucelabs.com:80/wd/hub' % (\n            self.credentials['username'],\n            self.credentials['api-key'])\n        self.selenium = webdriver.Remote(command_executor=executor,\n>                                        desired_capabilities=capabilities)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103111990>\ncommand_executor = 'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@ondemand.saucelabs.com:80/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'build': 'jenkins-marketplace.stage.saucelabs-1696', 'name': 'tests.desktop.consumer_pages.test_consumers_page.TestConsumerPage.test_opening_every_category_page_from_categories_menu', 'platform': 'Windows 7', ...}\nbrowser_profile = None, proxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103111990>\ndesired_capabilities = {'browserName': 'firefox', 'build': 'jenkins-marketplace.stage.saucelabs-1696', 'name': 'tests.desktop.consumer_pages.test_consumers_page.TestConsumerPage.test_opening_every_category_page_from_categories_menu', 'platform': 'Windows 7', ...}\nbrowser_profile = None\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103111990>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'build': 'jenkins-marketplace.stage.saucelabs-1696', 'name': 'tests..._consumers_page.TestConsumerPage.test_opening_every_category_page_from_categories_menu', 'platform': 'Windows 7', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n>       response = self.command_executor.execute(driver_command, params)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x1031ac710>\ncommand = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'build': 'jenkins-marketplace.stage.saucelabs-1696', 'name': 'tests..._consumers_page.TestConsumerPage.test_opening_every_category_page_from_categories_menu', 'platform': 'Windows 7', ...}}\n\n    def execute(self, command, params):\n        \"\"\"\n            Send a command to the remote server.\n    \n            Any path subtitutions required for the URL mapped to the command should be\n            included in the command parameters.\n    \n            :Args:\n             - command - A string specifying the command to execute.\n             - params - A dictionary of named parameters to send with the command as\n               its JSON payload.\n            \"\"\"\n        command_info = self._commands[command]\n        assert command_info is not None, 'Unrecognised command %s' % command\n        data = utils.dump_json(params)\n        path = string.Template(command_info[1]).substitute(params)\n        url = '%s%s' % (self._url, path)\n>       return self._request(command_info[0], url, body=data)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x1031ac710>\nmethod = 'POST'\nurl = 'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@162.222.75.179:80/wd/hub/session'\nbody = '{\"desiredCapabilities\": {\"name\": \"tests.desktop.consumer_pages.test_consumers_page.TestConsumerPage.test_opening_ever...\"restricted-public-info\": true, \"version\": \"31\", \"build\": \"jenkins-marketplace.stage.saucelabs-1696\", \"public\": true}}'\n\n    def _request(self, method, url, body=None):\n        \"\"\"\n            Send an HTTP request to the remote server.\n    \n            :Args:\n             - method - A string for the HTTP method to send the request with.\n             - url - A string for the URL to send the request to.\n             - body - A string for request body. Ignored unless method is POST or PUT.\n    \n            :Returns:\n              A dictionary with the server's parsed JSON response.\n            \"\"\"\n        LOGGER.debug('%s %s %s' % (method, url, body))\n    \n        parsed_url = parse.urlparse(url)\n    \n        if self.keep_alive:\n            headers = {\"Connection\": 'keep-alive', method: parsed_url.path,\n                       \"User-Agent\": \"Python http auth\",\n                       \"Content-type\": \"application/json;charset=\\\"UTF-8\\\"\",\n                       \"Accept\": \"application/json\"}\n            if parsed_url.username:\n                auth = base64.standard_b64encode('%s:%s' %\n                       (parsed_url.username, parsed_url.password)).replace('\\n', '')\n                headers[\"Authorization\"] = \"Basic %s\" % auth\n            if body and method != 'POST' and method != 'PUT':\n                body = None\n            try:\n                self._conn.request(method, parsed_url.path, body, headers)\n                resp = self._conn.getresponse()\n            except httplib.HTTPException:\n                self._conn.close()\n                raise\n    \n            statuscode = resp.status\n        else:\n            password_manager = None\n            if parsed_url.username:\n                netloc = parsed_url.hostname\n                if parsed_url.port:\n                    netloc += \":%s\" % parsed_url.port\n                cleaned_url = parse.urlunparse((parsed_url.scheme,\n                                                   netloc,\n                                                   parsed_url.path,\n                                                   parsed_url.params,\n                                                   parsed_url.query,\n                                                   parsed_url.fragment))\n                password_manager = url_request.HTTPPasswordMgrWithDefaultRealm()\n                password_manager.add_password(None,\n                                              \"%s://%s\" % (parsed_url.scheme, netloc),\n                                              parsed_url.username,\n                                              parsed_url.password)\n                request = Request(cleaned_url, data=body.encode('utf-8'), method=method)\n            else:\n                request = Request(url, data=body.encode('utf-8'), method=method)\n    \n            request.add_header('Accept', 'application/json')\n            request.add_header('Content-Type', 'application/json;charset=UTF-8')\n    \n            if password_manager:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler(),\n                                                  url_request.HTTPBasicAuthHandler(password_manager))\n            else:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler())\n>           resp = opener.open(request)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x1031b84d0>\nfullurl = <selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>\ndata = None, timeout = <object object at 0x1020d61e0>\n\n    def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n        # accept a URL or a Request object\n        if isinstance(fullurl, basestring):\n            req = Request(fullurl, data)\n        else:\n            req = fullurl\n            if data is not None:\n                req.add_data(data)\n    \n        req.timeout = timeout\n        protocol = req.get_type()\n    \n        # pre-process request\n        meth_name = protocol+\"_request\"\n        for processor in self.process_request.get(protocol, []):\n            meth = getattr(processor, meth_name)\n            req = meth(req)\n    \n        response = self._open(req, data)\n    \n        # post-process response\n        meth_name = protocol+\"_response\"\n        for processor in self.process_response.get(protocol, []):\n            meth = getattr(processor, meth_name)\n>           response = meth(req, response)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPErrorProcessor instance at 0x1031b8e60>\nrequest = <selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>\nresponse = <addinfourl at 4347181104 whose fp = <socket._fileobject object at 0x1031a2c50>>\n\n    def http_response(self, request, response):\n        code, msg, hdrs = response.code, response.msg, response.info()\n    \n        # According to RFC 2616, \"2xx\" code indicates that the client's\n        # request was successfully received, understood, and accepted.\n        if not (200 <= code < 300):\n            response = self.parent.error(\n>               'http', request, response, code, msg, hdrs)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:523: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x1031b84d0>, proto = 401\nargs = ({301: [<urllib2.HTTPRedirectHandler instance at 0x1031b85f0>], 302: [<urllib2.HTTPRedirectHandler instance at 0x1031b...t instance at 0x1031b8cf8>, <addinfourl at 4347181104 whose fp = <socket._fileobject object at 0x1031a2c50>>, 401, ...)\ndict = {301: [<urllib2.HTTPRedirectHandler instance at 0x1031b85f0>], 302: [<urllib2.HTTPRedirectHandler instance at 0x1031b8...llib2.HTTPRedirectHandler instance at 0x1031b85f0>], 307: [<urllib2.HTTPRedirectHandler instance at 0x1031b85f0>], ...}\nmeth_name = 'http_error_401', http_err = 1\n\n    def error(self, proto, *args):\n        if proto in ('http', 'https'):\n            # XXX http[s] protocols are special-cased\n            dict = self.handle_error['http'] # https is not different than http\n            proto = args[2]  # YUCK!\n            meth_name = 'http_error_%s' % proto\n            http_err = 1\n            orig_args = args\n        else:\n            dict = self.handle_error\n            meth_name = proto + '_error'\n            http_err = 0\n        args = (dict, proto, meth_name) + args\n>       result = self._call_chain(*args)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x1031b84d0>\nchain = {301: [<urllib2.HTTPRedirectHandler instance at 0x1031b85f0>], 302: [<urllib2.HTTPRedirectHandler instance at 0x1031b8...llib2.HTTPRedirectHandler instance at 0x1031b85f0>], 307: [<urllib2.HTTPRedirectHandler instance at 0x1031b85f0>], ...}\nkind = 401, meth_name = 'http_error_401'\nargs = (<selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>, <addinfourl at 4347181104 whose fp = <socket._fileobject object at 0x1031a2c50>>, 401, 'Unauthorized', <httplib.HTTPMessage instance at 0x1031cb560>)\nhandlers = [<urllib2.HTTPBasicAuthHandler instance at 0x1031b8ea8>]\nhandler = <urllib2.HTTPBasicAuthHandler instance at 0x1031b8ea8>\nfunc = <bound method HTTPBasicAuthHandler.http_error_401 of <urllib2.HTTPBasicAuthHandler instance at 0x1031b8ea8>>\n\n    def _call_chain(self, chain, kind, meth_name, *args):\n        # Handlers raise an exception if no one else should try to handle\n        # the request, or return None if they can't but another handler\n        # could.  Otherwise, they return the response.\n        handlers = chain.get(kind, ())\n        for handler in handlers:\n            func = getattr(handler, meth_name)\n    \n>           result = func(*args)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:382: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPBasicAuthHandler instance at 0x1031b8ea8>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>\nfp = <addinfourl at 4347181104 whose fp = <socket._fileobject object at 0x1031a2c50>>\ncode = 401, msg = 'Unauthorized'\nheaders = <httplib.HTTPMessage instance at 0x1031cb560>\n\n    def http_error_401(self, req, fp, code, msg, headers):\n        url = req.get_full_url()\n        response = self.http_error_auth_reqed('www-authenticate',\n>                                             url, req, headers)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPBasicAuthHandler instance at 0x1031b8ea8>\nauthreq = 'Basic realm=\"Sauce OnDemand\"'\nhost = 'http://162.222.75.179:80/wd/hub/session'\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>\nheaders = <httplib.HTTPMessage instance at 0x1031cb560>\n\n    def http_error_auth_reqed(self, authreq, host, req, headers):\n        # host may be an authority (without userinfo) or a URL with an\n        # authority\n        # XXX could be multiple headers\n        authreq = headers.get(authreq, None)\n    \n        if self.retried > 5:\n            # retry sending the username:password 5 times before failing.\n            raise HTTPError(req.get_full_url(), 401, \"basic auth failed\",\n                            headers, None)\n        else:\n            self.retried += 1\n    \n        if authreq:\n            mo = AbstractBasicAuthHandler.rx.search(authreq)\n            if mo:\n                scheme, quote, realm = mo.groups()\n                if quote not in ['\"', \"'\"]:\n                    warnings.warn(\"Basic Auth Realm was unquoted\",\n                                  UserWarning, 2)\n                if scheme.lower() == 'basic':\n>                   response = self.retry_http_basic_auth(host, req, realm)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:872: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPBasicAuthHandler instance at 0x1031b8ea8>\nhost = 'http://162.222.75.179:80/wd/hub/session'\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>\nrealm = 'Sauce OnDemand'\n\n    def retry_http_basic_auth(self, host, req, realm):\n        user, pw = self.passwd.find_user_password(realm, host)\n        if pw is not None:\n            raw = \"%s:%s\" % (user, pw)\n            auth = 'Basic %s' % base64.b64encode(raw).strip()\n            if req.headers.get(self.auth_header, None) == auth:\n                return None\n            req.add_unredirected_header(self.auth_header, auth)\n>           return self.parent.open(req, timeout=req.timeout)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:885: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x1031b84d0>\nfullurl = <selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>\ndata = None, timeout = <object object at 0x1020d61e0>\n\n    def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n        # accept a URL or a Request object\n        if isinstance(fullurl, basestring):\n            req = Request(fullurl, data)\n        else:\n            req = fullurl\n            if data is not None:\n                req.add_data(data)\n    \n        req.timeout = timeout\n        protocol = req.get_type()\n    \n        # pre-process request\n        meth_name = protocol+\"_request\"\n        for processor in self.process_request.get(protocol, []):\n            meth = getattr(processor, meth_name)\n            req = meth(req)\n    \n>       response = self._open(req, data)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x1031b84d0>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>\ndata = None\n\n    def _open(self, req, data=None):\n        result = self._call_chain(self.handle_open, 'default',\n                                  'default_open', req)\n        if result:\n            return result\n    \n        protocol = req.get_type()\n        result = self._call_chain(self.handle_open, protocol, protocol +\n>                                 '_open', req)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:422: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x1031b84d0>\nchain = {'file': [<urllib2.FileHandler instance at 0x1031b8290>], 'ftp': [<urllib2.FTPHandler instance at 0x1031b8908>], 'http': [<urllib2.HTTPHandler instance at 0x1031b8e18>], 'https': [<urllib2.HTTPSHandler instance at 0x1031b8560>], ...}\nkind = 'http', meth_name = 'http_open'\nargs = (<selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>,)\nhandlers = [<urllib2.HTTPHandler instance at 0x1031b8e18>]\nhandler = <urllib2.HTTPHandler instance at 0x1031b8e18>\nfunc = <bound method HTTPHandler.http_open of <urllib2.HTTPHandler instance at 0x1031b8e18>>\n\n    def _call_chain(self, chain, kind, meth_name, *args):\n        # Handlers raise an exception if no one else should try to handle\n        # the request, or return None if they can't but another handler\n        # could.  Otherwise, they return the response.\n        handlers = chain.get(kind, ())\n        for handler in handlers:\n            func = getattr(handler, meth_name)\n    \n>           result = func(*args)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:382: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPHandler instance at 0x1031b8e18>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>\n\n    def http_open(self, req):\n>       return self.do_open(httplib.HTTPConnection, req)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:1214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPHandler instance at 0x1031b8e18>\nhttp_class = <class httplib.HTTPConnection at 0x102b4a668>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x1031b8cf8>\n\n    def do_open(self, http_class, req):\n        \"\"\"Return an addinfourl object for the request, using http_class.\n    \n            http_class must implement the HTTPConnection API from httplib.\n            The addinfourl return value is a file-like object.  It also\n            has methods and attributes including:\n                - info(): return a mimetools.Message object for the headers\n                - geturl(): return the original request URL\n                - code: HTTP status code\n            \"\"\"\n        host = req.get_host()\n        if not host:\n            raise URLError('no host given')\n    \n        h = http_class(host, timeout=req.timeout) # will parse host:port\n        h.set_debuglevel(self._debuglevel)\n    \n        headers = dict(req.unredirected_hdrs)\n        headers.update(dict((k, v) for k, v in req.headers.items()\n                            if k not in headers))\n    \n        # We want to make an HTTP/1.1 request, but the addinfourl\n        # class isn't prepared to deal with a persistent connection.\n        # It will try to read all remaining data from the socket,\n        # which will block while the server waits for the next request.\n        # So make sure the connection gets closed after the (only)\n        # request.\n        headers[\"Connection\"] = \"close\"\n        headers = dict(\n            (name.title(), val) for name, val in headers.items())\n    \n        if req._tunnel_host:\n            tunnel_headers = {}\n            proxy_auth_hdr = \"Proxy-Authorization\"\n            if proxy_auth_hdr in headers:\n                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]\n                # Proxy-Authorization should not be sent to origin\n                # server.\n                del headers[proxy_auth_hdr]\n            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)\n    \n        try:\n            h.request(req.get_method(), req.get_selector(), req.data, headers)\n        except socket.error, err: # XXX what error?\n            h.close()\n            raise URLError(err)\n        else:\n            try:\n>               r = h.getresponse(buffering=True)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:1187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPConnection instance at 0x1031cbfc8>, buffering = True\n\n    def getresponse(self, buffering=False):\n        \"Get the response from the server.\"\n    \n        # if a prior response has been completed, then forget about it.\n        if self.__response and self.__response.isclosed():\n            self.__response = None\n    \n        #\n        # if a prior response exists, then it must be completed (otherwise, we\n        # cannot read this response's header to determine the connection-close\n        # behavior)\n        #\n        # note: if a prior response existed, but was connection-close, then the\n        # socket and response were made independent of this HTTPConnection\n        # object since a new request requires that we open a whole new\n        # connection\n        #\n        # this means the prior response had one of two states:\n        #   1) will_close: this connection was reset and the prior socket and\n        #                  response operate independently\n        #   2) persistent: the response was retained and we await its\n        #                  isclosed() status to become true.\n        #\n        if self.__state != _CS_REQ_SENT or self.__response:\n            raise ResponseNotReady()\n    \n        args = (self.sock,)\n        kwds = {\"strict\":self.strict, \"method\":self._method}\n        if self.debuglevel > 0:\n            args += (self.debuglevel,)\n        if buffering:\n            #only add this keyword if non-default, for compatibility with\n            #other response_classes.\n            kwds[\"buffering\"] = True;\n        response = self.response_class(*args, **kwds)\n    \n>       response.begin()\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:1045: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPResponse instance at 0x1031cbab8>\n\n    def begin(self):\n        if self.msg is not None:\n            # we've already started reading the response\n            return\n    \n        # read until we get a non-100 response\n        while True:\n            version, status, reason = self._read_status()\n            if status != CONTINUE:\n                break\n            # skip the header from the 100 response\n            while True:\n                skip = self.fp.readline(_MAXLINE + 1)\n                if len(skip) > _MAXLINE:\n                    raise LineTooLong(\"header line\")\n                skip = skip.strip()\n                if not skip:\n                    break\n                if self.debuglevel > 0:\n                    print \"header:\", skip\n    \n        self.status = status\n        self.reason = reason.strip()\n        if version == 'HTTP/1.0':\n            self.version = 10\n        elif version.startswith('HTTP/1.'):\n            self.version = 11   # use HTTP/1.1 code for HTTP/1.x where x>=1\n        elif version == 'HTTP/0.9':\n            self.version = 9\n        else:\n            raise UnknownProtocol(version)\n    \n        if self.version == 9:\n            self.length = None\n            self.chunked = 0\n            self.will_close = 1\n            self.msg = HTTPMessage(StringIO())\n            return\n    \n>       self.msg = HTTPMessage(self.fp, 0)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:441: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPMessage instance at 0x1031cb908>\nfp = <socket._fileobject object at 0x1031a2ad0>, seekable = 0\n\n    def __init__(self, fp, seekable = 1):\n>       rfc822.Message.__init__(self, fp, seekable)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/mimetools.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPMessage instance at 0x1031cb908>\nfp = <socket._fileobject object at 0x1031a2ad0>, seekable = 0\n\n    def __init__(self, fp, seekable = 1):\n        \"\"\"Initialize the class instance and read the headers.\"\"\"\n        if seekable == 1:\n            # Exercise tell() to make sure it works\n            # (and then assume seek() works, too)\n            try:\n                fp.tell()\n            except (AttributeError, IOError):\n                seekable = 0\n        self.fp = fp\n        self.seekable = seekable\n        self.startofheaders = None\n        self.startofbody = None\n        #\n        if self.seekable:\n            try:\n                self.startofheaders = self.fp.tell()\n            except IOError:\n                self.seekable = 0\n        #\n>       self.readheaders()\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/rfc822.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPMessage instance at 0x1031cb908>\n\n    def readheaders(self):\n        \"\"\"Read header lines.\n    \n            Read header lines up to the entirely blank line that terminates them.\n            The (normally blank) line that ends the headers is skipped, but not\n            included in the returned list.  If a non-header line ends the headers,\n            (which is an error), an attempt is made to backspace over it; it is\n            never included in the returned list.\n    \n            The variable self.status is set to the empty string if all went well,\n            otherwise it is an error message.  The variable self.headers is a\n            completely uninterpreted list of lines contained in the header (so\n            printing them will reproduce the header exactly as it appears in the\n            file).\n    \n            If multiple header fields with the same name occur, they are combined\n            according to the rules in RFC 2616 sec 4.2:\n    \n            Appending each subsequent field-value to the first, each separated\n            by a comma. The order in which header fields with the same field-name\n            are received is significant to the interpretation of the combined\n            field value.\n            \"\"\"\n        # XXX The implementation overrides the readheaders() method of\n        # rfc822.Message.  The base class design isn't amenable to\n        # customized behavior here so the method here is a copy of the\n        # base class code with a few small changes.\n    \n        self.dict = {}\n        self.unixfrom = ''\n        self.headers = hlist = []\n        self.status = ''\n        headerseen = \"\"\n        firstline = 1\n        startofline = unread = tell = None\n        if hasattr(self.fp, 'unread'):\n            unread = self.fp.unread\n        elif self.seekable:\n            tell = self.fp.tell\n        while True:\n            if tell:\n                try:\n                    startofline = tell()\n                except IOError:\n                    startofline = tell = None\n                    self.seekable = 0\n>           line = self.fp.readline(_MAXLINE + 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket._fileobject object at 0x1031a2ad0>, size = 65537\n\n    def readline(self, size=-1):\n        buf = self._rbuf\n        buf.seek(0, 2)  # seek end\n        if buf.tell() > 0:\n            # check if we already have it in our buffer\n            buf.seek(0)\n            bline = buf.readline(size)\n            if bline.endswith('\\n') or len(bline) == size:\n                self._rbuf = StringIO()\n                self._rbuf.write(buf.read())\n                return bline\n            del bline\n        if size < 0:\n            # Read until \\n or EOF, whichever comes first\n            if self._rbufsize <= 1:\n                # Speed up unbuffered case\n                buf.seek(0)\n                buffers = [buf.read()]\n                self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n                data = None\n                recv = self._sock.recv\n                while True:\n                    try:\n                        while data != \"\\n\":\n                            data = recv(1)\n                            if not data:\n                                break\n                            buffers.append(data)\n                    except error, e:\n                        # The try..except to catch EINTR was moved outside the\n                        # recv loop to avoid the per byte overhead.\n                        if e.args[0] == EINTR:\n                            continue\n                        raise\n                    break\n                return \"\".join(buffers)\n    \n            buf.seek(0, 2)  # seek end\n            self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n            while True:\n                try:\n                    data = self._sock.recv(self._rbufsize)\n                except error, e:\n                    if e.args[0] == EINTR:\n                        continue\n                    raise\n                if not data:\n                    break\n                nl = data.find('\\n')\n                if nl >= 0:\n                    nl += 1\n                    buf.write(data[:nl])\n                    self._rbuf.write(data[nl:])\n                    del data\n                    break\n                buf.write(data)\n            return buf.getvalue()\n        else:\n            # Read until size bytes or \\n or EOF seen, whichever comes first\n            buf.seek(0, 2)  # seek end\n            buf_len = buf.tell()\n            if buf_len >= size:\n                buf.seek(0)\n                rv = buf.read(size)\n                self._rbuf = StringIO()\n                self._rbuf.write(buf.read())\n                return rv\n            self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n            while True:\n                try:\n>                   data = self._sock.recv(self._rbufsize)\nE                   Failed: Timeout >300s\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/socket.py:476: Failed"}], "passed": ["marketplace.prod", "marketplace.prod.saucelabs"], "test_name": "test_opening_every_category_page_from_categories_menu"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_editing_user_profile/", "failed": [{"jobs": ["marketplace.dev.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_users_account.TestAccounts instance at 0x10f7250e0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10f70ef80>\n\n    @pytest.mark.credentials\n    def test_editing_user_profile(self, mozwebqa):\n    \n        user = PersonaTestUser().create_user()\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n>       home_page.login(user)\n\ntests/desktop/consumer_pages/test_users_account.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10f6f4f10>\nuser = {'name': u'rawy125707', 'password': u'xwKUwETTwFfCJWDX', 'email': u'rawy125707@personatestuser.org'}\n\n    def login(self, user=None):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user, PersonaTestUser().create_user())\n    \n>       bid_login = self.click_login_register(expect='new')\n\npages/desktop/consumer_pages/base.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10f6f4f10>\nexpect = 'new'\n\n    def click_login_register(self, expect='new'):\n        \"\"\"Click the 'Log in/Register' button.\n    \n            Keyword arguments:\n            expect -- the expected resulting page\n            'new' for user that is not currently signed in (default)\n            'returning' for users already signed in or recently verified\n            \"\"\"\n        self.selenium.find_element(*self._login_locator).click()\n        from browserid.pages.sign_in import SignIn\n>       return SignIn(self.selenium, self.timeout, expect=expect)\n\npages/desktop/consumer_pages/base.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x10f6f4490>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10f6eef90>\ntimeout = 180, expect = 'new', default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.saucelabs"], "test_name": "test_editing_user_profile"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_hosted_app_submission'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f82410>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f82b10>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x109f82950>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f821d0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_hosted_app_submission'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106b3fdd0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106b3ff50>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106b3f350>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106b3fd50>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_hosted_app_submission"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_in_consumer_pages/", "failed": [{"jobs": ["marketplace.dev.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_users_account.TestAccounts instance at 0x10f992680>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110a53830>\n\n    @pytest.mark.credentials\n    @pytest.mark.nondestructive\n    def test_user_can_sign_in_and_sign_out_in_consumer_pages(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10f9b6a50>\nuser = 'default'\n\n    def login(self, user=None):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user, PersonaTestUser().create_user())\n    \n>       bid_login = self.click_login_register(expect='new')\n\npages/desktop/consumer_pages/base.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10f9b6a50>\nexpect = 'new'\n\n    def click_login_register(self, expect='new'):\n        \"\"\"Click the 'Log in/Register' button.\n    \n            Keyword arguments:\n            expect -- the expected resulting page\n            'new' for user that is not currently signed in (default)\n            'returning' for users already signed in or recently verified\n            \"\"\"\n        self.selenium.find_element(*self._login_locator).click()\n        from browserid.pages.sign_in import SignIn\n>       return SignIn(self.selenium, self.timeout, expect=expect)\n\npages/desktop/consumer_pages/base.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x10f9b6210>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10f9b6bd0>\ntimeout = 180, expect = 'new', default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_in_consumer_pages"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_anonymous_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_anonymous_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_api_submit/TestAPI/test_assert_that_a_app_can_be_added_and_deleted_via_the_api/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_assert_that_a_app_can_be_added_and_deleted_via_the_api'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f10310>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f10cd0>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x109f101d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f10650>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_assert_that_a_app_can_be_added_and_deleted_via_the_api'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106a78c50>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106a782d0>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106a788d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106a784d0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_assert_that_a_app_can_be_added_and_deleted_via_the_api"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_header_has_expected_items/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_header_has_expected_items"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f62610>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f62250>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x109f62310>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f62390>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106b04490>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106b04110>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106b04e50>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106adc8d0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "Purchase app option is currently not available for desktop environment: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Purchase app option is currently not available for desktop environment"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_purchase_app/TestPurchaseApp/test_that_purchases_an_app_without_pre_auth_and_requests_a_refund/", "failed": [], "passed": [], "test_name": "test_that_purchases_an_app_without_pre_auth_and_requests_a_refund"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_deletion_of_a_review/", "failed": [{"jobs": ["marketplace.dev.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x10a5c41b8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a5c4cb0>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_deletion_of_a_review(self, mozwebqa):\n        \"\"\"\n            https://moztrap.mozilla.org/manage/case/648/\n            \"\"\"\n    \n        self._reviews_setup(mozwebqa)\n    \n        # Step 1 - Login into Marketplace\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_reviews.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10a59bf90>\nuser = 'default'\n\n    def login(self, user=None):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user, PersonaTestUser().create_user())\n    \n>       bid_login = self.click_login_register(expect='new')\n\npages/desktop/consumer_pages/base.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10a59bf90>\nexpect = 'new'\n\n    def click_login_register(self, expect='new'):\n        \"\"\"Click the 'Log in/Register' button.\n    \n            Keyword arguments:\n            expect -- the expected resulting page\n            'new' for user that is not currently signed in (default)\n            'returning' for users already signed in or recently verified\n            \"\"\"\n        self.selenium.find_element(*self._login_locator).click()\n        from browserid.pages.sign_in import SignIn\n>       return SignIn(self.selenium, self.timeout, expect=expect)\n\npages/desktop/consumer_pages/base.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x10a59bed0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10a56ce50>\ntimeout = 180, expect = 'new', default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_deletion_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_support_information_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_support_information_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f10710>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f10410>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x109f10190>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f10950>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_support_information_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106ac9d10>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106ac9110>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106ac9d50>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106ae6590>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_support_information_for_a_free_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_editing_of_a_review/", "failed": [{"jobs": ["marketplace.dev.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x1024e7d88>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1024e78c0>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_editing_of_a_review(self, mozwebqa):\n    \n        self._reviews_setup(mozwebqa)\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        # Login into Marketplace\n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_reviews.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x103632d10>\nuser = 'default'\n\n    def login(self, user=None):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user, PersonaTestUser().create_user())\n    \n>       bid_login = self.click_login_register(expect='new')\n\npages/desktop/consumer_pages/base.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x103632d10>\nexpect = 'new'\n\n    def click_login_register(self, expect='new'):\n        \"\"\"Click the 'Log in/Register' button.\n    \n            Keyword arguments:\n            expect -- the expected resulting page\n            'new' for user that is not currently signed in (default)\n            'returning' for users already signed in or recently verified\n            \"\"\"\n        self.selenium.find_element(*self._login_locator).click()\n        from browserid.pages.sign_in import SignIn\n>       return SignIn(self.selenium, self.timeout, expect=expect)\n\npages/desktop/consumer_pages/base.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x103632f50>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1024e9b10>\ntimeout = 180, expect = 'new', default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_editing_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_deletes_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_deletes_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f14910>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f14ed0>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x109f14b50>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f14a10>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_deletes_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106af0090>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106af0110>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106af0cd0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106916210>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_deletes_app"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f10750>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f10a90>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x108dc0a10>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f13350>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106af8510>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106af8290>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106af8b90>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106af8fd0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 977084 - Problems with screenshot previews on the Edit Listing page"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_can_be_added/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_a_screenshot_can_be_added"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_checks_search_with_foreign_characters/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_checks_search_with_foreign_characters"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_create_new_user/", "failed": [{"jobs": ["marketplace.dev.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_users_account.TestAccounts instance at 0x108a63368>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x108a63a28>\n\n    @pytest.mark.credentials\n    def test_create_new_user(self, mozwebqa):\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n>       home_page.login()\n\ntests/desktop/consumer_pages/test_users_account.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x108a31b10>\nuser = None\n\n    def login(self, user=None):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user, PersonaTestUser().create_user())\n    \n>       bid_login = self.click_login_register(expect='new')\n\npages/desktop/consumer_pages/base.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x108a31b10>\nexpect = 'new'\n\n    def click_login_register(self, expect='new'):\n        \"\"\"Click the 'Log in/Register' button.\n    \n            Keyword arguments:\n            expect -- the expected resulting page\n            'new' for user that is not currently signed in (default)\n            'returning' for users already signed in or recently verified\n            \"\"\"\n        self.selenium.find_element(*self._login_locator).click()\n        from browserid.pages.sign_in import SignIn\n>       return SignIn(self.selenium, self.timeout, expect=expect)\n\npages/desktop/consumer_pages/base.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x108a31290>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x108a31510>\ntimeout = 180, expect = 'new', default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.saucelabs"], "test_name": "test_create_new_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_device_types_for_hosted_apps/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_device_types_for_hosted_apps'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f272d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x108dc9a50>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x109f129d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f12d90>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_device_types_for_hosted_apps'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106ac72d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106ac7d10>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106a7fad0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106afcb90>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_device_types_for_hosted_apps"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_searching_with_empty_field_using_submit_returns_results/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_searching_with_empty_field_using_submit_returns_results"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Rating]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Rating]"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_signed_in_user/", "failed": [{"jobs": ["marketplace.dev.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_details_page.TestDetailsPage instance at 0x10aa1df80>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10aa1d710>\n\n    @pytest.mark.credentials\n    def test_that_reports_abuse_as_signed_in_user(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        Assert.true(home_page.is_the_current_page)\n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_details_page.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10aa21050>\nuser = 'default'\n\n    def login(self, user=None):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user, PersonaTestUser().create_user())\n    \n>       bid_login = self.click_login_register(expect='new')\n\npages/desktop/consumer_pages/base.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10aa21050>\nexpect = 'new'\n\n    def click_login_register(self, expect='new'):\n        \"\"\"Click the 'Log in/Register' button.\n    \n            Keyword arguments:\n            expect -- the expected resulting page\n            'new' for user that is not currently signed in (default)\n            'returning' for users already signed in or recently verified\n            \"\"\"\n        self.selenium.find_element(*self._login_locator).click()\n        from browserid.pages.sign_in import SignIn\n>       return SignIn(self.selenium, self.timeout, expect=expect)\n\npages/desktop/consumer_pages/base.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x10aa21310>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10aa21d50>\ntimeout = 180, expect = 'new', default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_signed_in_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_an_icon_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_an_icon_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f409d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f40490>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x109f40110>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f40b50>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_an_icon_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106b4b3d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106b4b210>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106b4b150>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106b37810>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_an_icon_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.dev.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x10b0e97e8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10b0e9fc8>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        # delete the review before getting started\n        self.mk_api.delete_app_review(self.review_id)\n    \n        # so that teardown does not try to delete the review\n        del self.review_id\n    \n        # Step 1 - Login into Marketplace\n        mock_review = MockReview()\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_reviews.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10b0f0ad0>\nuser = 'default'\n\n    def login(self, user=None):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user, PersonaTestUser().create_user())\n    \n>       bid_login = self.click_login_register(expect='new')\n\npages/desktop/consumer_pages/base.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10b0f0ad0>\nexpect = 'new'\n\n    def click_login_register(self, expect='new'):\n        \"\"\"Click the 'Log in/Register' button.\n    \n            Keyword arguments:\n            expect -- the expected resulting page\n            'new' for user that is not currently signed in (default)\n            'returning' for users already signed in or recently verified\n            \"\"\"\n        self.selenium.find_element(*self._login_locator).click()\n        from browserid.pages.sign_in import SignIn\n>       return SignIn(self.selenium, self.timeout, expect=expect)\n\npages/desktop/consumer_pages/base.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x10afc8a90>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b046090>\ntimeout = 180, expect = 'new', default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.stage.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_the_addition_of_a_review'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10dea3dd0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n            self.start_webdriver_client()\n>           self.selenium.implicitly_wait(self.default_implicit_wait)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10f26f550>\ntime_to_wait = 10\n\n    def implicitly_wait(self, time_to_wait):\n        \"\"\"\n            Sets a sticky timeout to implicitly wait for an element to be found,\n               or a command to complete. This method only needs to be called one\n               time per session. To set the timeout for calls to\n               execute_async_script, see set_script_timeout.\n    \n            :Args:\n             - time_to_wait: Amount of time to wait (in seconds)\n    \n            :Usage:\n                driver.implicitly_wait(30)\n            \"\"\"\n>       self.execute(Command.IMPLICIT_WAIT, {'ms': float(time_to_wait) * 1000})\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:619: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10f26f550>\ndriver_command = 'implicitlyWait'\nparams = {'ms': 10000.0, 'sessionId': u'182b4c72309c4a2e8feeff7150a749f4'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n>       response = self.command_executor.execute(driver_command, params)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x10f26f3d0>\ncommand = 'implicitlyWait'\nparams = {'ms': 10000.0, 'sessionId': u'182b4c72309c4a2e8feeff7150a749f4'}\n\n    def execute(self, command, params):\n        \"\"\"\n            Send a command to the remote server.\n    \n            Any path subtitutions required for the URL mapped to the command should be\n            included in the command parameters.\n    \n            :Args:\n             - command - A string specifying the command to execute.\n             - params - A dictionary of named parameters to send with the command as\n               its JSON payload.\n            \"\"\"\n        command_info = self._commands[command]\n        assert command_info is not None, 'Unrecognised command %s' % command\n        data = utils.dump_json(params)\n        path = string.Template(command_info[1]).substitute(params)\n        url = '%s%s' % (self._url, path)\n>       return self._request(command_info[0], url, body=data)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x10f26f3d0>\nmethod = 'POST'\nurl = u'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@162.222.75.179:80/wd/hub/session/182b4c72309c4a2e8feeff7150a749f4/timeouts/implicit_wait'\nbody = '{\"sessionId\": \"182b4c72309c4a2e8feeff7150a749f4\", \"ms\": 10000.0}'\n\n    def _request(self, method, url, body=None):\n        \"\"\"\n            Send an HTTP request to the remote server.\n    \n            :Args:\n             - method - A string for the HTTP method to send the request with.\n             - url - A string for the URL to send the request to.\n             - body - A string for request body. Ignored unless method is POST or PUT.\n    \n            :Returns:\n              A dictionary with the server's parsed JSON response.\n            \"\"\"\n        LOGGER.debug('%s %s %s' % (method, url, body))\n    \n        parsed_url = parse.urlparse(url)\n    \n        if self.keep_alive:\n            headers = {\"Connection\": 'keep-alive', method: parsed_url.path,\n                       \"User-Agent\": \"Python http auth\",\n                       \"Content-type\": \"application/json;charset=\\\"UTF-8\\\"\",\n                       \"Accept\": \"application/json\"}\n            if parsed_url.username:\n                auth = base64.standard_b64encode('%s:%s' %\n                       (parsed_url.username, parsed_url.password)).replace('\\n', '')\n                headers[\"Authorization\"] = \"Basic %s\" % auth\n            if body and method != 'POST' and method != 'PUT':\n                body = None\n            try:\n                self._conn.request(method, parsed_url.path, body, headers)\n                resp = self._conn.getresponse()\n            except httplib.HTTPException:\n                self._conn.close()\n                raise\n    \n            statuscode = resp.status\n        else:\n            password_manager = None\n            if parsed_url.username:\n                netloc = parsed_url.hostname\n                if parsed_url.port:\n                    netloc += \":%s\" % parsed_url.port\n                cleaned_url = parse.urlunparse((parsed_url.scheme,\n                                                   netloc,\n                                                   parsed_url.path,\n                                                   parsed_url.params,\n                                                   parsed_url.query,\n                                                   parsed_url.fragment))\n                password_manager = url_request.HTTPPasswordMgrWithDefaultRealm()\n                password_manager.add_password(None,\n                                              \"%s://%s\" % (parsed_url.scheme, netloc),\n                                              parsed_url.username,\n                                              parsed_url.password)\n                request = Request(cleaned_url, data=body.encode('utf-8'), method=method)\n            else:\n                request = Request(url, data=body.encode('utf-8'), method=method)\n    \n            request.add_header('Accept', 'application/json')\n            request.add_header('Content-Type', 'application/json;charset=UTF-8')\n    \n            if password_manager:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler(),\n                                                  url_request.HTTPBasicAuthHandler(password_manager))\n            else:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler())\n>           resp = opener.open(request)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10f224b48>\nfullurl = <selenium.webdriver.remote.remote_connection.Request instance at 0x10f224290>\ndata = None, timeout = <object object at 0x10cdd21e0>\n\n    def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n        # accept a URL or a Request object\n        if isinstance(fullurl, basestring):\n            req = Request(fullurl, data)\n        else:\n            req = fullurl\n            if data is not None:\n                req.add_data(data)\n    \n        req.timeout = timeout\n        protocol = req.get_type()\n    \n        # pre-process request\n        meth_name = protocol+\"_request\"\n        for processor in self.process_request.get(protocol, []):\n            meth = getattr(processor, meth_name)\n            req = meth(req)\n    \n>       response = self._open(req, data)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10f224b48>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10f224290>\ndata = None\n\n    def _open(self, req, data=None):\n        result = self._call_chain(self.handle_open, 'default',\n                                  'default_open', req)\n        if result:\n            return result\n    \n        protocol = req.get_type()\n        result = self._call_chain(self.handle_open, protocol, protocol +\n>                                 '_open', req)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:422: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10f224b48>\nchain = {'file': [<urllib2.FileHandler instance at 0x10f224a28>], 'ftp': [<urllib2.FTPHandler instance at 0x10f224a70>], 'http': [<urllib2.HTTPHandler instance at 0x10f224b00>], 'https': [<urllib2.HTTPSHandler instance at 0x10f224c20>], ...}\nkind = u'http', meth_name = u'http_open'\nargs = (<selenium.webdriver.remote.remote_connection.Request instance at 0x10f224290>,)\nhandlers = [<urllib2.HTTPHandler instance at 0x10f224b00>]\nhandler = <urllib2.HTTPHandler instance at 0x10f224b00>\nfunc = <bound method HTTPHandler.http_open of <urllib2.HTTPHandler instance at 0x10f224b00>>\n\n    def _call_chain(self, chain, kind, meth_name, *args):\n        # Handlers raise an exception if no one else should try to handle\n        # the request, or return None if they can't but another handler\n        # could.  Otherwise, they return the response.\n        handlers = chain.get(kind, ())\n        for handler in handlers:\n            func = getattr(handler, meth_name)\n    \n>           result = func(*args)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:382: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPHandler instance at 0x10f224b00>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10f224290>\n\n    def http_open(self, req):\n>       return self.do_open(httplib.HTTPConnection, req)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:1214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPHandler instance at 0x10f224b00>\nhttp_class = <class httplib.HTTPConnection at 0x10d846668>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10f224290>\n\n    def do_open(self, http_class, req):\n        \"\"\"Return an addinfourl object for the request, using http_class.\n    \n            http_class must implement the HTTPConnection API from httplib.\n            The addinfourl return value is a file-like object.  It also\n            has methods and attributes including:\n                - info(): return a mimetools.Message object for the headers\n                - geturl(): return the original request URL\n                - code: HTTP status code\n            \"\"\"\n        host = req.get_host()\n        if not host:\n            raise URLError('no host given')\n    \n        h = http_class(host, timeout=req.timeout) # will parse host:port\n        h.set_debuglevel(self._debuglevel)\n    \n        headers = dict(req.unredirected_hdrs)\n        headers.update(dict((k, v) for k, v in req.headers.items()\n                            if k not in headers))\n    \n        # We want to make an HTTP/1.1 request, but the addinfourl\n        # class isn't prepared to deal with a persistent connection.\n        # It will try to read all remaining data from the socket,\n        # which will block while the server waits for the next request.\n        # So make sure the connection gets closed after the (only)\n        # request.\n        headers[\"Connection\"] = \"close\"\n        headers = dict(\n            (name.title(), val) for name, val in headers.items())\n    \n        if req._tunnel_host:\n            tunnel_headers = {}\n            proxy_auth_hdr = \"Proxy-Authorization\"\n            if proxy_auth_hdr in headers:\n                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]\n                # Proxy-Authorization should not be sent to origin\n                # server.\n                del headers[proxy_auth_hdr]\n            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)\n    \n        try:\n            h.request(req.get_method(), req.get_selector(), req.data, headers)\n        except socket.error, err: # XXX what error?\n            h.close()\n            raise URLError(err)\n        else:\n            try:\n>               r = h.getresponse(buffering=True)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:1187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPConnection instance at 0x10f224bd8>, buffering = True\n\n    def getresponse(self, buffering=False):\n        \"Get the response from the server.\"\n    \n        # if a prior response has been completed, then forget about it.\n        if self.__response and self.__response.isclosed():\n            self.__response = None\n    \n        #\n        # if a prior response exists, then it must be completed (otherwise, we\n        # cannot read this response's header to determine the connection-close\n        # behavior)\n        #\n        # note: if a prior response existed, but was connection-close, then the\n        # socket and response were made independent of this HTTPConnection\n        # object since a new request requires that we open a whole new\n        # connection\n        #\n        # this means the prior response had one of two states:\n        #   1) will_close: this connection was reset and the prior socket and\n        #                  response operate independently\n        #   2) persistent: the response was retained and we await its\n        #                  isclosed() status to become true.\n        #\n        if self.__state != _CS_REQ_SENT or self.__response:\n            raise ResponseNotReady()\n    \n        args = (self.sock,)\n        kwds = {\"strict\":self.strict, \"method\":self._method}\n        if self.debuglevel > 0:\n            args += (self.debuglevel,)\n        if buffering:\n            #only add this keyword if non-default, for compatibility with\n            #other response_classes.\n            kwds[\"buffering\"] = True;\n        response = self.response_class(*args, **kwds)\n    \n>       response.begin()\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:1045: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPResponse instance at 0x10f224b90>\n\n    def begin(self):\n        if self.msg is not None:\n            # we've already started reading the response\n            return\n    \n        # read until we get a non-100 response\n        while True:\n>           version, status, reason = self._read_status()\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:409: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPResponse instance at 0x10f224b90>\n\n    def _read_status(self):\n        # Initialize with Simple-Response defaults\n>       line = self.fp.readline(_MAXLINE + 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket._fileobject object at 0x10f038d50>, size = 65537\n\n    def readline(self, size=-1):\n        buf = self._rbuf\n        buf.seek(0, 2)  # seek end\n        if buf.tell() > 0:\n            # check if we already have it in our buffer\n            buf.seek(0)\n            bline = buf.readline(size)\n            if bline.endswith('\\n') or len(bline) == size:\n                self._rbuf = StringIO()\n                self._rbuf.write(buf.read())\n                return bline\n            del bline\n        if size < 0:\n            # Read until \\n or EOF, whichever comes first\n            if self._rbufsize <= 1:\n                # Speed up unbuffered case\n                buf.seek(0)\n                buffers = [buf.read()]\n                self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n                data = None\n                recv = self._sock.recv\n                while True:\n                    try:\n                        while data != \"\\n\":\n                            data = recv(1)\n                            if not data:\n                                break\n                            buffers.append(data)\n                    except error, e:\n                        # The try..except to catch EINTR was moved outside the\n                        # recv loop to avoid the per byte overhead.\n                        if e.args[0] == EINTR:\n                            continue\n                        raise\n                    break\n                return \"\".join(buffers)\n    \n            buf.seek(0, 2)  # seek end\n            self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n            while True:\n                try:\n                    data = self._sock.recv(self._rbufsize)\n                except error, e:\n                    if e.args[0] == EINTR:\n                        continue\n                    raise\n                if not data:\n                    break\n                nl = data.find('\\n')\n                if nl >= 0:\n                    nl += 1\n                    buf.write(data[:nl])\n                    self._rbuf.write(data[nl:])\n                    del data\n                    break\n                buf.write(data)\n            return buf.getvalue()\n        else:\n            # Read until size bytes or \\n or EOF seen, whichever comes first\n            buf.seek(0, 2)  # seek end\n            buf_len = buf.tell()\n            if buf_len >= size:\n                buf.seek(0)\n                rv = buf.read(size)\n                self._rbuf = StringIO()\n                self._rbuf.write(buf.read())\n                return rv\n            self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n            while True:\n                try:\n>                   data = self._sock.recv(self._rbufsize)\nE                   Failed: Timeout >300s\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/socket.py:476: Failed"}], "passed": [], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_packaged_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_packaged_app_submission'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f82050>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f82450>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x109f82b90>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f12110>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_packaged_app_submission'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106b04510>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106b04c50>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106b043d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106b04cd0>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_packaged_app_submission"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_nav_menu_tabs/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_nav_menu_tabs"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_categories_menu/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_categories_menu"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Relevancy]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Relevancy]"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_name/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_apps_are_sorted_by_name'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x109f1c5d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x109f10910>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x108dc09d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109f24590>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_apps_are_sorted_by_name'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x106b364d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n    \n        self.header.click_login()\n    \n        credentials = self.testsetup.credentials[user]\n        from browserid import BrowserID\n        pop_up = BrowserID(self.selenium, self.timeout)\n>       pop_up.sign_in(credentials['email'], credentials['password'])\n\npages/desktop/developer_hub/base.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.browser_id.BrowserID object at 0x106b36190>\nemail = 'moz.marketplace@aol.com', password = 'mozwebqa'\n\n    def sign_in(self, email=None, password=None):\n        \"\"\"Signs in a user, either with the specified email address and password, or a returning user.\"\"\"\n        from pages.sign_in import SignIn\n>       sign_in = SignIn(self.selenium, timeout=self.timeout)\n\n.env/src/browserid/browserid/browser_id.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <browserid.pages.sign_in.SignIn object at 0x106b366d0>\nselenium = <selenium.webdriver.remote.webdriver.WebDriver object at 0x106afdd50>\ntimeout = 180, expect = None, default_implicit_wait = 10\n\n    def __init__(self, selenium, timeout, expect=None, default_implicit_wait=10):\n        Base.__init__(self, selenium, timeout, default_implicit_wait)\n    \n        if self.selenium.title != self._page_title:\n            for handle in self.selenium.window_handles:\n                self.selenium.switch_to_window(handle)\n                WebDriverWait(self.selenium, self.timeout).until(lambda s: s.title)\n                if self.selenium.title == self._page_title:\n                    self._sign_in_window_handle = handle\n                    break\n            else:\n>               raise Exception('Popup has not loaded')\nE               Exception: Popup has not loaded\n\n.env/src/browserid/browserid/pages/sign_in.py:53: Exception"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_name"}, {"skipped": {"jobs": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 1053754 - [dev] traceback on setting up payments account for an app"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_paid_app_submission/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_hosted_paid_app_submission"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Search suggestions not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Search suggestions not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}]}