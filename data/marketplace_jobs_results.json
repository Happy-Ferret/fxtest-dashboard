{"last_updated": "2014-05-08 08:45:02.769213", "results": [{"group": "Android", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_viewing_reviews_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10e1b9b00>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10e1b9c68>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e174410>\n\n    def go_to_homepage(self):\n>       self.selenium.get(self.base_url)\n\npages/mobile/home.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10e15eed0>\nurl = 'https://marketplace-dev.allizom.org'\n\n    def get(self, url):\n        \"\"\"\n            Loads a web page in the current browser session.\n            \"\"\"\n>       self.execute(Command.GET, {'url': url})\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10e15eed0>\ndriver_command = 'get'\nparams = {'sessionId': u'54df06e67685446684dbec99141493a9', 'url': 'https://marketplace-dev.allizom.org'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n>       response = self.command_executor.execute(driver_command, params)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x10e174290>\ncommand = 'get'\nparams = {'sessionId': u'54df06e67685446684dbec99141493a9', 'url': 'https://marketplace-dev.allizom.org'}\n\n    def execute(self, command, params):\n        \"\"\"\n            Send a command to the remote server.\n    \n            Any path subtitutions required for the URL mapped to the command should be\n            included in the command parameters.\n    \n            :Args:\n             - command - A string specifying the command to execute.\n             - params - A dictionary of named parameters to send with the command as\n               its JSON payload.\n            \"\"\"\n        command_info = self._commands[command]\n        assert command_info is not None, 'Unrecognised command %s' % command\n        data = utils.dump_json(params)\n        path = string.Template(command_info[1]).substitute(params)\n        url = '%s%s' % (self._url, path)\n>       return self._request(command_info[0], url, body=data)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x10e174290>\nmethod = 'POST'\nurl = u'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@162.222.75.179:80/wd/hub/session/54df06e67685446684dbec99141493a9/url'\nbody = '{\"url\": \"https://marketplace-dev.allizom.org\", \"sessionId\": \"54df06e67685446684dbec99141493a9\"}'\n\n    def _request(self, method, url, body=None):\n        \"\"\"\n            Send an HTTP request to the remote server.\n    \n            :Args:\n             - method - A string for the HTTP method to send the request with.\n             - url - A string for the URL to send the request to.\n             - body - A string for request body. Ignored unless method is POST or PUT.\n    \n            :Returns:\n              A dictionary with the server's parsed JSON response.\n            \"\"\"\n        LOGGER.debug('%s %s %s' % (method, url, body))\n    \n        parsed_url = parse.urlparse(url)\n    \n        if self.keep_alive:\n            headers = {\"Connection\": 'keep-alive', method: parsed_url.path,\n                       \"User-Agent\": \"Python http auth\",\n                       \"Content-type\": \"application/json;charset=\\\"UTF-8\\\"\",\n                       \"Accept\": \"application/json\"}\n            if parsed_url.username:\n                auth = base64.standard_b64encode('%s:%s' %\n                       (parsed_url.username, parsed_url.password)).replace('\\n', '')\n                headers[\"Authorization\"] = \"Basic %s\" % auth\n            if body and method != 'POST' and method != 'PUT':\n                body = None\n            try:\n                self._conn.request(method, parsed_url.path, body, headers)\n                resp = self._conn.getresponse()\n            except httplib.HTTPException:\n                self._conn.close()\n                raise\n    \n            statuscode = resp.status\n        else:\n            password_manager = None\n            if parsed_url.username:\n                netloc = parsed_url.hostname\n                if parsed_url.port:\n                    netloc += \":%s\" % parsed_url.port\n                cleaned_url = parse.urlunparse((parsed_url.scheme,\n                                                   netloc,\n                                                   parsed_url.path,\n                                                   parsed_url.params,\n                                                   parsed_url.query,\n                                                   parsed_url.fragment))\n                password_manager = url_request.HTTPPasswordMgrWithDefaultRealm()\n                password_manager.add_password(None,\n                                              \"%s://%s\" % (parsed_url.scheme, netloc),\n                                              parsed_url.username,\n                                              parsed_url.password)\n                request = Request(cleaned_url, data=body.encode('utf-8'), method=method)\n            else:\n                request = Request(url, data=body.encode('utf-8'), method=method)\n    \n            request.add_header('Accept', 'application/json')\n            request.add_header('Content-Type', 'application/json;charset=UTF-8')\n    \n            if password_manager:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler(),\n                                                  url_request.HTTPBasicAuthHandler(password_manager))\n            else:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler())\n>           resp = opener.open(request)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10e18c560>\nfullurl = <selenium.webdriver.remote.remote_connection.Request instance at 0x10e18ce60>\ndata = None, timeout = <object object at 0x10d3f31e0>\n\n    def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n        # accept a URL or a Request object\n        if isinstance(fullurl, basestring):\n            req = Request(fullurl, data)\n        else:\n            req = fullurl\n            if data is not None:\n                req.add_data(data)\n    \n        req.timeout = timeout\n        protocol = req.get_type()\n    \n        # pre-process request\n        meth_name = protocol+\"_request\"\n        for processor in self.process_request.get(protocol, []):\n            meth = getattr(processor, meth_name)\n            req = meth(req)\n    \n>       response = self._open(req, data)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10e18c560>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10e18ce60>\ndata = None\n\n    def _open(self, req, data=None):\n        result = self._call_chain(self.handle_open, 'default',\n                                  'default_open', req)\n        if result:\n            return result\n    \n        protocol = req.get_type()\n        result = self._call_chain(self.handle_open, protocol, protocol +\n>                                 '_open', req)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:412: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.OpenerDirector instance at 0x10e18c560>\nchain = {'file': [<urllib2.FileHandler instance at 0x10e51b098>], 'ftp': [<urllib2.FTPHandler instance at 0x10e51b560>], 'http': [<urllib2.HTTPHandler instance at 0x10e51b5a8>], 'https': [<urllib2.HTTPSHandler instance at 0x10e51d6c8>], ...}\nkind = u'http', meth_name = u'http_open'\nargs = (<selenium.webdriver.remote.remote_connection.Request instance at 0x10e18ce60>,)\nhandlers = [<urllib2.HTTPHandler instance at 0x10e51b5a8>]\nhandler = <urllib2.HTTPHandler instance at 0x10e51b5a8>\nfunc = <bound method HTTPHandler.http_open of <urllib2.HTTPHandler instance at 0x10e51b5a8>>\n\n    def _call_chain(self, chain, kind, meth_name, *args):\n        # Handlers raise an exception if no one else should try to handle\n        # the request, or return None if they can't but another handler\n        # could.  Otherwise, they return the response.\n        handlers = chain.get(kind, ())\n        for handler in handlers:\n            func = getattr(handler, meth_name)\n    \n>           result = func(*args)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPHandler instance at 0x10e51b5a8>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10e18ce60>\n\n    def http_open(self, req):\n>       return self.do_open(httplib.HTTPConnection, req)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:1199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib2.HTTPHandler instance at 0x10e51b5a8>\nhttp_class = <class httplib.HTTPConnection at 0x10deb2050>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x10e18ce60>\n\n    def do_open(self, http_class, req):\n        \"\"\"Return an addinfourl object for the request, using http_class.\n    \n            http_class must implement the HTTPConnection API from httplib.\n            The addinfourl return value is a file-like object.  It also\n            has methods and attributes including:\n                - info(): return a mimetools.Message object for the headers\n                - geturl(): return the original request URL\n                - code: HTTP status code\n            \"\"\"\n        host = req.get_host()\n        if not host:\n            raise URLError('no host given')\n    \n        h = http_class(host, timeout=req.timeout) # will parse host:port\n        h.set_debuglevel(self._debuglevel)\n    \n        headers = dict(req.unredirected_hdrs)\n        headers.update(dict((k, v) for k, v in req.headers.items()\n                            if k not in headers))\n    \n        # We want to make an HTTP/1.1 request, but the addinfourl\n        # class isn't prepared to deal with a persistent connection.\n        # It will try to read all remaining data from the socket,\n        # which will block while the server waits for the next request.\n        # So make sure the connection gets closed after the (only)\n        # request.\n        headers[\"Connection\"] = \"close\"\n        headers = dict(\n            (name.title(), val) for name, val in headers.items())\n    \n        if req._tunnel_host:\n            tunnel_headers = {}\n            proxy_auth_hdr = \"Proxy-Authorization\"\n            if proxy_auth_hdr in headers:\n                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]\n                # Proxy-Authorization should not be sent to origin\n                # server.\n                del headers[proxy_auth_hdr]\n            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)\n    \n        try:\n            h.request(req.get_method(), req.get_selector(), req.data, headers)\n            try:\n>               r = h.getresponse(buffering=True)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py:1170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPConnection instance at 0x10e51d638>, buffering = True\n\n    def getresponse(self, buffering=False):\n        \"Get the response from the server.\"\n    \n        # if a prior response has been completed, then forget about it.\n        if self.__response and self.__response.isclosed():\n            self.__response = None\n    \n        #\n        # if a prior response exists, then it must be completed (otherwise, we\n        # cannot read this response's header to determine the connection-close\n        # behavior)\n        #\n        # note: if a prior response existed, but was connection-close, then the\n        # socket and response were made independent of this HTTPConnection\n        # object since a new request requires that we open a whole new\n        # connection\n        #\n        # this means the prior response had one of two states:\n        #   1) will_close: this connection was reset and the prior socket and\n        #                  response operate independently\n        #   2) persistent: the response was retained and we await its\n        #                  isclosed() status to become true.\n        #\n        if self.__state != _CS_REQ_SENT or self.__response:\n            raise ResponseNotReady()\n    \n        args = (self.sock,)\n        kwds = {\"strict\":self.strict, \"method\":self._method}\n        if self.debuglevel > 0:\n            args += (self.debuglevel,)\n        if buffering:\n            #only add this keyword if non-default, for compatibility with\n            #other response_classes.\n            kwds[\"buffering\"] = True;\n        response = self.response_class(*args, **kwds)\n    \n>       response.begin()\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:1027: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPResponse instance at 0x10e51db00>\n\n    def begin(self):\n        if self.msg is not None:\n            # we've already started reading the response\n            return\n    \n        # read until we get a non-100 response\n        while True:\n>           version, status, reason = self._read_status()\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:407: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <httplib.HTTPResponse instance at 0x10e51db00>\n\n    def _read_status(self):\n        # Initialize with Simple-Response defaults\n>       line = self.fp.readline()\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/httplib.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket._fileobject object at 0x10e15cf50>, size = -1\n\n    def readline(self, size=-1):\n        buf = self._rbuf\n        buf.seek(0, 2)  # seek end\n        if buf.tell() > 0:\n            # check if we already have it in our buffer\n            buf.seek(0)\n            bline = buf.readline(size)\n            if bline.endswith('\\n') or len(bline) == size:\n                self._rbuf = StringIO()\n                self._rbuf.write(buf.read())\n                return bline\n            del bline\n        if size < 0:\n            # Read until \\n or EOF, whichever comes first\n            if self._rbufsize <= 1:\n                # Speed up unbuffered case\n                buf.seek(0)\n                buffers = [buf.read()]\n                self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n                data = None\n                recv = self._sock.recv\n                while True:\n                    try:\n                        while data != \"\\n\":\n                            data = recv(1)\n                            if not data:\n                                break\n                            buffers.append(data)\n                    except error, e:\n                        # The try..except to catch EINTR was moved outside the\n                        # recv loop to avoid the per byte overhead.\n                        if e.args[0] == EINTR:\n                            continue\n                        raise\n                    break\n                return \"\".join(buffers)\n    \n            buf.seek(0, 2)  # seek end\n            self._rbuf = StringIO()  # reset _rbuf.  we consume it via buf.\n            while True:\n                try:\n>                   data = self._sock.recv(self._rbufsize)\nE                   Failed: Timeout >300s\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/socket.py:447: Failed"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10a29c368>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a29c710>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a296f90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a296f90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10a075a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x1036085f0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1036086c8>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10360fcd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10360fcd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x103453a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_after_viewing_reviews_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_searching_with_no_matching_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10741c758>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10741c290>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10740db10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10740db10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10726da10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x1100d0c68>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1100d08c0>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110092850>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110092850>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10ff12a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x108a802d8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x108a80d40>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x108a394d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x108a394d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x108890a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_searching_with_no_matching_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10fe6b8c0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10fe38128>\n\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10fe125d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10fe125d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10fc93a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x101fa9290>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x101fa95a8>\n\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x101fbcc50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x101fbcc50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x101dcea10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_go_back_from_settings_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x105e6a680>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x105e6ac68>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x105e3a1d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x105e3a1d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x105cbba10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x103498bd8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103498830>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1034a5090>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1034a5090>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10326fa10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10af5aea8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10af1b710>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10af1ffd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10af1ffd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10ad42a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_user_can_go_back_from_settings_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_writing_a_review_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x1103e2248>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1103e2170>\n\n    def test_that_after_writing_a_review_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\"Logged out, click \"Write a Review\" on an app page, sign in, submit a review,\n            click Back, test that the current page is the app page.\n            \"\"\"\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110381d10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110381d10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x1101c7a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10c257518>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10c2573f8>\n\n    def test_that_after_writing_a_review_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\"Logged out, click \"Write a Review\" on an app page, sign in, submit a review,\n            click Back, test that the current page is the app page.\n            \"\"\"\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10c5a9890>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10c5a9890>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10c084a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_after_writing_a_review_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_returns_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10a26a050>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a26ae60>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a258790>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a258790>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10a088a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x104c57d88>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x104c57fc8>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x104c40390>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x104c40390>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x104a22a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10ea2e488>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ea2e878>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ea2d4d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ea2d4d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10e842a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_searching_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_details_page_for_an_app/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x107989c20>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1079890e0>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10794f910>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10794f910>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x1077d4a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10dd4f128>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10dd4f638>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10dcfac10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10dcfac10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10db13a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10aa18368>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10aa18680>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a9fac50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a9fac50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10a813a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_details_page_for_an_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_login_and_logout/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x106ea1560>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x106ea1098>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1071d9c90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1071d9c90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x106cb7a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10ceaf758>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ceaf9e0>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10cebb650>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10cebb650>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10ccc3a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x1101683b0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110168320>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1102c6c90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1102c6c90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10ffcea10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_user_can_login_and_logout"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_that_verifies_categories_section/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_categories_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10f583c10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10f583c10>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        executor = 'http://%s:%s@ondemand.saucelabs.com:80/wd/hub' % (\n            self.credentials['username'],\n            self.credentials['api-key'])\n        self.selenium = webdriver.Remote(command_executor=executor,\n>                                        desired_capabilities=capabilities)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10f583c90>\ncommand_executor = 'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@ondemand.saucelabs.com:80/wd/hub'\ndesired_capabilities = {'browserName': 'android', 'build': 'jenkins-marketplace.dev.mobile.saucelabs-1089', 'name': 'tests.mobile.test_home_page.TestHomepage.test_that_verifies_categories_section', 'platform': 'linux', ...}\nbrowser_profile = None, proxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10f583c90>\ndesired_capabilities = {'browserName': 'android', 'build': 'jenkins-marketplace.dev.mobile.saucelabs-1089', 'name': 'tests.mobile.test_home_page.TestHomepage.test_that_verifies_categories_section', 'platform': 'linux', ...}\nbrowser_profile = None\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10f583c90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'android', 'build': 'jenkins-marketplace.dev.mobile.saucelabs-1089', 'name': '...obile.test_home_page.TestHomepage.test_that_verifies_categories_section', 'platform': 'linux', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n>       response = self.command_executor.execute(driver_command, params)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x10f3cf5d0>\ncommand = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'android', 'build': 'jenkins-marketplace.dev.mobile.saucelabs-1089', 'name': '...obile.test_home_page.TestHomepage.test_that_verifies_categories_section', 'platform': 'linux', ...}, 'sessionId': None}\n\n    def execute(self, command, params):\n        \"\"\"\n            Send a command to the remote server.\n    \n            Any path subtitutions required for the URL mapped to the command should be\n            included in the command parameters.\n    \n            :Args:\n             - command - A string specifying the command to execute.\n             - params - A dictionary of named parameters to send with the command as\n               its JSON payload.\n            \"\"\"\n        command_info = self._commands[command]\n        assert command_info is not None, 'Unrecognised command %s' % command\n        data = utils.dump_json(params)\n        path = string.Template(command_info[1]).substitute(params)\n        url = '%s%s' % (self._url, path)\n>       return self._request(command_info[0], url, body=data)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x10f3cf5d0>\nmethod = 'POST'\nurl = 'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@162.222.75.179:80/wd/hub/session'\nbody = '{\"sessionId\": null, \"desiredCapabilities\": {\"name\": \"tests.mobile.test_home_page.TestHomepage.test_that_verifies_cate...tricted-public-info\": true, \"version\": \"4\", \"build\": \"jenkins-marketplace.dev.mobile.saucelabs-1089\", \"public\": true}}'\n\n    def _request(self, method, url, body=None):\n        \"\"\"\n            Send an HTTP request to the remote server.\n    \n            :Args:\n             - method - A string for the HTTP method to send the request with.\n             - url - A string for the URL to send the request to.\n             - body - A string for request body. Ignored unless method is POST or PUT.\n    \n            :Returns:\n              A dictionary with the server's parsed JSON response.\n            \"\"\"\n        LOGGER.debug('%s %s %s' % (method, url, body))\n    \n        parsed_url = parse.urlparse(url)\n    \n        if self.keep_alive:\n            headers = {\"Connection\": 'keep-alive', method: parsed_url.path,\n                       \"User-Agent\": \"Python http auth\",\n                       \"Content-type\": \"application/json;charset=\\\"UTF-8\\\"\",\n                       \"Accept\": \"application/json\"}\n            if parsed_url.username:\n                auth = base64.standard_b64encode('%s:%s' %\n                       (parsed_url.username, parsed_url.password)).replace('\\n', '')\n                headers[\"Authorization\"] = \"Basic %s\" % auth\n            if body and method != 'POST' and method != 'PUT':\n                body = None\n            try:\n                self._conn.request(method, parsed_url.path, body, headers)\n                resp = self._conn.getresponse()\n            except httplib.HTTPException:\n                self._conn.close()\n                raise\n    \n            statuscode = resp.status\n        else:\n            password_manager = None\n            if parsed_url.username:\n                netloc = parsed_url.hostname\n                if parsed_url.port:\n                    netloc += \":%s\" % parsed_url.port\n                cleaned_url = parse.urlunparse((parsed_url.scheme,\n                                                   netloc,\n                                                   parsed_url.path,\n                                                   parsed_url.params,\n                                                   parsed_url.query,\n                                                   parsed_url.fragment))\n                password_manager = url_request.HTTPPasswordMgrWithDefaultRealm()\n                password_manager.add_password(None,\n                                              \"%s://%s\" % (parsed_url.scheme, netloc),\n                                              parsed_url.username,\n                                              parsed_url.password)\n                request = Request(cleaned_url, data=body.encode('utf-8'), method=method)\n            else:\n                request = Request(url, data=body.encode('utf-8'), method=method)\n    \n            request.add_header('Accept', 'application/json')\n            request.add_header('Content-Type', 'application/json;charset=UTF-8')\n    \n            if password_manager:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler(),\n                                                  url_request.HTTPBasicAuthHandler(password_manager))\n            else:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler())\n            resp = opener.open(request)\n            statuscode = resp.code\n            if not hasattr(resp, 'getheader'):\n                if hasattr(resp.headers, 'getheader'):\n                    resp.getheader = lambda x: resp.headers.getheader(x)\n                elif hasattr(resp.headers, 'get'):\n                    resp.getheader = lambda x: resp.headers.get(x)\n    \n        data = resp.read()\n        try:\n            if 399 < statuscode < 500:\n                return {'status': statuscode, 'value': data}\n            if 300 <= statuscode < 304:\n>               return self._request('GET', resp.getheader('location'))\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x10f3cf5d0>\nmethod = 'GET', url = None, body = None\n\n    def _request(self, method, url, body=None):\n        \"\"\"\n            Send an HTTP request to the remote server.\n    \n            :Args:\n             - method - A string for the HTTP method to send the request with.\n             - url - A string for the URL to send the request to.\n             - body - A string for request body. Ignored unless method is POST or PUT.\n    \n            :Returns:\n              A dictionary with the server's parsed JSON response.\n            \"\"\"\n        LOGGER.debug('%s %s %s' % (method, url, body))\n    \n>       parsed_url = parse.urlparse(url)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:363: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = None, scheme = '', allow_fragments = True\n\n    def urlparse(url, scheme='', allow_fragments=True):\n        \"\"\"Parse a URL into 6 components:\n        <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n        Return a 6-tuple: (scheme, netloc, path, params, query, fragment).\n        Note that we don't break the components up in smaller bits\n        (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n>       tuple = urlsplit(url, scheme, allow_fragments)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urlparse.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = None, scheme = '', allow_fragments = True\n\n    def urlsplit(url, scheme='', allow_fragments=True):\n        \"\"\"Parse a URL into 5 components:\n        <scheme>://<netloc>/<path>?<query>#<fragment>\n        Return a 5-tuple: (scheme, netloc, path, query, fragment).\n        Note that we don't break the components up in smaller bits\n        (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n        allow_fragments = bool(allow_fragments)\n        key = url, scheme, allow_fragments, type(url), type(scheme)\n        cached = _parse_cache.get(key, None)\n        if cached:\n            return cached\n        if len(_parse_cache) >= MAX_CACHE_SIZE: # avoid runaway growth\n            clear_cache()\n        netloc = query = fragment = ''\n>       i = url.find(':')\nE       AttributeError: 'NoneType' object has no attribute 'find'\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urlparse.py:173: AttributeError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x10a7f46c8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a8314d0>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a820410>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a820410>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10a63fa10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x10c319248>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10c319950>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10c2c4890>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10c2c4890>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10c15ba10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_verifies_categories_section"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_with_empty_field_returns_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x110b9f050>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110c490e0>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110b95950>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110b95950>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x1109c5a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x107ffe290>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x107f2c7a0>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107fd49d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107fd49d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x107e2ca10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10dfdfe60>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10dfdffc8>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10dfd2ad0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10dfd2ad0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10de50a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_that_searching_with_empty_field_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_switch_between_new_and_popular_tab/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x1102c2950>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x11001e710>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ffedd90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ffedd90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10fe1ba10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x1024098c0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x102409998>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1023d0950>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1023d0950>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x1021eca10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_switch_between_new_and_popular_tab'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10666cdd0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10666cdd0>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        executor = 'http://%s:%s@ondemand.saucelabs.com:80/wd/hub' % (\n            self.credentials['username'],\n            self.credentials['api-key'])\n        self.selenium = webdriver.Remote(command_executor=executor,\n>                                        desired_capabilities=capabilities)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10666cf90>\ncommand_executor = 'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@ondemand.saucelabs.com:80/wd/hub'\ndesired_capabilities = {'browserName': 'android', 'build': 'jenkins-marketplace.stage.mobile.saucelabs-1001', 'name': 'tests.mobile.test_home_page.TestHomepage.test_switch_between_new_and_popular_tab', 'platform': 'linux', ...}\nbrowser_profile = None, proxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10666cf90>\ndesired_capabilities = {'browserName': 'android', 'build': 'jenkins-marketplace.stage.mobile.saucelabs-1001', 'name': 'tests.mobile.test_home_page.TestHomepage.test_switch_between_new_and_popular_tab', 'platform': 'linux', ...}\nbrowser_profile = None\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10666cf90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'android', 'build': 'jenkins-marketplace.stage.mobile.saucelabs-1001', 'name':...ile.test_home_page.TestHomepage.test_switch_between_new_and_popular_tab', 'platform': 'linux', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n>       response = self.command_executor.execute(driver_command, params)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x106684890>\ncommand = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'android', 'build': 'jenkins-marketplace.stage.mobile.saucelabs-1001', 'name':...ile.test_home_page.TestHomepage.test_switch_between_new_and_popular_tab', 'platform': 'linux', ...}, 'sessionId': None}\n\n    def execute(self, command, params):\n        \"\"\"\n            Send a command to the remote server.\n    \n            Any path subtitutions required for the URL mapped to the command should be\n            included in the command parameters.\n    \n            :Args:\n             - command - A string specifying the command to execute.\n             - params - A dictionary of named parameters to send with the command as\n               its JSON payload.\n            \"\"\"\n        command_info = self._commands[command]\n        assert command_info is not None, 'Unrecognised command %s' % command\n        data = utils.dump_json(params)\n        path = string.Template(command_info[1]).substitute(params)\n        url = '%s%s' % (self._url, path)\n>       return self._request(command_info[0], url, body=data)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x106684890>\nmethod = 'POST'\nurl = 'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@162.222.75.179:80/wd/hub/session'\nbody = '{\"sessionId\": null, \"desiredCapabilities\": {\"name\": \"tests.mobile.test_home_page.TestHomepage.test_switch_between_new...icted-public-info\": true, \"version\": \"4\", \"build\": \"jenkins-marketplace.stage.mobile.saucelabs-1001\", \"public\": true}}'\n\n    def _request(self, method, url, body=None):\n        \"\"\"\n            Send an HTTP request to the remote server.\n    \n            :Args:\n             - method - A string for the HTTP method to send the request with.\n             - url - A string for the URL to send the request to.\n             - body - A string for request body. Ignored unless method is POST or PUT.\n    \n            :Returns:\n              A dictionary with the server's parsed JSON response.\n            \"\"\"\n        LOGGER.debug('%s %s %s' % (method, url, body))\n    \n        parsed_url = parse.urlparse(url)\n    \n        if self.keep_alive:\n            headers = {\"Connection\": 'keep-alive', method: parsed_url.path,\n                       \"User-Agent\": \"Python http auth\",\n                       \"Content-type\": \"application/json;charset=\\\"UTF-8\\\"\",\n                       \"Accept\": \"application/json\"}\n            if parsed_url.username:\n                auth = base64.standard_b64encode('%s:%s' %\n                       (parsed_url.username, parsed_url.password)).replace('\\n', '')\n                headers[\"Authorization\"] = \"Basic %s\" % auth\n            if body and method != 'POST' and method != 'PUT':\n                body = None\n            try:\n                self._conn.request(method, parsed_url.path, body, headers)\n                resp = self._conn.getresponse()\n            except httplib.HTTPException:\n                self._conn.close()\n                raise\n    \n            statuscode = resp.status\n        else:\n            password_manager = None\n            if parsed_url.username:\n                netloc = parsed_url.hostname\n                if parsed_url.port:\n                    netloc += \":%s\" % parsed_url.port\n                cleaned_url = parse.urlunparse((parsed_url.scheme,\n                                                   netloc,\n                                                   parsed_url.path,\n                                                   parsed_url.params,\n                                                   parsed_url.query,\n                                                   parsed_url.fragment))\n                password_manager = url_request.HTTPPasswordMgrWithDefaultRealm()\n                password_manager.add_password(None,\n                                              \"%s://%s\" % (parsed_url.scheme, netloc),\n                                              parsed_url.username,\n                                              parsed_url.password)\n                request = Request(cleaned_url, data=body.encode('utf-8'), method=method)\n            else:\n                request = Request(url, data=body.encode('utf-8'), method=method)\n    \n            request.add_header('Accept', 'application/json')\n            request.add_header('Content-Type', 'application/json;charset=UTF-8')\n    \n            if password_manager:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler(),\n                                                  url_request.HTTPBasicAuthHandler(password_manager))\n            else:\n                opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                  HttpErrorHandler())\n            resp = opener.open(request)\n            statuscode = resp.code\n            if not hasattr(resp, 'getheader'):\n                if hasattr(resp.headers, 'getheader'):\n                    resp.getheader = lambda x: resp.headers.getheader(x)\n                elif hasattr(resp.headers, 'get'):\n                    resp.getheader = lambda x: resp.headers.get(x)\n    \n        data = resp.read()\n        try:\n            if 399 < statuscode < 500:\n                return {'status': statuscode, 'value': data}\n            if 300 <= statuscode < 304:\n>               return self._request('GET', resp.getheader('location'))\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.remote_connection.RemoteConnection object at 0x106684890>\nmethod = 'GET', url = None, body = None\n\n    def _request(self, method, url, body=None):\n        \"\"\"\n            Send an HTTP request to the remote server.\n    \n            :Args:\n             - method - A string for the HTTP method to send the request with.\n             - url - A string for the URL to send the request to.\n             - body - A string for request body. Ignored unless method is POST or PUT.\n    \n            :Returns:\n              A dictionary with the server's parsed JSON response.\n            \"\"\"\n        LOGGER.debug('%s %s %s' % (method, url, body))\n    \n>       parsed_url = parse.urlparse(url)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/remote_connection.py:363: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = None, scheme = '', allow_fragments = True\n\n    def urlparse(url, scheme='', allow_fragments=True):\n        \"\"\"Parse a URL into 6 components:\n        <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n        Return a 6-tuple: (scheme, netloc, path, params, query, fragment).\n        Note that we don't break the components up in smaller bits\n        (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n>       tuple = urlsplit(url, scheme, allow_fragments)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urlparse.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = None, scheme = '', allow_fragments = True\n\n    def urlsplit(url, scheme='', allow_fragments=True):\n        \"\"\"Parse a URL into 5 components:\n        <scheme>://<netloc>/<path>?<query>#<fragment>\n        Return a 5-tuple: (scheme, netloc, path, query, fragment).\n        Note that we don't break the components up in smaller bits\n        (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n        allow_fragments = bool(allow_fragments)\n        key = url, scheme, allow_fragments, type(url), type(scheme)\n        cached = _parse_cache.get(key, None)\n        if cached:\n            return cached\n        if len(_parse_cache) >= MAX_CACHE_SIZE: # avoid runaway growth\n            clear_cache()\n        netloc = query = fragment = ''\n>       i = url.find(':')\nE       AttributeError: 'NoneType' object has no attribute 'find'\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urlparse.py:173: AttributeError"}], "passed": [], "test_name": "test_switch_between_new_and_popular_tab"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_reviews_section/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x106e03cb0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x107049fc8>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x106dfae10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x106dfae10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x106be2a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x103c66518>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103c66a28>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103c58e90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103c58e90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x103a7ca10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10f4cf518>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10f514d40>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10f4d7f90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10f4d7f90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class unittestzero.Assert at 0x10f2f0a10>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:123: AssertionError"}], "passed": [], "test_name": "test_reviews_section"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "condition: True: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.mobile.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: condition: True"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}, {"group": "Firefox OS", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_add_review/TestMarketplaceAddReview/test_add_review/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_add_review"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_and_install_app/TestSearchMarketplaceAndInstallApp/test_search_and_install_app/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_search_and_install_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_login/TestMarketplaceFeedback/test_marketplace_feedback_user/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_user"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_anonymous/TestMarketplaceFeedback/test_marketplace_feedback_anonymous/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_anonymous"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_login/TestMarketplaceLogin/test_login_marketplace/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_login_marketplace"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_without_connectivity/TestMarketplaceWithoutConnectivity/test_marketplace_without_connectivity/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_without_connectivity"}, {"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_purchase_app/TestMarketplacePurchaseApp/test_purchase_app/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "error", "detail": "test error: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette_test.py\", line 163, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_purchase_app.py\", line 26, in test_purchase_app\n    marketplace.launch()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 47, in launch\n    Base.launch(self, launch_timeout=120000)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest-0.23-py2.7.egg/gaiatest/apps/base.py\", line 25, in launch\n    self.app = self.apps.launch(self.name, launch_timeout=launch_timeout)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest-0.23-py2.7.egg/gaiatest/gaia_test.py\", line 51, in launch\n    result = self.marionette.execute_async_script(\"GaiaApps.launchWithName('%s')\" % name, script_timeout=launch_timeout)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette.py\", line 1177, in execute_async_script\n    filename=os.path.basename(frame[0]))\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/decorators.py\", line 35, in _\n    return func(*args, **kwargs)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette.py\", line 624, in _send_message\n    self._handle_error(response)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette.py\", line 683, in _handle_error\n    raise ScriptTimeoutException(message=message, status=status, stacktrace=stacktrace)\nScriptTimeoutException: ScriptTimeoutException: timed out\n"}], "passed": [], "test_name": "test_purchase_app"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client-0.7.7-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_search_for_paid_app.py\", line 35, in test_search_paid_app\n    (APP_NAME, saved_price))\nAssertionError: The app: Test Zippy With Me does not appear to be a paid app. Its price is \"$0.99\"."}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_for_paid_app/TestSearchMarketplacePaidApp/test_search_paid_app/", "failed": [], "passed": [], "test_name": "test_search_paid_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_create_confirm_pin/TestMarketplaceCreateConfirmPin/test_create_confirm_pin/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_create_confirm_pin"}]}, {"group": "Desktop", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_application_page_contains_proper_objects/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_application_page_contains_proper_objects'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10717b050>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10717b050>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10717bc10>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIACwZqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10717b290>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10717bc10>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIACwZqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10717b290>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10717bc10>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIACwZqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10717b4d0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 23446879, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_application_page_contains_proper_objects"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_the_search_tag_is_present_in_the_search_results/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_the_search_tag_is_present_in_the_search_results'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1019f8050>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1019f8050>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1019f8c10>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAEUZqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1019f8290>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1019f8c10>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAEUZqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1019f8290>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1019f8c10>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAEUZqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1019f84d0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 20595894, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_the_search_tag_is_present_in_the_search_results"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_date/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_apps_are_sorted_by_date'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b661710>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b661710>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10ba3f690>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10ba3f950>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10ba3f690>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10ba3f950>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10ba3f690>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10ba3f150>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABIGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_date"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_open_view_all_link_while_popular_tab_selected/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_open_view_all_link_while_popular_tab_selected'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10a9ed390>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10a9ed390>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10a9ef110>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAHUZqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10a9ef490>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10a9ef110>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAHUZqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10a9ef490>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10a9ef110>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAHUZqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10a9ef150>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 19895107, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_open_view_all_link_while_popular_tab_selected"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_clicking_on_featured_app_loads_details_page/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_clicking_on_featured_app_loads_details_page'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103e66e10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103e66e10>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103b384d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABYWqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103e66ed0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103b384d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABYWqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103e66ed0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103b384d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABYWqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103b38550>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 992048, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_clicking_on_featured_app_loads_details_page"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_editing_basic_info_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b747d10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b747d10>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b7abc10>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b7abc10>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b630110>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAA0Gf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "We currently don't have the option for changing the language in Fireplace: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/tests/desktop/consumer_pages/test_users_account.py:76: Skipped: We currently don't have the option for changing the language in Fireplace"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_that_checks_changing_language/", "failed": [], "passed": [], "test_name": "test_that_checks_changing_language"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 969242 - Combine Android Phone and Android Tablet on submission page"}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_hosted_app_submission'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8ec090>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8ec090>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ec450>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8ec3d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ec450>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8ec3d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ec450>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABMGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b8ec290>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABMGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": [], "test_name": "test_hosted_app_submission"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_editing_user_profile/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_editing_user_profile"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_in_consumer_pages/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_user_can_sign_in_and_sign_out_in_consumer_pages'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103e5c250>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103e5c250>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103ba9090>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAPsaqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103ba9e50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103ba9090>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAPsaqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103ba9e50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103ba9090>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAPsaqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103bb4090>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 12647255, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_in_consumer_pages"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_anonymous_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_anonymous_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_api_submit/TestAPI/test_assert_that_a_app_can_be_added_and_deleted_via_the_api/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_assert_that_a_app_can_be_added_and_deleted_via_the_api'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b747d10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b747d10>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b7abc10>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b7abc10>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b7ab310>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b6360d0>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAAwGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_assert_that_a_app_can_be_added_and_deleted_via_the_api"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_header_has_expected_items/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_header_has_expected_items'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10a80c3d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10a80c3d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10ac30b10>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAP0VqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10a8dc7d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10ac30b10>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAP0VqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10a8dc7d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10ac30b10>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAP0VqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10a9efdd0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 19835070, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_header_has_expected_items"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_that_manifest_url_cannot_be_edited_via_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_that_manifest_url_cannot_be_edited_via_basic_info_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b542550>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b542550>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b542510>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b542b90>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b542510>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b542b90>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b542510>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b549c10>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAA4Gf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_that_manifest_url_cannot_be_edited_via_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "Purchase app option is currently not available for desktop environment: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Purchase app option is currently not available for desktop environment"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_purchase_app/TestPurchaseApp/test_that_purchases_an_app_without_pre_auth_and_requests_a_refund/", "failed": [], "passed": [], "test_name": "test_that_purchases_an_app_without_pre_auth_and_requests_a_refund"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_deletion_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_deletion_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_opening_every_category_page_from_categories_section/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_opening_every_category_page_from_categories_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x101885350>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x101885350>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x101ca9a90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAM4VqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x101954750>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x101ca9a90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAM4VqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x101954750>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x101ca9a90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAM4VqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1019fa310>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 28546957, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_opening_every_category_page_from_categories_section"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_support_information_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_editing_support_information_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5a5790>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5a5790>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5c2ed0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b4ef2d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5c2ed0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b4ef2d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5c2ed0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA0Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b5c2f50>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAA0Gf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_support_information_for_a_free_app"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_editing_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_editing_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_deletes_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_deletes_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5d1f50>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b5d1f50>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5d1cd0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b5d1dd0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5d1cd0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b5d1dd0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b5d1cd0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAAwGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b5d1c90>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAAwGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_deletes_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_open_view_all_link_while_new_tab_selected/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_open_view_all_link_while_new_tab_selected'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x109ac8890>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x109ac8890>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109cffe90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFsZqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x109ac8c90>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109cffe90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFsZqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x109ac8c90>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109cffe90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAFsZqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x109cff4d0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 19103080, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_open_view_all_link_while_new_tab_selected"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_required_field_validations_on_basic_info_for_a_free_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b60b7d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b60b7d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b60b990>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b60bd50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b60b990>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b60bd50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b60b990>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA4Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b53d250>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAA4Gf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "xfail-marked test passes unexpectedly: None"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_can_be_added/", "failed": [], "passed": [], "test_name": "test_that_a_screenshot_can_be_added"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_checks_search_with_foreign_characters/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_search_with_foreign_characters'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x107189190>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x107189190>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1071891d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAOQaqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x107189d50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1071891d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAOQaqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x107189d50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1071891d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAOQaqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107189350>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 22487418, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_checks_search_with_foreign_characters"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_create_new_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_create_new_user"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 969242 - Combine Android Phone and Android Tablet on submission page"}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_device_types_for_hosted_apps/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_required_field_validations_on_device_types_for_hosted_apps'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b531650>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b531650>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b52d6d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b52d090>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b52d6d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b52d090>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b52d6d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAA8Gf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b52dcd0>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIAA8Gf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": [], "test_name": "test_that_checks_required_field_validations_on_device_types_for_hosted_apps"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_searching_with_empty_field_using_submit_returns_results/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_searching_with_empty_field_using_submit_returns_results'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103b8e710>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x103b8e710>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103b8e850>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAI0ZqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103b8e610>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103b8e850>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAI0ZqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x103b8e610>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x103b8e850>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAI0ZqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103b8ea50>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 8295211, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_searching_with_empty_field_using_submit_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_categories_section/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_categories_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x107011350>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x107011350>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x107434a90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIALUVqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1070df750>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x107434a90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIALUVqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1070df750>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x107434a90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIALUVqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10717c310>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 4860392, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_categories_section"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Rating]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Rating]"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_signed_in_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_signed_in_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_an_icon_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_an_icon_cannot_be_added_via_an_invalid_file_format'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8afed0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8afed0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8af0d0>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8afb50>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8af0d0>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8afb50>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8af0d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b8affd0>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABAGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_an_icon_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 969242 - Combine Android Phone and Android Tablet on submission page"}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_packaged_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_packaged_app_submission'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8ffdd0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b8ffdd0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ffb50>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8ff8d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ffb50>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b8ff8d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8ffb50>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABIGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b8ff650>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABIGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": [], "test_name": "test_packaged_app_submission"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 969284 - [dev] \"Oops ...\" page displayed when trying to save payment options for a hosted paid app"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_paid_app_submission/", "failed": [], "passed": [], "test_name": "test_hosted_paid_app_submission"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_featured_application_section/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_featured_application_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1098e4350>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x1098e4350>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109d08a90>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAOYVqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1099b3750>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109d08a90>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAOYVqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x1099b3750>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x109d08a90>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAOYVqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x109a5b310>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 9267481, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_featured_application_section"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_name/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_apps_are_sorted_by_name'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b548450>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b548450>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8bbc10>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b5481d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8bbc10>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b5481d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b8bbc10>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABEGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b8bbbd0>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABEGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_name"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b662290>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x10b662290>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b51d610>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b662f90>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b51d610>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x10b662f90>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10b51d610>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIABAGf0RmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b51d050>\nresponse = {u'status': 13, u'value': {u'class': u'org.openqa.grid.common.exception.GridException', u'message': u'Error forwarding...etty7.servlet.ServletHolder', u'fileName': u'ServletHolder.java', u'lineNumber': 565, u'methodName': u'handle'}, ...]}}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u'Error forwarding the new session Empty pool of VM for setup Capabilities [{platform=WINDOWS, firefox_profile=UEsDBBQAAAAIABAGf0RmDreMJwMAA..., javascriptEnabled=true, browserName=firefox, version=25}]' ; Stacktrace: \nE           at org.openqa.grid.web.servlet.handler.RequestHandler.process (RequestHandler.java:114)\nE           at org.openqa.grid.web.servlet.DriverServlet.process (DriverServlet.java:83)\nE           at org.openqa.grid.web.servlet.DriverServlet.doPost (DriverServlet.java:67)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:727)\nE           at javax.servlet.http.HttpServlet.service (HttpServlet.java:820)\nE           at org.seleniumhq.jetty7.servlet.ServletHolder.handle (ServletHolder.java:565)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doHandle (ServletHandler.java:479)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doHandle (SessionHandler.java:225)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doHandle (ContextHandler.java:1031)\nE           at org.seleniumhq.jetty7.servlet.ServletHandler.doScope (ServletHandler.java:406)\nE           at org.seleniumhq.jetty7.server.session.SessionHandler.doScope (SessionHandler.java:186)\nE           at org.seleniumhq.jetty7.server.handler.ContextHandler.doScope (ContextHandler.java:965)\nE           at org.seleniumhq.jetty7.server.handler.ScopedHandler.handle (ScopedHandler.java:117)\nE           at org.seleniumhq.jetty7.server.handler.HandlerWrapper.handle (HandlerWrapper.java:111)\nE           at org.seleniumhq.jetty7.server.Server.handle (Server.java:349)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:452)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handleRequest (BlockingHttpConnection.java:47)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection.content (AbstractHttpConnection.java:894)\nE           at org.seleniumhq.jetty7.server.AbstractHttpConnection$RequestHandler.content (AbstractHttpConnection.java:948)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseNext (HttpParser.java:857)\nE           at org.seleniumhq.jetty7.http.HttpParser.parseAvailable (HttpParser.java:235)\nE           at org.seleniumhq.jetty7.server.BlockingHttpConnection.handle (BlockingHttpConnection.java:66)\nE           at org.seleniumhq.jetty7.server.bio.SocketConnector$ConnectorEndPoint.run (SocketConnector.java:254)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:599)\nE           at org.seleniumhq.jetty7.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:534)\nE           at java.lang.Thread.run (Thread.java:695)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_gallery_section_tabs/", "failed": [{"jobs": ["marketplace.prod"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_gallery_section_tabs'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x110de73d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.selenium_client.Client object at 0x110de73d0>\n\n    def start_webdriver_client(self):\n        capabilities = {}\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        if self.proxy_host and self.proxy_port:\n            proxy = Proxy()\n            proxy.http_proxy = '%s:%s' % (self.proxy_host, self.proxy_port)\n            proxy.ssl_proxy = proxy.http_proxy\n            proxy.add_to_capabilities(capabilities)\n        profile = None\n    \n        if self.driver.upper() == 'REMOTE':\n            capabilities.update(getattr(webdriver.DesiredCapabilities, self.browser_name.upper()))\n            if json.loads(self.chrome_options) or self.extension_paths:\n                capabilities = self.create_chrome_options(\n                    self.chrome_options,\n                    self.extension_paths).to_capabilities()\n            if self.browser_name.upper() == 'FIREFOX':\n                profile = self.create_firefox_profile(\n                    self.firefox_preferences,\n                    self.profile_path,\n                    self.extension_paths)\n            if self.browser_version:\n                capabilities['version'] = self.browser_version\n            capabilities['platform'] = self.platform.upper()\n            executor = 'http://%s:%s/wd/hub' % (self.host, self.port)\n            try:\n                self.selenium = webdriver.Remote(command_executor=executor,\n                                                 desired_capabilities=capabilities or None,\n>                                                browser_profile=profile)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x11120bb10>\ncommand_executor = 'http://localhost:4444/wd/hub'\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAJwVqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x110eb77d0>\nproxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or type(self.command_executor) is str:\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x11120bb10>\ndesired_capabilities = {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAJwVqERmDreMJwMAAD4LAAAHAAAAdXNlci5qc5VWy27bMBC89ysKn1qgJvJ...AAAAAAAACkgQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}\nbrowser_profile = <selenium.webdriver.firefox.firefox_profile.FirefoxProfile object at 0x110eb77d0>\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x11120bb10>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'firefox', 'firefox_profile': 'UEsDBBQAAAAIAJwVqERmDreMJwMAAD4LAAAHAAAAdXNlci5...VyLmpzUEsFBgAAAAABAAEANQAA\\nAEwDAAAAAA==\\n', 'javascriptEnabled': True, 'platform': 'WINDOWS', ...}, 'sessionId': None}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if not params:\n            params = {'sessionId': self.session_id}\n        elif 'sessionId' not in params:\n            params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x110fc8dd0>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 26304757, u'sessionId': u'', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: u\"Unable to bind to locking port 7054 within 45000 ms\\nBuild info: version: '2.40.0', revision: 'fbe29a9', time: '2014-02-19 20:54:28'\\nSystem info: host: 'selenium3-win7', ip: '10.252.73.236', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.6.0_29'\\nDriver info: driver.version: FirefoxDriver\" ; Stacktrace: \nE           at org.openqa.selenium.internal.SocketLock.lock (SocketLock.java:98)\nE           at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start (NewProfileExtensionConnection.java:84)\nE           at org.openqa.selenium.firefox.FirefoxDriver.startClient (FirefoxDriver.java:247)\nE           at org.openqa.selenium.remote.RemoteWebDriver.<init> (RemoteWebDriver.java:112)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:194)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:187)\nE           at org.openqa.selenium.firefox.FirefoxDriver.<init> (FirefoxDriver.java:105)\nE           at sun.reflect.GeneratedConstructorAccessor195.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:27)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:513)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.callConstructor (DefaultDriverFactory.java:62)\nE           at org.openqa.selenium.remote.server.DefaultDriverFactory.newInstance (DefaultDriverFactory.java:56)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:216)\nE           at org.openqa.selenium.remote.server.DefaultSession$BrowserCreator.call (DefaultSession.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:303)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:138)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.runTask (ThreadPoolExecutor.java:886)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:908)\nE           at java.lang.Thread.run (Thread.java:662)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:164: WebDriverException"}], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_gallery_section_tabs"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Search suggestions not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Search suggestions not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Relevancy]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Relevancy]"}]}]}