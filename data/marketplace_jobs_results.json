{"last_updated": "2014-07-10 11:00:02.417566", "results": [{"group": "Android", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_viewing_reviews_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10a5114d0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a553c68>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a558550>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a558550>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10351abd8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10351a4d0>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10354e690>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10354e690>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x1079679e0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x107967560>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107921ad0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107921ad0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_after_viewing_reviews_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_with_empty_field_returns_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10268e098>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10268e950>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x102679f10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x102679f10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x105b5df80>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x105b5dcb0>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x105b11d50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x105b11d50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x110dac4d0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110dd6c20>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110da35d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110da35d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_searching_with_empty_field_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x106073a70>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x106073b48>\n\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10600b450>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10600b450>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x103756998>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103756368>\n\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10372ca90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10372ca90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_go_back_from_settings_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x103395b90>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103395998>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103382710>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103382710>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10b31dfc8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10b2db248>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b2f4e10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b2f4e10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10f40ebd8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10f590ea8>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10f493d90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10f493d90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_user_can_go_back_from_settings_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_that_verifies_categories_section/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x10c828ab8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10c828e60>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b7a7b50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b7a7b50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x110a5e638>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110a5ecb0>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110a30210>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110a30210>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x102d24fc8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x102cfe170>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x102cef290>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x102cef290>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_verifies_categories_section"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_returns_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10b12bb00>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10b13d710>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b167290>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b167290>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10ce74d88>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ce74050>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ce69d10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10ce69d10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x104264440>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1042b2200>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10425ae90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10425ae90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_searching_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_details_page_for_an_app/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x109d00cb0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x109d19368>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109cff850>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109cff850>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10d33a7a0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10d33ac20>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10d2e6c10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10d2e6c10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10a367dd0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10b425f80>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a3dd950>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a3dd950>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_details_page_for_an_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_login_and_logout/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_user_can_login_and_logout'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10a229550>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10a229550>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        executor = 'http://%s:%s@ondemand.saucelabs.com:80/wd/hub' % (\n            self.credentials['username'],\n            self.credentials['api-key'])\n        self.selenium = webdriver.Remote(command_executor=executor,\n>                                        desired_capabilities=capabilities)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10a229c50>\ncommand_executor = 'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@ondemand.saucelabs.com:80/wd/hub'\ndesired_capabilities = {'browserName': 'android', 'build': 'jenkins-marketplace.dev.mobile.saucelabs-1168', 'name': 'tests.mobile.test_users_account.TestAccounts.test_user_can_login_and_logout', 'platform': 'linux', ...}\nbrowser_profile = None, proxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10a229c50>\ndesired_capabilities = {'browserName': 'android', 'build': 'jenkins-marketplace.dev.mobile.saucelabs-1168', 'name': 'tests.mobile.test_users_account.TestAccounts.test_user_can_login_and_logout', 'platform': 'linux', ...}\nbrowser_profile = None\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10a229c50>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'android', 'build': 'jenkins-marketplace.dev.mobile.saucelabs-1168', 'name': 'tests.mobile.test_users_account.TestAccounts.test_user_can_login_and_logout', 'platform': 'linux', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10a229b90>\nresponse = {'status': 404, 'value': 'ERROR Job 223c50e1526147c98ab047b88f3d1e9b is not in progress. It may have recently finished, or experienced an error. You can learn more at https://saucelabs.com/jobs/223c50e1526147c98ab047b88f3d1e9b'}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n>           raise exception_class(value)\nE           WebDriverException: Message: 'ERROR Job 223c50e1526147c98ab047b88f3d1e9b is not in progress. It may have recently finished, or experienced an error. You can learn more at https://saucelabs.com/jobs/223c50e1526147c98ab047b88f3d1e9b'\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:136: WebDriverException"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x1032439e0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103243c20>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10321cc90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10321cc90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10b84bea8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10b84b680>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b84a2d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10b84a2d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_user_can_login_and_logout"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_writing_a_review_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x104a3f200>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x104a3f6c8>\n\n    def test_that_after_writing_a_review_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\"Logged out, click \"Write a Review\" on an app page, sign in, submit a review,\n            click Back, test that the current page is the app page.\n            \"\"\"\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x104a10cd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x104a10cd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x11224b200>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x11224b7a0>\n\n    def test_that_after_writing_a_review_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\"Logged out, click \"Write a Review\" on an app page, sign in, submit a review,\n            click Back, test that the current page is the app page.\n            \"\"\"\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x11222c150>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x11222c150>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_after_writing_a_review_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_searching_with_no_matching_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x1055c2c20>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1055c6d88>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10661a110>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10661a110>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10e9d2dd0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10e9d2d40>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e9a8c10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10e9a8c10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_searching_with_no_matching_results'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x101b69f10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x101b69f10>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n            capabilities.update(json.loads(self.capabilities))\n        executor = 'http://%s:%s@ondemand.saucelabs.com:80/wd/hub' % (\n            self.credentials['username'],\n            self.credentials['api-key'])\n        self.selenium = webdriver.Remote(command_executor=executor,\n>                                        desired_capabilities=capabilities)\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x101b695d0>\ncommand_executor = 'http://mozilla:1163a374-5bb1-4dc3-bc0a-6f9b983763c7@ondemand.saucelabs.com:80/wd/hub'\ndesired_capabilities = {'browserName': 'android', 'build': 'jenkins-marketplace.stage.mobile.saucelabs-1081', 'name': 'tests.mobile.test_search.TestSearch.test_searching_with_no_matching_results', 'platform': 'linux', ...}\nbrowser_profile = None, proxy = None, keep_alive = False\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n        desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False):\n        \"\"\"\n            Create a new driver that will issue commands using the wire protocol.\n    \n            :Args:\n             - command_executor - Either a command.CommandExecutor object or a string that specifies the URL of a remote server to send commands to.\n             - desired_capabilities - Dictionary holding predefined values for starting a browser\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.  Only used if Firefox is requested.\n            \"\"\"\n        if desired_capabilities is None:\n            raise WebDriverException(\"Desired Capabilities can't be None\")\n        if not isinstance(desired_capabilities, dict):\n            raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n        if proxy is not None:\n            proxy.add_to_capabilities(desired_capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n>       self.start_session(desired_capabilities, browser_profile)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x101b695d0>\ndesired_capabilities = {'browserName': 'android', 'build': 'jenkins-marketplace.stage.mobile.saucelabs-1081', 'name': 'tests.mobile.test_search.TestSearch.test_searching_with_no_matching_results', 'platform': 'linux', ...}\nbrowser_profile = None\n\n    def start_session(self, desired_capabilities, browser_profile=None):\n        \"\"\"\n            Creates a new session with the desired capabilities.\n    \n            :Args:\n             - browser_name - The name of the browser to request.\n             - version - Which browser version to request.\n             - platform - Which platform to request the browser on.\n             - javascript_enabled - Whether the new session should support JavaScript.\n             - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n            \"\"\"\n        if browser_profile:\n            desired_capabilities['firefox_profile'] = browser_profile.encoded\n        response = self.execute(Command.NEW_SESSION, {\n>           'desiredCapabilities': desired_capabilities,\n        })\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x101b695d0>\ndriver_command = 'newSession'\nparams = {'desiredCapabilities': {'browserName': 'android', 'build': 'jenkins-marketplace.stage.mobile.saucelabs-1081', 'name': 'tests.mobile.test_search.TestSearch.test_searching_with_no_matching_results', 'platform': 'linux', ...}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x101b69ed0>\nresponse = {'status': 404, 'value': 'ERROR Job 6b90ca71f4e64e22bb5860b9bbe9b507 is not in progress. It may have recently finished, or experienced an error. You can learn more at https://saucelabs.com/jobs/6b90ca71f4e64e22bb5860b9bbe9b507'}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n>           raise exception_class(value)\nE           WebDriverException: Message: 'ERROR Job 6b90ca71f4e64e22bb5860b9bbe9b507 is not in progress. It may have recently finished, or experienced an error. You can learn more at https://saucelabs.com/jobs/6b90ca71f4e64e22bb5860b9bbe9b507'\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:136: WebDriverException"}], "passed": [], "test_name": "test_searching_with_no_matching_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_switch_between_new_and_popular_tab/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x10cd88128>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10cd76098>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10cd486d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10cd486d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x103b38878>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103b52050>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103ae6e50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103ae6e50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x1120257e8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x112025a28>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x112026710>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x112026710>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_switch_between_new_and_popular_tab"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_reviews_section/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x1076243f8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x107624b90>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10761f190>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10761f190>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x103a36fc8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x103a36638>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103a1e910>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x103a1e910>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x1098a8830>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1098a8998>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10988f990>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10988f990>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_reviews_section"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "condition: True: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.mobile.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: condition: True"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}, {"group": "Firefox OS", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_add_review/TestMarketplaceAddReview/test_add_review/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "failure", "detail": "test failure: None"}], "passed": [], "test_name": "test_add_review"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_search_and_install_app.py\", line 47, in test_search_and_install_app\n    self.assertEqual('%s installed' % self.app_name, marketplace.install_notification_message)\nAssertionError: u'Loqui IM installed' != u'Loqui IM download stopped'\n- Loqui IM installed\n+ Loqui IM download stopped\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_and_install_app/TestSearchMarketplaceAndInstallApp/test_search_and_install_app/", "failed": [], "passed": [], "test_name": "test_search_and_install_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_login/TestMarketplaceFeedback/test_marketplace_feedback_user/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_user"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_anonymous/TestMarketplaceFeedback/test_marketplace_feedback_anonymous/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_anonymous"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_login/TestMarketplaceLogin/test_login_marketplace/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_login_marketplace"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_without_connectivity/TestMarketplaceWithoutConnectivity/test_marketplace_without_connectivity/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_without_connectivity"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_purchase_app.py\", line 33, in test_purchase_app\n    payment = details_page.tap_purchase_button()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/app_details.py\", line 51, in tap_purchase_button\n    return Payment(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/payment/app.py\", line 28, in __init__\n    self.switch_to_payment_frame()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/payment/app.py\", line 32, in switch_to_payment_frame\n    self.wait_for_element_present(*self._payment_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element #trustedui-frame-container > iframe not found before timeout\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_purchase_app/TestMarketplacePurchaseApp/test_purchase_app/", "failed": [], "passed": [], "test_name": "test_purchase_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_for_paid_app/TestSearchMarketplacePaidApp/test_search_paid_app/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_search_paid_app"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_create_confirm_pin.py\", line 34, in test_create_confirm_pin\n    payment.create_pin(PIN)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/payment/app.py\", line 41, in create_pin\n    self.wait_for_element_displayed(*self._create_pin_form_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 69, in wait_for_element_displayed\n    raise TimeoutException('Element %s not present before timeout' % locator)\nTimeoutException: TimeoutException: Element form[action=\"/mozpay/pin/create\"] not present before timeout\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_create_confirm_pin/TestMarketplaceCreateConfirmPin/test_create_confirm_pin/", "failed": [], "passed": [], "test_name": "test_create_confirm_pin"}]}, {"group": "Desktop", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_application_page_contains_proper_objects/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_application_page_contains_proper_objects"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_the_search_tag_is_present_in_the_search_results/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_the_search_tag_is_present_in_the_search_results"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_date/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_date"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_open_view_all_link_while_popular_tab_selected/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_open_view_all_link_while_popular_tab_selected"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_clicking_on_featured_app_loads_details_page/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_clicking_on_featured_app_loads_details_page"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1099a48c0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1099a48c0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x1099a4710>\nmanifest_url = 'http://1405011151.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x1099a4368>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011151.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10ae54cb0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10ae54cb0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10ae547e8>\nmanifest_url = 'http://1405011015.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10ae54200>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011015.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "We currently don't have the option for changing the language in Fireplace: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/tests/desktop/consumer_pages/test_users_account.py:76: Skipped: We currently don't have the option for changing the language in Fireplace"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_that_checks_changing_language/", "failed": [], "passed": [], "test_name": "test_that_checks_changing_language"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "failure", "detail": "test failure: self = <tests.desktop.developer_hub.test_developer_hub_submit_apps.TestDeveloperHubSubmitApps instance at 0x1092a87e8>\nmozwebqa_devhub_logged_in = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1099392d8>\n\n    @pytest.mark.credentials\n    def test_hosted_app_submission(self, mozwebqa_devhub_logged_in):\n        if '-dev.allizom' in mozwebqa_devhub_logged_in.base_url:\n            env = 'dev'\n        else:\n            env = 'stage'\n    \n        app = MockApplication(env)\n    \n        dev_home = Home(mozwebqa_devhub_logged_in)\n    \n        dev_agreement = dev_home.click_submit_new_app()\n    \n        \"\"\"Agree with the developer agreement and continue if it was not accepted\n            in a previous app submit\"\"\"\n        manifest_validation_form = dev_agreement.click_continue()\n    \n        # select device type\n        for device in app['device_type']:\n            if device[1]:\n                manifest_validation_form.device_type(device[0])\n    \n        # submit the app manifest url and validate it\n        manifest_validation_form.type_app_manifest_url(app['url'])\n>       manifest_validation_form.click_validate()\n\ntests/desktop/developer_hub/test_developer_hub_submit_apps.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.submit_app.Validation object at 0x10998cb90>\n\n    def click_validate(self):\n        self.selenium.find_element(*self._app_validate_button_locator).click()\n>       self.wait_for_app_validation()\n\npages/desktop/developer_hub/submit_app.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.submit_app.Validation object at 0x10998cb90>\n\n    def wait_for_app_validation(self):\n        WebDriverWait(self.selenium, self.timeout).until(lambda s:\n                                                         self.is_element_visible(*self._app_validation_status_locator),\n>                                                        'Validation process timed out')\n\npages/desktop/developer_hub/submit_app.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x1092bdd10>\nmethod = <function <lambda> at 0x1092d8a28>\nmessage = 'Validation process timed out'\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message: 'Validation process timed out'\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_hosted_app_submission"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_editing_user_profile/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_editing_user_profile"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_in_consumer_pages/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_in_consumer_pages"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_anonymous_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_anonymous_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_api_submit/TestAPI/test_assert_that_a_app_can_be_added_and_deleted_via_the_api/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "failure", "detail": "test failure: self = <tests.desktop.developer_hub.test_api_submit.TestAPI instance at 0x1098d0248>\nmozwebqa_devhub_logged_in = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1098d0128>\n\n    @pytest.mark.credentials\n    def test_assert_that_a_app_can_be_added_and_deleted_via_the_api(self, mozwebqa_devhub_logged_in):\n        mock_app = MockApplication()  # generate mock app\n    \n        # init API client\n        mk_api = MarketplaceAPI.get_client(mozwebqa_devhub_logged_in.base_url,\n                                           mozwebqa_devhub_logged_in.credentials)\n    \n>       mk_api.submit_app(mock_app)  # submit app\n\ntests/desktop/developer_hub/test_api_submit.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10aa11c68>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10aa11c68>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10aa11950>\nmanifest_url = 'http://1405010988.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10aa11098>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405010988.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.developer_hub.test_api_submit.TestAPI instance at 0x10b49e098>\nmozwebqa_devhub_logged_in = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10b49e7a0>\n\n    @pytest.mark.credentials\n    def test_assert_that_a_app_can_be_added_and_deleted_via_the_api(self, mozwebqa_devhub_logged_in):\n        mock_app = MockApplication()  # generate mock app\n    \n        # init API client\n        mk_api = MarketplaceAPI.get_client(mozwebqa_devhub_logged_in.base_url,\n                                           mozwebqa_devhub_logged_in.credentials)\n    \n>       mk_api.submit_app(mock_app)  # submit app\n\ntests/desktop/developer_hub/test_api_submit.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10b4a14d0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10b4a14d0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10b4a19e0>\nmanifest_url = 'http://1405010661.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10b4a1ef0>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405010661.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_assert_that_a_app_can_be_added_and_deleted_via_the_api"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_header_has_expected_items/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_header_has_expected_items"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1092a55f0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1092a55f0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x1092a5830>\nmanifest_url = 'http://1405011506.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x1092a5b00>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011506.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10b4c74d0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10b4c74d0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10b4c7ef0>\nmanifest_url = 'http://1405011767.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10b4c7a70>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011767.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "Purchase app option is currently not available for desktop environment: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Purchase app option is currently not available for desktop environment"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_purchase_app/TestPurchaseApp/test_that_purchases_an_app_without_pre_auth_and_requests_a_refund/", "failed": [], "passed": [], "test_name": "test_that_purchases_an_app_without_pre_auth_and_requests_a_refund"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_deletion_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_deletion_of_a_review"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_opening_every_category_page_from_categories_section/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_opening_every_category_page_from_categories_section"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_support_information_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_support_information_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10998e680>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10998e680>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10998eb90>\nmanifest_url = 'http://1405011232.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10998ee18>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011232.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_support_information_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10ae6f518>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10ae6f518>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10ae6fa28>\nmanifest_url = 'http://1405011183.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10ae6fcb0>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011183.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_support_information_for_a_free_app"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_editing_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_editing_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_deletes_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_deletes_app'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1099a4ab8>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1099a4ab8>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x1099a4d40>\nmanifest_url = 'http://1405011070.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x1099a4f38>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011070.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_deletes_app'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10b49ed88>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10b49ed88>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10b49e950>\nmanifest_url = 'http://1405010846.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10b472128>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405010846.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_deletes_app"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_open_view_all_link_while_new_tab_selected/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_open_view_all_link_while_new_tab_selected"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10974db48>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10974db48>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10974d1b8>\nmanifest_url = 'http://1405011320.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10974d0e0>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011320.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10b386518>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10b386518>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10b3864d0>\nmanifest_url = 'http://1405011395.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10b386200>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011395.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "xfail-marked test passes unexpectedly: None"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_can_be_added/", "failed": [], "passed": [], "test_name": "test_that_a_screenshot_can_be_added"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_checks_search_with_foreign_characters/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_checks_search_with_foreign_characters"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_create_new_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_create_new_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_device_types_for_hosted_apps/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_device_types_for_hosted_apps'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1099b5830>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1099b5830>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x1099b5f38>\nmanifest_url = 'http://1405011411.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x1099b5a70>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011411.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_device_types_for_hosted_apps'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10b5ab8c0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10b5ab8c0>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10b5ab098>\nmanifest_url = 'http://1405011587.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10b5ab248>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011587.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_device_types_for_hosted_apps"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_searching_with_empty_field_using_submit_returns_results/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_searching_with_empty_field_using_submit_returns_results"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_categories_section/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_categories_section"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Rating]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Rating]"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_signed_in_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_signed_in_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_an_icon_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_an_icon_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1099ae6c8>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x1099ae6c8>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x1099aecf8>\nmanifest_url = 'http://1405011588.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x1099ae758>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011588.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_an_icon_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def free_app(request):\n        \"\"\"Return a free app created via the Marketplace API, and automatically delete the app after the test.\"\"\"\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        request.app = MockApplication()\n        api = MarketplaceAPI.get_client(mozwebqa.base_url,\n                                        mozwebqa.credentials)\n>       api.submit_app(request.app)\n\nconftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10ae64758>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def submit_app(self, app):\n    \n        #validate app manifest\n>       self._validate_manifest(app)\n\nmocks/marketplace_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mocks.marketplace_api.MarketplaceAPI instance at 0x10ae64758>\napp = {'submission_id': 'Subm-381', 'last_name': 'test', 'pitch_app': '', 'device_ty...fest.webapp', 'make_public': True, 'upsell': False, 'security_code': 'M58DLUJ'}\n\n    def _validate_manifest(self, app):\n>       response = self._client.validate_manifest(app['url'])\n\nmocks/marketplace_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.client.Client instance at 0x10ae64710>\nmanifest_url = 'http://1405011955.testmanifest.com/manifest.webapp'\n\n    def validate_manifest(self, manifest_url):\n        \"\"\"Order manifest validation\n    \n            :returns: dict with an ``id`` to check the result\n            \"\"\"\n        # there is a bug request to make this synchronous on Marketplace side\n        # this will return the same as :method:`get_manifest_validation_result`\n        return self.conn.fetch('POST',\n                               self.url('validate'),\n>                              {'manifest': manifest_url})\n\n.env/lib/python2.7/site-packages/marketplace/client.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marketplace.connection.Connection instance at 0x10ae64680>\nmethod = 'POST'\nurl = 'https://marketplace-dev.allizom.org:443/api/v1/apps/validation/'\ndata = {'manifest': 'http://1405011955.testmanifest.com/manifest.webapp'}\nexpected_status_code = None\n\n    def fetch(self, method, url, data=None, expected_status_code=None):\n        \"\"\"Prepare the headers, encode data, call API and provide\n            data it returns\n            \"\"\"\n        kwargs = self.prepare_request(method, url, data)\n        log.debug(json.dumps(kwargs))\n        response = getattr(requests, method.lower())(url, **kwargs)\n        log.debug(json.dumps(response.content))\n        if response.status_code >= 400:\n>           response.raise_for_status()\n\n.env/lib/python2.7/site-packages/marketplace/connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>\n\n    def raise_for_status(self):\n        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           HTTPError: 500 Server Error: INTERNAL SERVER ERROR\n\n.env/lib/python2.7/site-packages/requests/models.py:683: HTTPError"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_that_an_icon_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x11069a878>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1106893f8>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        # delete the review before getting started\n        self.mk_api.delete_app_review(self.review_id)\n    \n        # so that teardown does not try to delete the review\n        del self.review_id\n    \n        # Step 1 - Login into Marketplace\n        mock_review = MockReview()\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        home_page.login(user=\"default\")\n        Assert.true(home_page.is_the_current_page)\n    \n        # Step 2 - Search for the test app and go to its details page\n        search_page = home_page.header.search(self.app_name)\n        details_page = search_page.results[0].click_name()\n        Assert.true(details_page.is_the_current_page)\n    \n        Assert.true(details_page.is_write_review_button_visible)\n        Assert.equal(details_page.write_review_button, \"Write a Review\")\n    \n        # Step 3 - Write a review\n        add_review_box = details_page.click_write_review()\n        details_page = add_review_box.write_a_review(mock_review['rating'], mock_review['body'])\n    \n        # Step 4 - Check review\n>       details_page.wait_notification_box_visible()\n\ntests/desktop/consumer_pages/test_reviews.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.details.Details object at 0x1106d76d0>\n\n    def wait_notification_box_visible(self):\n>       self.wait_for_element_visible(*self._notification_locator)\n\npages/desktop/consumer_pages/base.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.details.Details object at 0x1106d76d0>\nlocator = ('id', 'notification'), count = 180\n\n    def wait_for_element_visible(self, *locator):\n        count = 0\n        while not self.is_element_visible(*locator):\n            time.sleep(1)\n            count += 1\n            if count == self.timeout:\n>               raise Exception(':'.join(locator) + \" is not visible\")\nE               Exception: id:notification is not visible\n\npages/page.py:76: Exception"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_packaged_app_submission/", "failed": [{"jobs": ["marketplace.dev.developer_hub"], "result": "failure", "detail": "test failure: self = <tests.desktop.developer_hub.test_developer_hub_submit_apps.TestDeveloperHubSubmitApps instance at 0x1099901b8>\nmozwebqa_devhub_logged_in = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1098caf80>\n\n    @pytest.mark.credentials\n    def test_packaged_app_submission(self, mozwebqa_devhub_logged_in):\n        if '-dev.allizom' in mozwebqa_devhub_logged_in.base_url:\n            env = 'dev'\n        else:\n            env = 'stage'\n    \n        app = MockApplication(env, app_type='packaged')\n    \n        dev_home = Home(mozwebqa_devhub_logged_in)\n    \n        dev_agreement = dev_home.click_submit_new_app()\n    \n        \"\"\"Agree with the developer agreement and continue if it was not accepted\n            in a previous app submit\"\"\"\n        manifest_validation_form = dev_agreement.click_continue()\n    \n        # select device type\n        for device in app['device_type']:\n            if device[1]:\n                manifest_validation_form.device_type(device[0])\n    \n        # select app type\n        manifest_validation_form.app_type(app['app_type'])\n    \n        # submit the hosted app and validate it\n        manifest_validation_form.upload_file(app['app_path'])\n        manifest_validation_form.wait_for_app_validation()\n    \n        Assert.true(manifest_validation_form.app_validation_status,\n>                   msg=manifest_validation_form.app_validation_message)\n\ntests/desktop/developer_hub/test_developer_hub_submit_apps.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>, first = False\nmsg = {'errors': u'Received an empty response from the server; status: 500', 'status': u'Your app failed validation with 1 error.'}\n\n    @classmethod\n    def true(self, first, msg=None):\n        \"\"\"\n            Asserts that what is given is equal to True\n    \n            :Args:\n             - First object to be tested\n             - Message that will be printed if it fails\n            \"\"\"\n    \n>       assert bool(first) is True, msg\nE       AssertionError: {'status': u'Your app failed validation with 1 error.', 'errors': u'Received an empty response from the server; status: 500'}\n\n.env/lib/python2.7/site-packages/unittestzero.py:79: AssertionError"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.developer_hub.test_developer_hub_submit_apps.TestDeveloperHubSubmitApps instance at 0x10ae55368>\nmozwebqa_devhub_logged_in = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ae59710>\n\n    @pytest.mark.credentials\n    def test_packaged_app_submission(self, mozwebqa_devhub_logged_in):\n        if '-dev.allizom' in mozwebqa_devhub_logged_in.base_url:\n            env = 'dev'\n        else:\n            env = 'stage'\n    \n        app = MockApplication(env, app_type='packaged')\n    \n        dev_home = Home(mozwebqa_devhub_logged_in)\n    \n        dev_agreement = dev_home.click_submit_new_app()\n    \n        \"\"\"Agree with the developer agreement and continue if it was not accepted\n            in a previous app submit\"\"\"\n        manifest_validation_form = dev_agreement.click_continue()\n    \n        # select device type\n        for device in app['device_type']:\n            if device[1]:\n                manifest_validation_form.device_type(device[0])\n    \n        # select app type\n        manifest_validation_form.app_type(app['app_type'])\n    \n        # submit the hosted app and validate it\n        manifest_validation_form.upload_file(app['app_path'])\n        manifest_validation_form.wait_for_app_validation()\n    \n        Assert.true(manifest_validation_form.app_validation_status,\n>                   msg=manifest_validation_form.app_validation_message)\n\ntests/desktop/developer_hub/test_developer_hub_submit_apps.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>, first = False\nmsg = {'errors': u'Received an empty response from the server; status: 500', 'status': u'Your app failed validation with 1 error.'}\n\n    @classmethod\n    def true(self, first, msg=None):\n        \"\"\"\n            Asserts that what is given is equal to True\n    \n            :Args:\n             - First object to be tested\n             - Message that will be printed if it fails\n            \"\"\"\n    \n>       assert bool(first) is True, msg\nE       AssertionError: {'status': u'Your app failed validation with 1 error.', 'errors': u'Received an empty response from the server; status: 500'}\n\n.env/lib/python2.7/site-packages/unittestzero.py:79: AssertionError"}], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_packaged_app_submission"}, {"skipped": {"jobs": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 1035692 - [dev] 500 Internal Server Error returned when trying to submit payment options for a hosted app"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_paid_app_submission/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_hosted_paid_app_submission"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_featured_application_section/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_featured_application_section"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_name/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_name"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_gallery_section_tabs/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_gallery_section_tabs"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Search suggestions not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Search suggestions not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Relevancy]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Relevancy]"}]}]}