{"last_updated": "2014-10-31 04:30:01.834492", "results": [{"group": "Android", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_viewing_reviews_clicking_back_goes_to_app_page/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_after_viewing_reviews_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_with_empty_field_returns_results/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_searching_with_empty_field_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x1033c4560>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1033c4c68>\n\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        app_name = home_page.app_under_test\n    \n        # Login\n        settings_page = home_page.header.click_settings()\n>       settings_page.login(user='default')\n\ntests/mobile/test_reviews.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.account_settings.AccountSettings object at 0x1033da590>\nuser = 'default'\n\n    def login(self, user=None):\n        fxa = self.click_sign_in()\n>       fxa.login_user(user)\n\npages/mobile/account_settings.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x1033da1d0>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x1033da1d0>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x1033da810>\nmethod = <function <lambda> at 0x1033b8758>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.mobile.saucelabs"], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_that_verifies_categories_menu/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_verifies_categories_menu"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_writing_a_review_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x110a089e0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110a08d40>\n\n    def test_that_after_writing_a_review_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\"Logged out, click \"Write a Review\" on an app page, sign in, submit a review,\n            click Back, test that the current page is the app page.\n            \"\"\"\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        app_name = home_page.app_under_test\n    \n        # Search for an app and go to it's details page.\n        search_page = home_page.search_for(app_name)\n        details_page = search_page.results[0].click_app()\n    \n        Assert.true(details_page.is_product_details_visible)\n    \n        # Write a review.\n        review_box = details_page.click_write_review()\n>       details_page.login_with_user_from_other_pages(user=\"default\")\n\ntests/mobile/test_reviews.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.details.Details object at 0x110a1e790>, user = 'default'\n\n    def login_with_user_from_other_pages(self, user=\"default\"):\n        from pages.fxa import FirefoxAccounts\n        fxa = FirefoxAccounts(self.testsetup)\n>       fxa.login_user(user)\n\npages/mobile/details.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x110a4f310>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x110a4f310>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x110a1e510>\nmethod = <function <lambda> at 0x110a46848>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.mobile.saucelabs"], "test_name": "test_that_after_writing_a_review_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_returns_results/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_that_searching_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_details_page_for_an_app/", "failed": [{"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x1089255a8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1089253b0>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        search_term = self._take_first_popular_app_name(mozwebqa)\n        details_page = home_page.search_and_click_on_app(search_term)\n    \n        details_page.click_more_button()\n    \n        # The verifications required by the testcase\n        Assert.true(details_page.header.is_back_button_visible)\n        Assert.true(search_term in details_page.title)\n        Assert.true(details_page.is_author_visible)\n        Assert.true(details_page.is_app_icon_present)\n>       Assert.true(details_page.is_rating_visible)\n\ntests/mobile/test_details_page.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.details.Details object at 0x10884c550>\n\n    @property\n    def is_rating_visible(self):\n>       return self.is_element_visible(*self._rating_header_locator)\n\npages/mobile/details.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.details.Details object at 0x10884c550>\nlocator = ('class name', 'rating_link')\n\n    def is_element_visible(self, *locator):\n        try:\n>           return self._selenium_root.find_element(*locator).is_displayed()\n\npages/page.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1084e4b10>\nby = 'class name', value = 'rating_link'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n            'Private' method used by the find_element_by_* methods.\n    \n            :Usage:\n                Use the corresponding find_element_by_* instead of this.\n    \n            :rtype: WebElement\n            \"\"\"\n        if not By.is_valid(by) or not isinstance(value, str):\n            raise InvalidSelectorException(\"Invalid locator values passed in\")\n    \n        return self.execute(Command.FIND_ELEMENT,\n>                            {'using': by, 'value': value})['value']\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:662: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x1084e4b10>\ndriver_command = 'findElement'\nparams = {'sessionId': u'bf6200c751ed4bc1b8de799fc794abcd', 'using': 'class name', 'value': 'rating_link'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10884cb50>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 15764847, u'sessionId': u'bf6200c751ed4bc1b8de799fc794abcd', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:\n            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: Error communicating with the remote browser. It may have died.\nE       Build info: version: '2.39.0', revision: 'ff23eac', time: '2013-12-16 16:11:15'\nE       System info: host: 'lxchef-v1', ip: '127.0.1.1', os.name: 'Linux', os.arch: 'i386', os.version: '3.13.0-32-generic', java.version: '1.6.0_33'\nE       Driver info: driver.version: EventFiringWebDriver\nE       Stacktrace:\nE           at org.openqa.selenium.remote.RemoteWebDriver.execute (RemoteWebDriver.java:548)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElement (RemoteWebDriver.java:307)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElementByClassName (RemoteWebDriver.java:388)\nE           at org.openqa.selenium.By$ByClassName.findElement (By.java:393)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElement (RemoteWebDriver.java:299)\nE           at sun.reflect.NativeMethodAccessorImpl.invoke0 (NativeMethodAccessorImpl.java:-2)\nE           at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:57)\nE           at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\nE           at java.lang.reflect.Method.invoke (Method.java:622)\nE           at org.openqa.selenium.support.events.EventFiringWebDriver$2.invoke (EventFiringWebDriver.java:101)\nE           at com.sun.proxy.$Proxy2.findElement (None:-1)\nE           at org.openqa.selenium.support.events.EventFiringWebDriver.findElement (EventFiringWebDriver.java:184)\nE           at org.openqa.selenium.remote.server.handler.FindElement.call (FindElement.java:47)\nE           at org.openqa.selenium.remote.server.handler.FindElement.call (FindElement.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:334)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:166)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1146)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:615)\nE           at java.lang.Thread.run (Thread.java:701)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:166: WebDriverException"}], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_details_page_for_an_app"}, {"skipped": {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "skipped", "detail": "expected test failure: Issue 500 Login tests currently don't work on Saucelabs"}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_login_and_logout/", "failed": [{"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x106456638>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x106456b00>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        settings_page = home_page.header.click_settings()\n>       settings_page.login(user=\"default\")\n\ntests/mobile/test_users_account.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.account_settings.AccountSettings object at 0x106441110>\nuser = 'default'\n\n    def login(self, user=None):\n        fxa = self.click_sign_in()\n>       fxa.login_user(user)\n\npages/mobile/account_settings.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x106441150>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x106441150>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x106441cd0>\nmethod = <function <lambda> at 0x10644c8c0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.mobile.saucelabs"], "test_name": "test_user_can_login_and_logout"}, {"skipped": {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "skipped", "detail": "expected test failure: Issue 500 Login tests currently don't work on Saucelabs"}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_go_back_from_settings_page/", "failed": [{"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x1092203f8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1081c5ea8>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        settings_page = home_page.header.click_settings()\n>       settings_page.login(user=\"default\")\n\ntests/mobile/test_users_account.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.account_settings.AccountSettings object at 0x10920c350>\nuser = 'default'\n\n    def login(self, user=None):\n        fxa = self.click_sign_in()\n>       fxa.login_user(user)\n\npages/mobile/account_settings.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10920c690>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10920c690>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x10920c390>\nmethod = <function <lambda> at 0x1081c1c08>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.mobile.saucelabs"], "test_name": "test_user_can_go_back_from_settings_page"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_searching_with_no_matching_results/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_searching_with_no_matching_results"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_switch_between_new_and_popular_tab/", "failed": [], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_switch_between_new_and_popular_tab"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_reviews_section/", "failed": [{"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x1020a7e18>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1020a77a0>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        # click first app and load its Details Page\n        search_term = self._take_first_popular_app_name(mozwebqa)\n        details_page = home_page.search_and_click_on_app(search_term)\n    \n        # This takes the number of reviews on the details page and based on that number it treats 3 different scenarios:\n        # when the app has reviews, when it has 1 review and when the app isn't rated.\n        if details_page.is_app_rated:\n>           if details_page.reviews_count >= 2:\n\ntests/mobile/test_details_page.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.details.Details object at 0x10207b7d0>\n\n    @property\n    def reviews_count(self):\n>       reviews_count = self.selenium.find_element(*self._rating_count_locator).text\n\npages/mobile/details.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10207b450>\nby = 'css selector', value = '.average-rating > span:nth-child(1)'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n            'Private' method used by the find_element_by_* methods.\n    \n            :Usage:\n                Use the corresponding find_element_by_* instead of this.\n    \n            :rtype: WebElement\n            \"\"\"\n        if not By.is_valid(by) or not isinstance(value, str):\n            raise InvalidSelectorException(\"Invalid locator values passed in\")\n    \n        return self.execute(Command.FIND_ELEMENT,\n>                            {'using': by, 'value': value})['value']\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:662: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver object at 0x10207b450>\ndriver_command = 'findElement'\nparams = {'sessionId': u'd905aa72b1984c12b351cfc625f3e6ed', 'using': 'css selector', 'value': '.average-rating > span:nth-child(1)'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n            Sends a command to be executed by a command.CommandExecutor.\n    \n            :Args:\n             - driver_command: The name of the command to execute as a string.\n             - params: A dictionary of named parameters to send with the command.\n    \n            :Returns:\n              The command's JSON response loaded into a dictionary object.\n            \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10207b690>\nresponse = {u'class': u'org.openqa.selenium.remote.Response', u'hCode': 28674204, u'sessionId': u'd905aa72b1984c12b351cfc625f3e6ed', u'state': u'unhandled error', ...}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response['status']\n        if status == ErrorCode.SUCCESS:\n            return\n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        message = ''\n        if 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:\n            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: Error communicating with the remote browser. It may have died.\nE       Build info: version: '2.39.0', revision: 'ff23eac', time: '2013-12-16 16:11:15'\nE       System info: host: 'lxchef-v1', ip: '127.0.1.1', os.name: 'Linux', os.arch: 'i386', os.version: '3.13.0-32-generic', java.version: '1.6.0_33'\nE       Driver info: driver.version: EventFiringWebDriver\nE       Stacktrace:\nE           at org.openqa.selenium.remote.RemoteWebDriver.execute (RemoteWebDriver.java:548)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElement (RemoteWebDriver.java:307)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElementByCssSelector (RemoteWebDriver.java:396)\nE           at org.openqa.selenium.By$ByCssSelector.findElement (By.java:432)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElement (RemoteWebDriver.java:299)\nE           at sun.reflect.NativeMethodAccessorImpl.invoke0 (NativeMethodAccessorImpl.java:-2)\nE           at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:57)\nE           at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\nE           at java.lang.reflect.Method.invoke (Method.java:622)\nE           at org.openqa.selenium.support.events.EventFiringWebDriver$2.invoke (EventFiringWebDriver.java:101)\nE           at com.sun.proxy.$Proxy2.findElement (None:-1)\nE           at org.openqa.selenium.support.events.EventFiringWebDriver.findElement (EventFiringWebDriver.java:184)\nE           at org.openqa.selenium.remote.server.handler.FindElement.call (FindElement.java:47)\nE           at org.openqa.selenium.remote.server.handler.FindElement.call (FindElement.java:1)\nE           at java.util.concurrent.FutureTask$Sync.innerRun (FutureTask.java:334)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:166)\nE           at org.openqa.selenium.remote.server.DefaultSession$1.run (DefaultSession.java:170)\nE           at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1146)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:615)\nE           at java.lang.Thread.run (Thread.java:701)\n\n.env/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:166: WebDriverException"}], "passed": ["marketplace.dev.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "test_name": "test_reviews_section"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "condition: True: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.mobile.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: condition: True"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}, {"group": "Firefox OS", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_add_review/TestMarketplaceAddReview/test_add_review/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "error", "detail": "test error: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 163, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_add_review.py\", line 23, in test_add_review\n    marketplace.login(user)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 63, in login\n    persona = settings.tap_sign_in()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 33, in tap_sign_in\n    return Persona(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/persona/app.py\", line 33, in __init__\n    self.wait_for_element_present(*self._persona_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element iframe.screen[data-url*='persona.org/sign_in#NATIVE'] not found before timeout\n"}], "passed": [], "test_name": "test_add_review"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_search_and_install_app.py\", line 27, in test_search_and_install_app\n    self.app_name = marketplace.popular_apps[0].name\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 87, in popular_apps\n    self.show_popular_apps()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 128, in show_popular_apps\n    self.marionette.find_element(*self._popular_apps_tab_locator).tap()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette.py\", line 1183, in find_element\n    response = self._send_message('findElement', 'value', **kwargs)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette.py\", line 612, in _send_message\n    self._handle_error(response)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette.py\", line 633, in _handle_error\n    raise NoSuchElementException(message=message, status=status, stacktrace=stacktrace)\nNoSuchElementException: NoSuchElementException: Unable to locate element: #gallery .tabs a:nth-child(1)\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_and_install_app/TestSearchMarketplaceAndInstallApp/test_search_and_install_app/", "failed": [], "passed": [], "test_name": "test_search_and_install_app"}, {"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_login/TestMarketplaceFeedback/test_marketplace_feedback_user/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "error", "detail": "test error: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 163, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_feedback_login.py\", line 21, in test_marketplace_feedback_user\n    marketplace.login(user)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 63, in login\n    persona = settings.tap_sign_in()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 33, in tap_sign_in\n    return Persona(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/persona/app.py\", line 33, in __init__\n    self.wait_for_element_present(*self._persona_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element iframe.screen[data-url*='persona.org/sign_in#NATIVE'] not found before timeout\n"}], "passed": [], "test_name": "test_marketplace_feedback_user"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_anonymous/TestMarketplaceFeedback/test_marketplace_feedback_anonymous/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_anonymous"}, {"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_login/TestMarketplaceLogin/test_login_marketplace/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "error", "detail": "test error: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 163, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_login.py\", line 26, in test_login_marketplace\n    persona = settings.tap_sign_in()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 33, in tap_sign_in\n    return Persona(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/persona/app.py\", line 33, in __init__\n    self.wait_for_element_present(*self._persona_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element iframe.screen[data-url*='persona.org/sign_in#NATIVE'] not found before timeout\n"}], "passed": [], "test_name": "test_login_marketplace"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_without_connectivity/TestMarketplaceWithoutConnectivity/test_marketplace_without_connectivity/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_without_connectivity"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_purchase_app.py\", line 28, in test_purchase_app\n    marketplace.login(user)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 63, in login\n    persona = settings.tap_sign_in()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 33, in tap_sign_in\n    return Persona(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/persona/app.py\", line 33, in __init__\n    self.wait_for_element_present(*self._persona_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element iframe.screen[data-url*='persona.org/sign_in#NATIVE'] not found before timeout\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_purchase_app/TestMarketplacePurchaseApp/test_purchase_app/", "failed": [], "passed": [], "test_name": "test_purchase_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_for_paid_app/TestSearchMarketplacePaidApp/test_search_paid_app/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_search_paid_app"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_create_confirm_pin.py\", line 27, in test_create_confirm_pin\n    marketplace.login(user)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 63, in login\n    persona = settings.tap_sign_in()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/regions/settings.py\", line 33, in tap_sign_in\n    return Persona(self.marionette)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/persona/app.py\", line 33, in __init__\n    self.wait_for_element_present(*self._persona_frame_locator)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/gaiatest_v1.3-0.2-py2.7.egg/gaiatest/apps/base.py\", line 40, in wait_for_element_present\n    'Element %s not found before timeout' % locator)\nTimeoutException: TimeoutException: Element iframe.screen[data-url*='persona.org/sign_in#NATIVE'] not found before timeout\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_create_confirm_pin/TestMarketplaceCreateConfirmPin/test_create_confirm_pin/", "failed": [], "passed": [], "test_name": "test_create_confirm_pin"}]}, {"group": "Desktop", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_application_page_contains_proper_objects/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_application_page_contains_proper_objects"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_the_search_tag_is_present_in_the_search_results/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_the_search_tag_is_present_in_the_search_results"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_date/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_apps_are_sorted_by_date'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x102404790>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x102404b50>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x102404b50>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x1024048d0>\nmethod = <function <lambda> at 0x10139c6e0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_date"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_from_my_apps/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_users_account.TestAccounts instance at 0x10c1db5f0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10d212a28>\n\n    @pytest.mark.credentials\n    @pytest.mark.nondestructive\n    def test_user_can_sign_in_and_sign_out_from_my_apps(self, mozwebqa):\n    \n        settings_page = AccountSettings(mozwebqa)\n        settings_page.go_to_my_apps_page()\n    \n        settings_page.click_account_settings_sign_in()\n>       settings_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_users_account.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.account_settings.AccountSettings object at 0x10d21ab50>\nuser = 'default'\n\n    def login(self, user=None):\n        from pages.fxa import FirefoxAccounts\n        fxa = FirefoxAccounts(self.testsetup)\n>       fxa.login_user(user)\n\npages/desktop/consumer_pages/base.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10d21ac90>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10d21ac90>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x10d21a1d0>\nmethod = <function <lambda> at 0x10c1ab938>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_from_my_apps"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_app_submission/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_hosted_app_submission'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x102432a90>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x102432750>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x102432750>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x102432910>\nmethod = <function <lambda> at 0x10240ccf8>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_hosted_app_submission"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x10136f810>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10136fa10>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10136fa10>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x1012eafd0>\nmethod = <function <lambda> at 0x1011f7c80>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "We currently don't have the option for changing the language in Fireplace: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/tests/desktop/consumer_pages/test_users_account.py:112: Skipped: We currently don't have the option for changing the language in Fireplace"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_that_checks_changing_language/", "failed": [], "passed": [], "test_name": "test_that_checks_changing_language"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_clicking_on_content_rating/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_clicking_on_content_rating"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_deletion_of_a_review/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x105cbee60>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x105cf07e8>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_deletion_of_a_review(self, mozwebqa):\n        \"\"\"\n            https://moztrap.mozilla.org/manage/case/648/\n            \"\"\"\n    \n        self._reviews_setup(mozwebqa)\n    \n        # Step 1 - Login into Marketplace\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        home_page.header.click_sign_in()\n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_reviews.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x105cd16d0>\nuser = 'default'\n\n    def login(self, user=None):\n        from pages.fxa import FirefoxAccounts\n        fxa = FirefoxAccounts(self.testsetup)\n>       fxa.login_user(user)\n\npages/desktop/consumer_pages/base.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x105cd1550>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x105cd1550>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x105cd1fd0>\nmethod = <function <lambda> at 0x105ceaf50>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_that_checks_the_deletion_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_editing_user_profile/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_users_account.TestAccounts instance at 0x10947c4d0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10947c1b8>\n\n    @pytest.mark.credentials\n    def test_editing_user_profile(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n        home_page.header.click_sign_in()\n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_users_account.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10945e8d0>\nuser = 'default'\n\n    def login(self, user=None):\n        from pages.fxa import FirefoxAccounts\n        fxa = FirefoxAccounts(self.testsetup)\n>       fxa.login_user(user)\n\npages/desktop/consumer_pages/base.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10945e850>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10945e850>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x10945e590>\nmethod = <function <lambda> at 0x1094882a8>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_editing_user_profile"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_add_review_after_sign_in_from_details_page/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x10d004248>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10d004320>\n\n    @pytest.mark.credentials\n    def test_add_review_after_sign_in_from_details_page(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        # delete the review before getting started\n        self.mk_api.delete_app_review(self.review_id)\n    \n        # so that teardown does not try to delete the review\n        del self.review_id\n    \n        # Go to Marketplace Home page\n        mock_review = MockReview()\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n        Assert.true(home_page.is_the_current_page)\n    \n        # Search for the test app and go to its details page\n        search_page = home_page.header.search(self.app_name)\n        details_page = search_page.results[0].click_name()\n        Assert.true(details_page.is_the_current_page)\n        Assert.equal(details_page.write_review_button, \"Sign in to Review\")\n    \n        # Login\n        add_review_box = details_page.click_write_review()\n>       details_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_reviews.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.details.Details object at 0x10d03b710>\nuser = 'default'\n\n    def login(self, user=None):\n        from pages.fxa import FirefoxAccounts\n        fxa = FirefoxAccounts(self.testsetup)\n>       fxa.login_user(user)\n\npages/desktop/consumer_pages/base.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10d03b1d0>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10d03b1d0>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x10d03b910>\nmethod = <function <lambda> at 0x10d04bde8>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_add_review_after_sign_in_from_details_page"}, {"skipped": {}, "all_passed": true, "environments": ["prod"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_in_consumer_pages/", "failed": [], "passed": ["marketplace.prod", "marketplace.prod.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_in_consumer_pages"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_anonymous_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_anonymous_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_api_submit/TestAPI/test_assert_that_a_app_can_be_added_and_deleted_via_the_api/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_assert_that_a_app_can_be_added_and_deleted_via_the_api'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x1011fb5d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x101318f50>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x101318f50>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x1011cd6d0>\nmethod = <function <lambda> at 0x10131ced8>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_assert_that_a_app_can_be_added_and_deleted_via_the_api"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_header_has_expected_items/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_header_has_expected_items"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x1013a0890>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x1013a0a10>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x1013a0a10>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x1013a0850>\nmethod = <function <lambda> at 0x101332398>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "Purchase app option is currently not available for desktop environment: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Purchase app option is currently not available for desktop environment"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_purchase_app/TestPurchaseApp/test_that_purchases_an_app_without_pre_auth_and_requests_a_refund/", "failed": [], "passed": [], "test_name": "test_that_purchases_an_app_without_pre_auth_and_requests_a_refund"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "xfail-marked test passes unexpectedly: None"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_opening_every_category_page_from_categories_menu/", "failed": [], "passed": [], "test_name": "test_opening_every_category_page_from_categories_menu"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_from_home_page/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_from_home_page"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_support_information_for_a_free_app/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_editing_support_information_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x10136cf10>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10136ced0>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10136ced0>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x10136cf50>\nmethod = <function <lambda> at 0x101349578>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_support_information_for_a_free_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_editing_of_a_review/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x10f145998>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10f1457a0>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_editing_of_a_review(self, mozwebqa):\n    \n        self._reviews_setup(mozwebqa)\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        # Login into Marketplace\n        home_page.header.click_sign_in()\n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_reviews.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10f14b150>\nuser = 'default'\n\n    def login(self, user=None):\n        from pages.fxa import FirefoxAccounts\n        fxa = FirefoxAccounts(self.testsetup)\n>       fxa.login_user(user)\n\npages/desktop/consumer_pages/base.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10f14b950>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10f14b950>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x10f14bd50>\nmethod = <function <lambda> at 0x10f158488>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_that_checks_the_editing_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_deletes_app/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_deletes_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x1013480d0>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x101348410>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x101348410>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x101348290>\nmethod = <function <lambda> at 0x10131cc08>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_deletes_app"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_basic_info_for_a_free_app/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_basic_info_for_a_free_app'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x10137b290>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10137b810>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10137b810>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x10137b7d0>\nmethod = <function <lambda> at 0x101332578>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_basic_info_for_a_free_app"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_can_be_added/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_a_screenshot_can_be_added'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x101392210>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x101392750>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x101392750>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x101392710>\nmethod = <function <lambda> at 0x101332320>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_a_screenshot_can_be_added"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_from_settings_page/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_from_settings_page"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_checks_search_with_foreign_characters/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_checks_search_with_foreign_characters"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "expected test failure: Need to find a way to create a new account with Fxa"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_create_new_user/", "failed": [], "passed": [], "test_name": "test_create_new_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_device_types_for_hosted_apps/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_required_field_validations_on_device_types_for_hosted_apps'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x101386450>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x1013861d0>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x1013861d0>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x101386190>\nmethod = <function <lambda> at 0x1013327d0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_device_types_for_hosted_apps"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_searching_with_empty_field_using_submit_returns_results/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_searching_with_empty_field_using_submit_returns_results"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Rating]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Rating]"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_signed_in_user/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_details_page.TestDetailsPage instance at 0x10c1dab90>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10c1dafc8>\n\n    @pytest.mark.credentials\n    def test_that_reports_abuse_as_signed_in_user(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        Assert.true(home_page.is_the_current_page)\n        home_page.header.click_sign_in()\n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_details_page.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10b25a790>\nuser = 'default'\n\n    def login(self, user=None):\n        from pages.fxa import FirefoxAccounts\n        fxa = FirefoxAccounts(self.testsetup)\n>       fxa.login_user(user)\n\npages/desktop/consumer_pages/base.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10b25a750>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10b25a750>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x10b25a850>\nmethod = <function <lambda> at 0x10d204b18>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_that_reports_abuse_as_signed_in_user"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_an_icon_cannot_be_added_via_an_invalid_file_format/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_an_icon_cannot_be_added_via_an_invalid_file_format'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x10139fb50>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10139f910>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10139f910>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x10139f810>\nmethod = <function <lambda> at 0x10131c938>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_an_icon_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.stage.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.consumer_pages.test_reviews.TestReviews instance at 0x10fdd81b8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10fd93098>\n\n    @pytest.mark.credentials\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        # delete the review before getting started\n        self.mk_api.delete_app_review(self.review_id)\n    \n        # so that teardown does not try to delete the review\n        del self.review_id\n    \n        # Step 1 - Login into Marketplace\n        mock_review = MockReview()\n        home_page = Home(mozwebqa)\n        home_page.go_to_homepage()\n    \n        home_page.header.click_sign_in()\n>       home_page.login(user=\"default\")\n\ntests/desktop/consumer_pages/test_reviews.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.consumer_pages.home.Home object at 0x10edd6850>\nuser = 'default'\n\n    def login(self, user=None):\n        from pages.fxa import FirefoxAccounts\n        fxa = FirefoxAccounts(self.testsetup)\n>       fxa.login_user(user)\n\npages/desktop/consumer_pages/base.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10edd67d0>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10edd67d0>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x110f25550>\nmethod = <function <lambda> at 0x110e2a230>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.saucelabs"], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_packaged_app_submission/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_packaged_app_submission'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x102411750>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x102411c10>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x102411c10>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x102411ad0>\nmethod = <function <lambda> at 0x10240c578>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_packaged_app_submission"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_nav_menu_tabs/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_nav_menu_tabs"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_categories_menu/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_categories_menu"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Relevancy]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Relevancy]"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_name/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_that_checks_apps_are_sorted_by_name'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x10139e590>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10139e4d0>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x10139e4d0>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x10139fd10>\nmethod = <function <lambda> at 0x10132b8c0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_name"}, {"skipped": {"jobs": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 1053754 - [dev] traceback on setting up payments account for an app"}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_paid_app_submission/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "error", "detail": "test setup failure: request = <FixtureRequest for <Function 'test_hosted_paid_app_submission'>>\n\n    @pytest.fixture(scope='function')\n    def mozwebqa_devhub_logged_in(request):\n        from pages.desktop.developer_hub.home import Home\n        mozwebqa = request.getfuncargvalue('mozwebqa')\n        dev_home = Home(mozwebqa)\n        dev_home.go_to_developers_homepage()\n>       dev_home.login(user=\"default\")\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.desktop.developer_hub.home.Home object at 0x102423b90>\nuser = 'default'\n\n    def login(self, user=\"default\"):\n        fxa = self.header.click_login()\n>       fxa.login_user(user)\n\npages/desktop/developer_hub/base.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x102423950>, user = 'default'\n\n    def login_user(self, user):\n        credentials = isinstance(user, MockUser) and user or self.testsetup.credentials.get(user)\n        self.enter_email(credentials['email'])\n        if self.is_element_present(*self._next_button_locator):\n            self.click_next()\n        self.enter_password(credentials['password'])\n>       self.click_sign_in()\n\npages/fxa.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.fxa.FirefoxAccounts object at 0x102423950>\n\n    def click_sign_in(self):\n        self.selenium.find_element(*self._sign_in_locator).click()\n        WebDriverWait(self.selenium, self.timeout).until(\n>                   lambda s: self._sign_in_window_handle not in self.selenium.window_handles)\n\npages/fxa.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait object at 0x102423910>\nmethod = <function <lambda> at 0x10240c488>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n            return value is not False.\"\"\"\n        end_time = time.time() + self._timeout\n        while(True):\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions:\n                pass\n            time.sleep(self._poll)\n            if(time.time() > end_time):\n                break\n>       raise TimeoutException(message)\nE       TimeoutException: Message:\n\n.env/lib/python2.7/site-packages/selenium/webdriver/support/wait.py:71: TimeoutException"}], "passed": [], "test_name": "test_hosted_paid_app_submission"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Search suggestions not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Search suggestions not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}]}