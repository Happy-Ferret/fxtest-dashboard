{"last_updated": "2014-07-28 02:30:01.918908", "results": [{"group": "Android", "test_results": [{"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_viewing_reviews_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_after_viewing_reviews_clicking_back_goes_to_app_page'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10c248890>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10c248890>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10bd2bdd0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x10bd28990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10bd2bdd0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x110f26cf8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110f0fb00>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110f473d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110f473d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x1029c7c68>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1029c7dd0>\n\n    @pytest.mark.nondestructive\n    def test_that_after_viewing_reviews_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\" Navigate to the reviews listing for an app from the URL (not by clicking through to it),\n            click back, test that the current page is the app page.\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1029b9bd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1029b9bd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_after_viewing_reviews_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_searching_with_no_matching_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_searching_with_no_matching_results'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10125a8d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10125a8d0>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x100d33dd0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x100d30990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x100d33dd0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x110d12998>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110d0d560>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110d0be10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110d0be10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x1100ef7e8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1100ef1b8>\n\n    @pytest.mark.nondestructive\n    def test_searching_with_no_matching_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1100c7590>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1100c7590>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_searching_with_no_matching_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_checks_the_addition_of_a_review'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x103f978d0>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x103f978d0>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x103a09dd0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x103a06990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x103a09dd0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10fabca70>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10fae72d8>\n\n    def test_that_checks_the_addition_of_a_review(self, mozwebqa):\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10faaf8d0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10faaf8d0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_go_back_from_settings_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_user_can_go_back_from_settings_page'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10aa90810>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10aa90810>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10b427dd0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x10b424990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10b427dd0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10de4f3b0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10de4f368>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10de7ea50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10de7ea50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x107840830>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x107840518>\n\n    @pytest.mark.nondestructive\n    def test_user_can_go_back_from_settings_page(self, mozwebqa):\n        \"\"\"\n            https://bugzilla.mozilla.org/show_bug.cgi?id=795185#c11\n            \"\"\"\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107855dd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x107855dd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_user_can_go_back_from_settings_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_that_verifies_categories_section/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_verifies_categories_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x110836890>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x110836890>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x110319dd0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x110316990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x110319dd0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x10b8244d0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10b824fc8>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a7c1b10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a7c1b10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x109a3e128>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x109a74dd0>\n\n    @pytest.mark.nondestructive\n    def test_that_verifies_categories_section(self, mozwebqa):\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109a38150>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109a38150>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_verifies_categories_section"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_returns_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_searching_returns_results'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10de31c10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10de31c10>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10d90add0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x10d907990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10d90add0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10ea01440>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ea053b0>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10d9db090>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10d9db090>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x106a93680>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x106a93320>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x106a75050>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x106a75050>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_searching_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_details_page_for_an_app/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_details_page_for_an_app'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x106848350>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x106848350>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x1061fedd0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x1061fb990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x1061fedd0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10ac42a70>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ac424d0>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109b7bc50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x109b7bc50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x106981248>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1069811b8>\n\n    @pytest.mark.nondestructive\n    def test_details_page_for_an_app(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x106922bd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x106922bd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_details_page_for_an_app"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_users_account/TestAccounts/test_user_can_login_and_logout/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_user_can_login_and_logout'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10145d810>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10145d810>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x101df4dd0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x101df1990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x101df4dd0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10d2037a0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10d246878>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10d211510>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10d211510>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_users_account.TestAccounts instance at 0x10a782cf8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10a7a6560>\n\n    @pytest.mark.nondestructive\n    def test_user_can_login_and_logout(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_users_account.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a77b110>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10a77b110>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_user_can_login_and_logout"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "stage"], "path_to_result": "tests.mobile.test_reviews/TestReviews/test_that_after_writing_a_review_clicking_back_goes_to_app_page/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_after_writing_a_review_clicking_back_goes_to_app_page'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10ca50a10>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10ca50a10>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10c52add0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x10c527990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10c52add0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_reviews.TestReviews instance at 0x10279def0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10279d950>\n\n    def test_that_after_writing_a_review_clicking_back_goes_to_app_page(self, mozwebqa):\n        \"\"\"Logged out, click \"Write a Review\" on an app page, sign in, submit a review,\n            click Back, test that the current page is the app page.\n            \"\"\"\n        self._reviews_setup(mozwebqa)\n    \n        mock_review = MockReview()\n    \n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_reviews.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10278e250>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10278e250>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_after_writing_a_review_clicking_back_goes_to_app_page"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_searching_with_empty_field_returns_results/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_that_searching_with_empty_field_returns_results'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x102155910>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x102155910>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x101c38dd0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x101c35990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x101c38dd0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x1089c2e18>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x108991518>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1089eac50>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1089eac50>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_search.TestSearch instance at 0x10dad90e0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10dad94d0>\n\n    @pytest.mark.nondestructive\n    def test_that_searching_with_empty_field_returns_results(self, mozwebqa):\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_search.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10da96bd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x10da96bd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_that_searching_with_empty_field_returns_results"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_home_page/TestHomepage/test_switch_between_new_and_popular_tab/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_switch_between_new_and_popular_tab'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10c369890>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x10c369890>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10be4cdd0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x10be49990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10be4cdd0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x105e27f80>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x105e45b00>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x105e28b90>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x105e28b90>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_home_page.TestHomepage instance at 0x1050ec830>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x1050ec5a8>\n\n    @pytest.mark.nondestructive\n    def test_switch_between_new_and_popular_tab(self, mozwebqa):\n        \"\"\"\n            Test to verify functionality for switch between New/Popular Tabs\n            \"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_home_page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1050ffd10>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1050ffd10>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_switch_between_new_and_popular_tab"}, {"skipped": {}, "all_passed": false, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_details_page/TestDetails/test_reviews_section/", "failed": [{"jobs": ["marketplace.dev.mobile.saucelabs"], "result": "error", "detail": "test setup failure: item = <Function 'test_reviews_section'>\n\n    def pytest_runtest_setup(item):\n        item.debug = {\n            'urls': [],\n            'screenshots': [],\n            'html': [],\n            'logs': [],\n            'network_traffic': []}\n        TestSetup.base_url = item.config.option.base_url\n    \n        # configure test proxies\n        if hasattr(item.config, 'browsermob_test_proxy'):\n            item.config.option.proxy_host = item.config.option.bmp_host\n            item.config.option.proxy_port = item.config.browsermob_test_proxy.port\n    \n        # consider this environment sensitive if the base url or any redirection\n        # history matches the regular expression\n        sensitive = False\n        if TestSetup.base_url and not item.config.option.skip_url_check:\n            r = requests.get(TestSetup.base_url, verify=False)\n            urls = [h.url for h in r.history] + [r.url]\n            matches = [re.search(item.config.option.sensitive_url, u) for u in urls]\n            sensitive = any(matches)\n    \n        destructive = 'nondestructive' not in item.keywords\n    \n        if (sensitive and destructive):\n            first_match = matches[next(i for i, match in enumerate(matches) if match)]\n    \n            # skip the test with an appropriate message\n            py.test.skip('This test is destructive and the target URL is ' \\\n                         'considered a sensitive environment. If this test is ' \\\n                         'not destructive, add the \\'nondestructive\\' marker to ' \\\n                         'it. Sensitive URL: %s' % first_match.string)\n    \n        if item.config.option.sauce_labs_credentials_file:\n            item.sauce_labs_credentials = credentials.read(item.config.option.sauce_labs_credentials_file)\n    \n        if item.config.option.credentials_file:\n            TestSetup.credentials = credentials.read(item.config.option.credentials_file)\n    \n        test_id = '.'.join(split_class_and_test_names(item.nodeid))\n    \n        if 'skip_selenium' not in item.keywords:\n            if hasattr(item, 'sauce_labs_credentials'):\n                from sauce_labs import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option,\n                    item.keywords,\n                    item.sauce_labs_credentials)\n            else:\n                from selenium_client import Client\n                TestSetup.selenium_client = Client(\n                    test_id,\n                    item.config.option)\n>           TestSetup.selenium_client.start()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/pytest_mozwebqa.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x1036ad810>\n\n    def start(self):\n        self.check_usage()\n        if self.webdriver:\n>           self.start_webdriver_client()\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/selenium_client.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_mozwebqa.sauce_labs.Client object at 0x1036ad810>\n\n    def start_webdriver_client(self):\n        capabilities = self.common_settings\n        capabilities.update({'platform': self.platform,\n                             'browserName': self.browser_name})\n        if self.browser_version:\n            capabilities['version'] = self.browser_version\n        if self.capabilities:\n>           capabilities.update(json.loads(self.capabilities))\n\n.env/lib/python2.7/site-packages/pytest_mozwebqa/sauce_labs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '{selenium-version:2.30.0}', encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n    \n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        if (cls is None and encoding is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x104044dd0>\ns = '{selenium-version:2.30.0}'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x104041990>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n            instance containing a JSON document)\n    \n            \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x104044dd0>\ns = '{selenium-version:2.30.0}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n            beginning with a JSON document) and return a 2-tuple of the Python\n            representation and the index in ``s`` where the document ended.\n    \n            This can be used to decode a JSON document from a string that may\n            have extraneous data at the end.\n    \n            \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           ValueError: Expecting property name: line 1 column 2 (char 1)\n\n/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py:381: ValueError"}, {"jobs": ["marketplace.prod.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x10937ccf8>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10937cc20>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1092c6210>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x1092c6210>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}, {"jobs": ["marketplace.stage.mobile.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.mobile.test_details_page.TestDetails instance at 0x110ba38c0>\nmozwebqa = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x110ba3e60>\n\n    @pytest.mark.nondestructive\n    def test_reviews_section(self, mozwebqa):\n        \"\"\"https://moztrap.mozilla.org/runtests/run/243/env/112/ - Verify details page for an app - Reviews section\"\"\"\n        home_page = Home(mozwebqa)\n>       home_page.go_to_homepage()\n\ntests/mobile/test_details_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110b83cd0>\n\n    def go_to_homepage(self):\n        self.selenium.get(self.base_url)\n>       self.wait_for_element_present(*self._featured_section_locator)\n\npages/mobile/home.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.mobile.home.Home object at 0x110b83cd0>\nlocator = ('id', 'featured')\n\n    def wait_for_element_present(self, *locator):\n        \"\"\"Wait for an element to become present.\"\"\"\n        self.selenium.implicitly_wait(0)\n        try:\n            WebDriverWait(self.selenium, 10).until(lambda s: self._selenium_root.find_element(*locator))\n        except TimeoutException:\n>           Assert.fail(TimeoutException)\n\npages/page.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>\nmsg = <class 'selenium.common.exceptions.TimeoutException'>\n\n    @classmethod\n    def fail(self, msg):\n        \"\"\"\n            Raises an assertion error with a message passed in\n    \n            :Args:\n             - Message that will be printed\n            \"\"\"\n>       raise AssertionError(msg)\nE       AssertionError: <class 'selenium.common.exceptions.TimeoutException'>\n\n.env/lib/python2.7/site-packages/unittestzero.py:125: AssertionError"}], "passed": [], "test_name": "test_reviews_section"}, {"skipped": {"jobs": ["marketplace.dev.mobile.saucelabs", "marketplace.prod.mobile.saucelabs", "marketplace.stage.mobile.saucelabs"], "result": "skipped", "detail": "condition: True: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.mobile.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: condition: True"}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.mobile.test_search/TestSearch/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}]}, {"group": "Firefox OS", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_add_review/TestMarketplaceAddReview/test_add_review/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_add_review"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_search_and_install_app.py\", line 47, in test_search_and_install_app\n    self.assertEqual('%s installed' % self.app_name, marketplace.install_notification_message)\nAssertionError: u'ConnectA2 installed' != u'ConnectA2 download stopped'\n- ConnectA2 installed\n+ ConnectA2 download stopped\n"}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_search_and_install_app/TestSearchMarketplaceAndInstallApp/test_search_and_install_app/", "failed": [], "passed": [], "test_name": "test_search_and_install_app"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_login/TestMarketplaceFeedback/test_marketplace_feedback_user/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_user"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_feedback_anonymous/TestMarketplaceFeedback/test_marketplace_feedback_anonymous/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_feedback_anonymous"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_login/TestMarketplaceLogin/test_login_marketplace/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_login_marketplace"}, {"skipped": {}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_without_connectivity/TestMarketplaceWithoutConnectivity/test_marketplace_without_connectivity/", "failed": [], "passed": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "test_name": "test_marketplace_without_connectivity"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_purchase_app.py\", line 32, in test_purchase_app\n    details_page = marketplace.navigate_to_app(APP_NAME)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 125, in navigate_to_app\n    raise Exception('The app: %s was not found.' % app_name)\nException: The app: Test Zippy With Me was not found."}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_purchase_app/TestMarketplacePurchaseApp/test_purchase_app/", "failed": [], "passed": [], "test_name": "test_purchase_app"}, {"skipped": {}, "all_passed": false, "environments": ["unknown"], "path_to_result": "test_marketplace_search_for_paid_app/TestSearchMarketplacePaidApp/test_search_paid_app/", "failed": [{"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "failure", "detail": "test failure: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 163, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_search_for_paid_app.py\", line 35, in test_search_paid_app\n    self.fail('The app: %s was not found.' % APP_NAME)\nAssertionError: The app: Test Zippy With Me was not found."}], "passed": [], "test_name": "test_search_paid_app"}, {"skipped": {"jobs": ["b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace"], "result": "skipped", "detail": "test skipped: Traceback (most recent call last):\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/.env/local/lib/python2.7/site-packages/marionette_client_mozilla_b2g28_v1_3-0.2-py2.7.egg/marionette/marionette_test.py\", line 158, in run\n    testMethod()\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/tests/test_marketplace_create_confirm_pin.py\", line 31, in test_create_confirm_pin\n    details_page = marketplace.navigate_to_app(APP_NAME)\n  File \"/var/jenkins/workspace/b2g.hamachi.mozilla-b2g28_v1_3.v1.3.marketplace/marketplacetests/marketplace/app.py\", line 125, in navigate_to_app\n    raise Exception('The app: %s was not found.' % app_name)\nException: The app: Test Zippy With Me was not found."}, "all_passed": true, "environments": ["unknown"], "path_to_result": "test_marketplace_create_confirm_pin/TestMarketplaceCreateConfirmPin/test_create_confirm_pin/", "failed": [], "passed": [], "test_name": "test_create_confirm_pin"}]}, {"group": "Desktop", "test_results": [{"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_application_page_contains_proper_objects/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_application_page_contains_proper_objects"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_the_search_tag_is_present_in_the_search_results/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_the_search_tag_is_present_in_the_search_results"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_date/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_date"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_open_view_all_link_while_popular_tab_selected/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_open_view_all_link_while_popular_tab_selected"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_clicking_on_featured_app_loads_details_page/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_clicking_on_featured_app_loads_details_page"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_basic_info_for_a_free_app/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "We currently don't have the option for changing the language in Fireplace: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/tests/desktop/consumer_pages/test_users_account.py:76: Skipped: We currently don't have the option for changing the language in Fireplace"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_that_checks_changing_language/", "failed": [], "passed": [], "test_name": "test_that_checks_changing_language"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_app_submission/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_hosted_app_submission"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_editing_user_profile/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_editing_user_profile"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_user_can_sign_in_and_sign_out_in_consumer_pages/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_user_can_sign_in_and_sign_out_in_consumer_pages"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_anonymous_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_anonymous_user"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_api_submit/TestAPI/test_assert_that_a_app_can_be_added_and_deleted_via_the_api/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_assert_that_a_app_can_be_added_and_deleted_via_the_api"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_header_has_expected_items/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_header_has_expected_items"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_a_screenshot_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "result": "skipped", "detail": "Purchase app option is currently not available for desktop environment: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Purchase app option is currently not available for desktop environment"}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_purchase_app/TestPurchaseApp/test_that_purchases_an_app_without_pre_auth_and_requests_a_refund/", "failed": [], "passed": [], "test_name": "test_that_purchases_an_app_without_pre_auth_and_requests_a_refund"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_deletion_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_deletion_of_a_review"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_opening_every_category_page_from_categories_section/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_opening_every_category_page_from_categories_section"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_editing_support_information_for_a_free_app/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_editing_support_information_for_a_free_app"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_editing_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_editing_of_a_review"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_deletes_app/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_deletes_app"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_open_view_all_link_while_new_tab_selected/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_open_view_all_link_while_new_tab_selected"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_basic_info_for_a_free_app/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_basic_info_for_a_free_app"}, {"skipped": {"jobs": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "xfail-marked test passes unexpectedly: None"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_a_screenshot_can_be_added/", "failed": [], "passed": [], "test_name": "test_that_a_screenshot_can_be_added"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_checks_search_with_foreign_characters/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_checks_search_with_foreign_characters"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_users_account/TestAccounts/test_create_new_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_create_new_user"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_required_field_validations_on_device_types_for_hosted_apps/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_required_field_validations_on_device_types_for_hosted_apps"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_searching_with_empty_field_using_submit_returns_results/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_searching_with_empty_field_using_submit_returns_results"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_categories_section/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_categories_section"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Rating]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Rating]"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_details_page/TestDetailsPage/test_that_reports_abuse_as_signed_in_user/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_reports_abuse_as_signed_in_user"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_an_icon_cannot_be_added_via_an_invalid_file_format/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_an_icon_cannot_be_added_via_an_invalid_file_format"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_reviews/TestReviews/test_that_checks_the_addition_of_a_review/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.stage.saucelabs"], "test_name": "test_that_checks_the_addition_of_a_review"}, {"skipped": {}, "all_passed": false, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_packaged_app_submission/", "failed": [{"jobs": ["marketplace.stage.developer_hub.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.developer_hub.test_developer_hub_submit_apps.TestDeveloperHubSubmitApps instance at 0x10efd6a28>\nmozwebqa_devhub_logged_in = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10efd6ef0>\n\n    @pytest.mark.credentials\n    def test_packaged_app_submission(self, mozwebqa_devhub_logged_in):\n        if '-dev.allizom' in mozwebqa_devhub_logged_in.base_url:\n            env = 'dev'\n        else:\n            env = 'stage'\n    \n        app = MockApplication(env, app_type='packaged')\n    \n        dev_home = Home(mozwebqa_devhub_logged_in)\n    \n        dev_agreement = dev_home.click_submit_new_app()\n    \n        \"\"\"Agree with the developer agreement and continue if it was not accepted\n            in a previous app submit\"\"\"\n        manifest_validation_form = dev_agreement.click_continue()\n    \n        # select device type\n        for device in app['device_type']:\n            if device[1]:\n                manifest_validation_form.device_type(device[0])\n    \n        # select app type\n        manifest_validation_form.app_type(app['app_type'])\n    \n        # submit the hosted app and validate it\n        manifest_validation_form.upload_file(app['app_path'])\n        manifest_validation_form.wait_for_app_validation()\n    \n        Assert.true(manifest_validation_form.app_validation_status,\n>                   msg=manifest_validation_form.app_validation_message)\n\ntests/desktop/developer_hub/test_developer_hub_submit_apps.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>, first = False\nmsg = {'errors': u'Error extracting manifest from zip file.', 'status': u'Your app failed validation with 1 error.'}\n\n    @classmethod\n    def true(self, first, msg=None):\n        \"\"\"\n            Asserts that what is given is equal to True\n    \n            :Args:\n             - First object to be tested\n             - Message that will be printed if it fails\n            \"\"\"\n    \n>       assert bool(first) is True, msg\nE       AssertionError: {'status': u'Your app failed validation with 1 error.', 'errors': u'Error extracting manifest from zip file.'}\n\n.env/lib/python2.7/site-packages/unittestzero.py:79: AssertionError"}, {"jobs": ["marketplace.dev.developer_hub"], "result": "failure", "detail": "test failure: self = <tests.desktop.developer_hub.test_developer_hub_submit_apps.TestDeveloperHubSubmitApps instance at 0x10ac0a368>\nmozwebqa_devhub_logged_in = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10ac22d88>\n\n    @pytest.mark.credentials\n    def test_packaged_app_submission(self, mozwebqa_devhub_logged_in):\n        if '-dev.allizom' in mozwebqa_devhub_logged_in.base_url:\n            env = 'dev'\n        else:\n            env = 'stage'\n    \n        app = MockApplication(env, app_type='packaged')\n    \n        dev_home = Home(mozwebqa_devhub_logged_in)\n    \n        dev_agreement = dev_home.click_submit_new_app()\n    \n        \"\"\"Agree with the developer agreement and continue if it was not accepted\n            in a previous app submit\"\"\"\n        manifest_validation_form = dev_agreement.click_continue()\n    \n        # select device type\n        for device in app['device_type']:\n            if device[1]:\n                manifest_validation_form.device_type(device[0])\n    \n        # select app type\n        manifest_validation_form.app_type(app['app_type'])\n    \n        # submit the hosted app and validate it\n        manifest_validation_form.upload_file(app['app_path'])\n        manifest_validation_form.wait_for_app_validation()\n    \n        Assert.true(manifest_validation_form.app_validation_status,\n>                   msg=manifest_validation_form.app_validation_message)\n\ntests/desktop/developer_hub/test_developer_hub_submit_apps.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>, first = False\nmsg = {'errors': u'Error extracting manifest from zip file.', 'status': u'Your app failed validation with 1 error.'}\n\n    @classmethod\n    def true(self, first, msg=None):\n        \"\"\"\n            Asserts that what is given is equal to True\n    \n            :Args:\n             - First object to be tested\n             - Message that will be printed if it fails\n            \"\"\"\n    \n>       assert bool(first) is True, msg\nE       AssertionError: {'status': u'Your app failed validation with 1 error.', 'errors': u'Error extracting manifest from zip file.'}\n\n.env/lib/python2.7/site-packages/unittestzero.py:79: AssertionError"}, {"jobs": ["marketplace.dev.developer_hub.saucelabs"], "result": "failure", "detail": "test failure: self = <tests.desktop.developer_hub.test_developer_hub_submit_apps.TestDeveloperHubSubmitApps instance at 0x10db20098>\nmozwebqa_devhub_logged_in = <pytest_mozwebqa.pytest_mozwebqa.TestSetup instance at 0x10db2b878>\n\n    @pytest.mark.credentials\n    def test_packaged_app_submission(self, mozwebqa_devhub_logged_in):\n        if '-dev.allizom' in mozwebqa_devhub_logged_in.base_url:\n            env = 'dev'\n        else:\n            env = 'stage'\n    \n        app = MockApplication(env, app_type='packaged')\n    \n        dev_home = Home(mozwebqa_devhub_logged_in)\n    \n        dev_agreement = dev_home.click_submit_new_app()\n    \n        \"\"\"Agree with the developer agreement and continue if it was not accepted\n            in a previous app submit\"\"\"\n        manifest_validation_form = dev_agreement.click_continue()\n    \n        # select device type\n        for device in app['device_type']:\n            if device[1]:\n                manifest_validation_form.device_type(device[0])\n    \n        # select app type\n        manifest_validation_form.app_type(app['app_type'])\n    \n        # submit the hosted app and validate it\n        manifest_validation_form.upload_file(app['app_path'])\n        manifest_validation_form.wait_for_app_validation()\n    \n        Assert.true(manifest_validation_form.app_validation_status,\n>                   msg=manifest_validation_form.app_validation_message)\n\ntests/desktop/developer_hub/test_developer_hub_submit_apps.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'unittestzero.Assert'>, first = False\nmsg = {'errors': u'Error extracting manifest from zip file.', 'status': u'Your app failed validation with 1 error.'}\n\n    @classmethod\n    def true(self, first, msg=None):\n        \"\"\"\n            Asserts that what is given is equal to True\n    \n            :Args:\n             - First object to be tested\n             - Message that will be printed if it fails\n            \"\"\"\n    \n>       assert bool(first) is True, msg\nE       AssertionError: {'status': u'Your app failed validation with 1 error.', 'errors': u'Error extracting manifest from zip file.'}\n\n.env/lib/python2.7/site-packages/unittestzero.py:79: AssertionError"}], "passed": [], "test_name": "test_packaged_app_submission"}, {"skipped": {"jobs": ["marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "result": "skipped", "detail": "expected test failure: Bug 1035692 - [dev] 500 Internal Server Error returned when trying to submit payment options for a hosted app"}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub_submit_apps/TestDeveloperHubSubmitApps/test_hosted_paid_app_submission/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs"], "test_name": "test_hosted_paid_app_submission"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_featured_application_section/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_featured_application_section"}, {"skipped": {}, "all_passed": true, "environments": ["stage", "dev"], "path_to_result": "tests.desktop.developer_hub.test_developer_hub/TestDeveloperHub/test_that_checks_apps_are_sorted_by_name/", "failed": [], "passed": ["marketplace.stage.developer_hub.saucelabs", "marketplace.dev.developer_hub", "marketplace.dev.developer_hub.saucelabs"], "test_name": "test_that_checks_apps_are_sorted_by_name"}, {"skipped": {}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_consumers_page/TestConsumerPage/test_that_verifies_gallery_section_tabs/", "failed": [], "passed": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "test_name": "test_that_verifies_gallery_section_tabs"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Search suggestions not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Search suggestions not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_search_suggestions_list_under_the_search_field/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_search_suggestions_list_under_the_search_field"}, {"skipped": {"jobs": ["marketplace.dev.saucelabs", "marketplace.prod", "marketplace.stage.saucelabs", "marketplace.prod.saucelabs"], "result": "skipped", "detail": "Sort not available yet.: /Users/Shared/Jenkins/Home/jobs/marketplace.dev.saucelabs/workspace/.env/lib/python2.7/site-packages/_pytest/skipping.py:120: Skipped: Sort not available yet."}, "all_passed": true, "environments": ["dev", "prod", "stage"], "path_to_result": "tests.desktop.consumer_pages.test_search/TestSearching/test_that_verifies_the_sort_region_from_search_results[Relevancy]/", "failed": [], "passed": [], "test_name": "test_that_verifies_the_sort_region_from_search_results[Relevancy]"}]}]}